<!-- Partial Template: TestUnit.Partials.CryptoTest -->
<div id="qunit-test-result"></div>
<h2>PHP Unicode Crypto Tests [ [###EXE-TIME|html###] ] :</h2>
<div style="white-space: nowrap !important;">
Unicode@String:&nbsp;<span id="unicode-string" style="color:#FF5500;">[###UNICODE-TEXT|html###]</span><br>
Escaped@JS:&nbsp;<span id="jsescaped-string" style="color:#778899;">[###JS-ESCAPED|html###]</span><br>
SHA512:&nbsp;<span id="sha512-hash" style="color:#888888;">[###HASH-SHA512|html###]</span><br>
SHA1:&nbsp;<span id="sha1-hash" style="color:#999999;">[###HASH-SHA1|html###]</span><br>
MD5:&nbsp;<span id="md5-hash" style="color:#AAAAAA;">[###HASH-MD5|html###]</span><br>
CRC32B:&nbsp;<span id="crc32b-hash" style="color:#AAAAAA;">[###HASH-CRC32B|html###]</span><br>
Base64@Encoded:&nbsp;<span id="base64enc-string" style="color:#666699;">[###BASE64-ENCODED|html###]</span><br>
Base64@Decoded:&nbsp;<span id="base64dec-string" style="color:#FF5500;">[###BASE64-DECODED|html###]</span><br>
Bin2Hex@Encoded:&nbsp;<span id="bin2hex-encoded" style="color:#444477;">[###BIN2HEX-ENCODED|html###]</span><br>
Hex2Bin@Decoded:&nbsp;<span id="hex2bin-decoded" style="color:#FF5500;">[###HEX2BIN-DECODED|html###]</span><br>
<input type="hidden" id="blowfisk-key" value="[###BLOWFISH-KEY|html###]">
Blowfish.CBC@Encrypted:&nbsp;<span id="blowfish-encrypted" style="color:#66AA00;">[###BLOWFISH-ENCRYPTED|html###]</span><br>
Blowfish.CBC@Decrypted:&nbsp;<span id="blowfish-decrypted" style="color:#FF5500;">[###BLOWFISH-DECRYPTED|html###]</span><br>
Blowfish.CBC@Options:&nbsp;<span style="color:#CCCCCC;">PHP:[###BLOWFISH-OPTIONS|html###]</span><br>
CustomCipher@Encrypted:&nbsp;<span id="hash-encrypted" style="color:#626831;">[###HASHCRYPT-ENC|html###]</span><br>
CustomCipher@Decrypted:&nbsp;<span id="hash-decrypted" style="color:#FF5500;">[###HASHCRYPT-DEC|html###]</span><br>
CustomCipher@Options:&nbsp;<span style="color:#CCCCCC;">PHP:[###HASHCRYPT-OPTIONS|html###]</span><br>
</div>
<hr>
<h2>Javascript Unicode Crypto Tests:</h2>
<div id="testunit-partial-crypto" style="white-space: nowrap !important;"></div>
<script type="text/javascript">
(function() {
	//--
	var the_error = 0;
	//--
	var unicodeText = $('#unicode-string').text();
	var the_sha512 = SmartJS_CryptoHash.sha512(unicodeText);
	var the_sha1 = SmartJS_CryptoHash.sha1(unicodeText);
	var the_md5 = SmartJS_CryptoHash.md5(unicodeText);
	var the_crc32b = SmartJS_CryptoHash.crc32b(unicodeText);
	//--
	var b64enc = SmartJS_Base64.encode(unicodeText);
	var b64dec = SmartJS_Base64.decode(b64enc);
	//--
	var bin2hex = SmartJS_CoreUtils.bin2hex(unicodeText).toUpperCase();
	var hex2bin = SmartJS_CoreUtils.hex2bin(SmartJS_CoreUtils.stringTrim(bin2hex).toLowerCase());
	//--
	var bf_key = $('#blowfisk-key').val();
	var bf_enc = SmartJS_CryptoBlowfish.encrypt(unicodeText, bf_key);
	var bf_dec = SmartJS_CryptoBlowfish.decrypt(bf_enc, bf_key);
	//--
	var jsescTxt = SmartJS_CoreUtils.escape_js(unicodeText);
	var htmlcode = 'Unicode@String:&nbsp;<span style="color:#FF5500;">' + SmartJS_CoreUtils.escape_html(unicodeText) + '</span><br>';
	htmlcode += SmartJS_CoreUtils.nl2br('Escaped@JS:&nbsp;<span style="color:#778899;">' + SmartJS_CoreUtils.escape_html(jsescTxt) + '</span>' + "\n");
	htmlcode += 'SHA512:&nbsp;<span style="color:#888888;">' + SmartJS_CoreUtils.escape_html(the_sha512) + '</span><br>';
	htmlcode += 'SHA1:&nbsp;<span style="color:#999999;">' + SmartJS_CoreUtils.escape_html(the_sha1) + '</span><br>';
	htmlcode += 'MD5:&nbsp;<span style="color:#AAAAAA;">' + SmartJS_CoreUtils.escape_html(the_md5) + '</span><br>';
	htmlcode += 'CRC32B:&nbsp;<span style="color:#AAAAAA;">' + SmartJS_CoreUtils.escape_html(the_crc32b) + '</span><br>';
	htmlcode += 'Base64@Encoded:&nbsp;<span style="color:#666699;">' + SmartJS_CoreUtils.escape_html(b64enc) + '</span><br>';
	htmlcode += 'Base64@Decoded:&nbsp;<span style="color:#FF5500;">' + SmartJS_CoreUtils.escape_html(b64dec) + '</span><br>';
	htmlcode += 'Bin2Hex@Encoded:&nbsp;<span style="color:#444477;">' + SmartJS_CoreUtils.escape_html(bin2hex) + '</span><br>';
	htmlcode += 'Hex2Bin@Decoded:&nbsp;<span style="color:#FF5500;">' + SmartJS_CoreUtils.escape_html(hex2bin) + '</span><br>';
	htmlcode += 'Blowfish@Encrypted:&nbsp;<span style="color:#66AA00;">' + SmartJS_CoreUtils.escape_html(bf_enc) + '</span><br>';
	htmlcode += 'Blowfish@Decrypted:&nbsp;<span style="color:#FF5500;">' + SmartJS_CoreUtils.escape_html(bf_dec) + '</span><br>';
	htmlcode += 'Blowfish@Options:&nbsp;<span style="color:#CCCCCC;">JS:blowfish/CBC</span>' + '<br>';
	$('#testunit-partial-crypto').html(htmlcode);
	//-- JS Tests
	if((b64dec !== unicodeText) || (SmartJS_CryptoHash.sha1(b64dec) !== the_sha1)) {
		console.error('ERROR: Base64 Encode/Decode Test Failed:\n' + 'Before: `' + unicodeText + '` / ' + the_sha1 + '\n' + 'After: `' + b64dec + '` / ' + SmartJS_CryptoHash.sha1(b64dec));
		the_error++;
	} //end if
	if((hex2bin !== unicodeText) || (SmartJS_CryptoHash.sha1(hex2bin) !== the_sha1)) {
		console.error('ERROR: Bin2Hex / Hex2Bin Test Failed:\n' + 'Before: `' + unicodeText + '` / ' + the_sha1 + '\n' + 'After: `' + hex2bin + '` / ' + SmartJS_CryptoHash.sha1(hex2bin));
		the_error++;
	} //end if
	if((bf_dec !== unicodeText) || (SmartJS_CryptoHash.sha1(bf_dec) !== the_sha1)) {
		console.error('ERROR: BlowFish Test Failed:\n' + 'Before: `' + unicodeText + '` / ' + the_sha1 + '\n' + 'After: `' + bf_dec + '` / ' + SmartJS_CryptoHash.sha1(bf_dec));
		the_error++;
	} //end if
	//-- compare with PHP
	if($('#unicode-string').text() !== unicodeText) {
		console.error('ERROR: Text comparison with PHP failed ...');
		the_error++;
	} //end if
	if($('#jsescaped-string').text() != jsescTxt) {
		console.error('ERROR: JS-Escaped comparison with PHP failed ...');
		the_error++;
	} //end if
	if($('#sha512-hash').text() !== the_sha512) {
		console.error('ERROR: SHA512 comparison with PHP Failed ...');
		the_error++;
	} //end if
	if($('#sha1-hash').text() !== the_sha1) {
		console.error('ERROR: SHA1 comparison with PHP Failed ...');
		the_error++;
	} //end if
	if($('#md5-hash').text() !== the_md5) {
		console.error('ERROR: MD5 comparison with PHP Failed ...');
		the_error++;
	} //end if
	if($('#crc32b-hash').text() !== the_crc32b) {
		console.error('ERROR: CRC32B comparison with PHP Failed ...');
		the_error++;
	} //end if
	if($('#base64enc-string').text() != b64enc) {
		console.error('ERROR: B64-Encoded comparison with PHP failed ...');
		the_error++;
	} //end if
	if($('#base64dec-string').text() != b64dec) {
		console.error('ERROR: B64-Decoded comparison with PHP failed ...');
		the_error++;
	} //end if
	if($('#bin2hex-encoded').text() != bin2hex) {
		console.error('ERROR: Bin2Hex comparison with PHP failed ...');
		the_error++;
	} //end if
	if($('#hex2bin-decoded').text() != hex2bin) {
		console.error('ERROR: Hex2Bin comparison with PHP failed ...');
		the_error++;
	} //end if
	if((bf_enc != $('#blowfish-encrypted').text()) || (SmartJS_CryptoHash.sha1(bf_enc) != SmartJS_CryptoHash.sha1($('#blowfish-encrypted').text()))) {
		console.error('ERROR: PHP Blowfish encrypted is different than Javascript one ...');
		the_error++;
	} //end if
	var decode_php_blowfish = SmartJS_CryptoBlowfish.decrypt($('#blowfish-encrypted').text(), bf_key);
	if((decode_php_blowfish != unicodeText) || (SmartJS_CryptoHash.sha1(decode_php_blowfish) != SmartJS_CryptoHash.sha1(unicodeText))) {
		console.error('ERROR: Javascript decrypted Blowfish is different than PHP one ...' + decode_php_blowfish);
		the_error++;
	} //end if
	if($('#unicode-string').text() !== $('#blowfish-decrypted').text()) {
		console.error('ERROR: PHP Blowfish decrypted is different than original PHP string ...');
		the_error++;
	} //end if
	//--
	if(($('#unicode-string').text() != $('#hash-decrypted').text()) || (SmartJS_CryptoHash.sha1($('#unicode-string').text()) != SmartJS_CryptoHash.sha1($('#hash-decrypted').text()))) {
		console.error('ERROR: PHP Hash Decrypted is different than than original PHP string ...');
		the_error++;
	} //end if
	//--
	if(the_error === 0) {
		[@@@SUB-TEMPLATE:test-dialog-js.inc.htm@@@]
	} else {
		console.error('Test ERROR: PHP / Javascript Unicode Crypto: ' + the_error);
	} //end if
	//--
})();
</script>
<!-- #END :: Partial Template: TestUnit.Partials.CryptoTest -->