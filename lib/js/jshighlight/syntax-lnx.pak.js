
// # JS Package: syntax-lnx.pak.js :: #START# :: @ generated from lib/js/jshighlight/syntax/lnx/*.js
// Included Files: lnx/*.js #

// ### DO NOT EDIT THIS FILE AS IT WILL BE OVERWRITTEN EACH TIME THE INCLUDED SCRIPTS WILL CHANGE !!! ###

// === lnx/awk.js

/*
Language: Awk
Author: Matthew Daly <matthewbdaly@gmail.com>
Website: http://matthewdaly.co.uk/
Description: language definition for Awk scripts
*/

// syntax/lnx/awk.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('awk',
function(hljs) {
	var VARIABLE = {
		className: 'variable',
		variants: [
			{begin: /\$[\w\d#@][\w\d_]*/},
			{begin: /\$\{(.*?)}/}
		]
	};
	var KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
	var STRING = {
		className: 'string',
		contains: [hljs.BACKSLASH_ESCAPE],
		variants: [
			{
				begin: /(u|b)?r?'''/, end: /'''/,
				relevance: 10
			},
			{
				begin: /(u|b)?r?"""/, end: /"""/,
				relevance: 10
			},
			{
				begin: /(u|r|ur)'/, end: /'/,
				relevance: 10
			},
			{
				begin: /(u|r|ur)"/, end: /"/,
				relevance: 10
			},
			{
				begin: /(b|br)'/, end: /'/
			},
			{
				begin: /(b|br)"/, end: /"/
			},
			hljs.APOS_STRING_MODE,
			hljs.QUOTE_STRING_MODE
		]
	};
	return {
	 keywords: {
		 keyword: KEYWORDS
		},
		contains: [
			VARIABLE,
			STRING,
			hljs.REGEXP_MODE,
			hljs.HASH_COMMENT_MODE,
			hljs.NUMBER_MODE
		]
	}
}
);

// #END

// === lnx/bash.js

/*
Language: Bash
Author: vah <vahtenberg@gmail.com>
Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
Category: common
*/

// syntax/lnx/bash.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('bash',
function(hljs) {
	var VAR = {
		className: 'variable',
		variants: [
			{begin: /\$[\w\d#@][\w\d_]*/},
			{begin: /\$\{(.*?)}/}
		]
	};
	var QUOTE_STRING = {
		className: 'string',
		begin: /"/, end: /"/,
		contains: [
			hljs.BACKSLASH_ESCAPE,
			VAR,
			{
				className: 'variable',
				begin: /\$\(/, end: /\)/,
				contains: [hljs.BACKSLASH_ESCAPE]
			}
		]
	};
	var APOS_STRING = {
		className: 'string',
		begin: /'/, end: /'/
	};

	return {
		aliases: ['sh', 'zsh'],
		lexemes: /\b-?[a-z\._]+\b/,
		keywords: {
			keyword:
				'if then else elif fi for while in do done case esac function',
			literal:
				'true false',
			built_in:
				// Shell built-ins
				// http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
				'break cd continue eval exec exit export getopts hash pwd readonly return shift test times ' +
				'trap umask unset ' +
				// Bash built-ins
				'alias bind builtin caller command declare echo enable help let local logout mapfile printf ' +
				'read readarray source type typeset ulimit unalias ' +
				// Shell modifiers
				'set shopt ' +
				// Zsh built-ins
				'autoload bg bindkey bye cap chdir clone comparguments compcall compctl compdescribe compfiles ' +
				'compgroups compquote comptags comptry compvalues dirs disable disown echotc echoti emulate ' +
				'fc fg float functions getcap getln history integer jobs kill limit log noglob popd print ' +
				'pushd pushln rehash sched setcap setopt stat suspend ttyctl unfunction unhash unlimit ' +
				'unsetopt vared wait whence where which zcompile zformat zftp zle zmodload zparseopts zprof ' +
				'zpty zregexparse zsocket zstyle ztcp',
			_:
				'-ne -eq -lt -gt -f -d -e -s -l -a' // relevance booster
		},
		contains: [
			{
				className: 'meta',
				begin: /^#![^\n]+sh\s*$/,
				relevance: 10
			},
			{
				className: 'function',
				begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
				returnBegin: true,
				contains: [hljs.inherit(hljs.TITLE_MODE, {begin: /\w[\w\d_]*/})],
				relevance: 0
			},
			hljs.HASH_COMMENT_MODE,
			QUOTE_STRING,
			APOS_STRING,
			VAR
		]
	};
}
);

// #END

// === lnx/perl.js

/*
Language: Perl
Author: Peter Leonov <gojpeg@yandex.ru>
Category: common
*/

// syntax/lnx/perl.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('perl',
function(hljs) {
	var PERL_KEYWORDS = 'getpwent getservent quotemeta msgrcv scalar kill dbmclose undef lc ' +
		'ma syswrite tr send umask sysopen shmwrite vec qx utime local oct semctl localtime ' +
		'readpipe do return format read sprintf dbmopen pop getpgrp not getpwnam rewinddir qq' +
		'fileno qw endprotoent wait sethostent bless s|0 opendir continue each sleep endgrent ' +
		'shutdown dump chomp connect getsockname die socketpair close flock exists index shmget' +
		'sub for endpwent redo lstat msgctl setpgrp abs exit select print ref gethostbyaddr ' +
		'unshift fcntl syscall goto getnetbyaddr join gmtime symlink semget splice x|0 ' +
		'getpeername recv log setsockopt cos last reverse gethostbyname getgrnam study formline ' +
		'endhostent times chop length gethostent getnetent pack getprotoent getservbyname rand ' +
		'mkdir pos chmod y|0 substr endnetent printf next open msgsnd readdir use unlink ' +
		'getsockopt getpriority rindex wantarray hex system getservbyport endservent int chr ' +
		'untie rmdir prototype tell listen fork shmread ucfirst setprotoent else sysseek link ' +
		'getgrgid shmctl waitpid unpack getnetbyname reset chdir grep split require caller ' +
		'lcfirst until warn while values shift telldir getpwuid my getprotobynumber delete and ' +
		'sort uc defined srand accept package seekdir getprotobyname semop our rename seek if q|0 ' +
		'chroot sysread setpwent no crypt getc chown sqrt write setnetent setpriority foreach ' +
		'tie sin msgget map stat getlogin unless elsif truncate exec keys glob tied closedir' +
		'ioctl socket readlink eval xor readline binmode setservent eof ord bind alarm pipe ' +
		'atan2 getgrent exp time push setgrent gt lt or ne m|0 break given say state when';
	var SUBST = {
		className: 'subst',
		begin: '[$@]\\{', end: '\\}',
		keywords: PERL_KEYWORDS
	};
	var METHOD = {
		begin: '->{', end: '}'
		// contains defined later
	};
	var VAR = {
		variants: [
			{begin: /\$\d/},
			{begin: /[\$%@](\^\w\b|#\w+(::\w+)*|{\w+}|\w+(::\w*)*)/},
			{begin: /[\$%@][^\s\w{]/, relevance: 0}
		]
	};
	var STRING_CONTAINS = [hljs.BACKSLASH_ESCAPE, SUBST, VAR];
	var PERL_DEFAULT_CONTAINS = [
		VAR,
		hljs.HASH_COMMENT_MODE,
		hljs.COMMENT(
			'^\\=\\w',
			'\\=cut',
			{
				endsWithParent: true
			}
		),
		METHOD,
		{
			className: 'string',
			contains: STRING_CONTAINS,
			variants: [
				{
					begin: 'q[qwxr]?\\s*\\(', end: '\\)',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\[', end: '\\]',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\{', end: '\\}',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\|', end: '\\|',
					relevance: 5
				},
				{
					begin: 'q[qwxr]?\\s*\\<', end: '\\>',
					relevance: 5
				},
				{
					begin: 'qw\\s+q', end: 'q',
					relevance: 5
				},
				{
					begin: '\'', end: '\'',
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: '"', end: '"'
				},
				{
					begin: '`', end: '`',
					contains: [hljs.BACKSLASH_ESCAPE]
				},
				{
					begin: '{\\w+}',
					contains: [],
					relevance: 0
				},
				{
					begin: '\-?\\w+\\s*\\=\\>',
					contains: [],
					relevance: 0
				}
			]
		},
		{
			className: 'number',
			begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
			relevance: 0
		},
		{ // regexp container
			begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
			keywords: 'split return print reverse grep',
			relevance: 0,
			contains: [
				hljs.HASH_COMMENT_MODE,
				{
					className: 'regexp',
					begin: '(s|tr|y)/(\\\\.|[^/])*/(\\\\.|[^/])*/[a-z]*',
					relevance: 10
				},
				{
					className: 'regexp',
					begin: '(m|qr)?/', end: '/[a-z]*',
					contains: [hljs.BACKSLASH_ESCAPE],
					relevance: 0 // allows empty "//" which is a common comment delimiter in other languages
				}
			]
		},
		{
			className: 'function',
			beginKeywords: 'sub', end: '(\\s*\\(.*?\\))?[;{]', excludeEnd: true,
			relevance: 5,
			contains: [hljs.TITLE_MODE]
		},
		{
			begin: '-\\w\\b',
			relevance: 0
		},
		{
			begin: "^__DATA__$",
			end: "^__END__$",
			subLanguage: 'mojolicious',
			contains: [
				{
						begin: "^@@.*",
						end: "$",
						className: "comment"
				}
			]
		}
	];
	SUBST.contains = PERL_DEFAULT_CONTAINS;
	METHOD.contains = PERL_DEFAULT_CONTAINS;

	return {
		aliases: ['pl', 'pm'],
		lexemes: /[\w\.]+/,
		keywords: PERL_KEYWORDS,
		contains: PERL_DEFAULT_CONTAINS
	};
}
);

// #END

// === lnx/shell.js

/*
Language: Shell Session
Requires: bash.js
Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
Category: common
*/

// syntax/lnx/shell.js
// HighlightJs: v.9.13.1

hljs.registerLanguage('shell',
function(hljs) {
	return {
		aliases: ['console'],
		contains: [
			{
				className: 'meta',
				begin: '^\\s{0,3}[\\w\\d\\[\\]()@-]*[>%$#]',
				starts: {
					end: '$', subLanguage: 'bash'
				}
			}
		]
	}
}
);

// #END

// ===== [#]

// # JS Package: syntax-lnx.pak.js :: #END#

