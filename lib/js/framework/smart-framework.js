
// # JS Package: smart-framework.js :: #START# :: @ generated from lib/js/framework/src/*.js
// Included Files: browser_check.js ; core_utils.js ; arch_utils.js ; crypt_utils.js ; ifmodalbox.js ; browser_utils.js ; ifmodalbox_scanner.js #

// ### DO NOT EDIT THIS FILE AS IT WILL BE OVERWRITTEN EACH TIME THE INCLUDED SOURCES WILL CHANGE !!! ###

// ############### browser_check.js

// [LIB - Smart.Framework / JS / Browser Check]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: -

//==================================================================
// v.20190115
// TODO: More Testing ...
//==================================================================

//================== [NO:evcode]

/**
* CLASS :: Browser Test Compliance
*
* @class Test_Browser_Compliance
* @static
*
* @module Smart.Framework/JS/Browser
*/
var Test_Browser_Compliance = new function() { // START CLASS

// :: static


/**
 * Detect if a Browser support Cookies or have the Cookies enabled.
 * If fail, an alert will be shown.
 *
 * @method checkCookies
 * @static
 */
this.checkCookies = function() {
	//--
	/* commented out as deprecated ...
	var the_datetime = new Date();
	var the_value = 'Time-' + the_datetime.getTime();
	//--
	var the_name = 'BrowserTestCompliance__Javascript__CookieTest';
	//--
	var the_cookie = '';
	try {
		document.cookie = the_name + '=' + encodeURIComponent(String(the_value)) + '; path=/';
		the_cookie = document.cookie.match(new RegExp('(^|;)\\s*' + the_name + '=([^;\\s]*)'));
	} catch(err){}
	//--
	if((the_cookie) && (the_cookie !== null) && (the_cookie.length >= 3) && (decodeURIComponent(the_cookie[2]) == (String(the_value)))) {
	*/
	if(navigator.cookieEnabled === true) {
		// ok
	} else {
		alert('NOTICE: The COOKIES are required to access this URL ...\nMake sure your browser allow this URL to set cookies.\nFollow this steps:\n\n1. ENABLE cookies in your browser from PREFERENCES (OPTIONS) / PRIVACY  Panel. \n2. RELOAD / REFRESH this URL. \n3. IF YOU STILL SEE THIS MESSAGE after following the above steps it means that your browser may have a problem or is outdated. In this case try to use another browser like:\n* FireFox 10 or later\n* Chrome 12 or later\n* Safari 5 or later\n* Internet Explorer 9 or later (or other browser that support cookies).');
	} //end if
	//--
} //END FUNCTION


/**
 * Detect if the Browser is on a mobile device.
 * This is a very basic but effective and quick detection
 *
 * @method checkCookies
 * @static
 */
this.checkIsMobileDevice = function() {
	//--
	var isMobile = false;
	//-- https://coderwall.com/p/i817wa/one-line-function-to-detect-mobile-devices-with-javascript
	if((typeof window.orientation !== "undefined") || (navigator.userAgent.indexOf('IEMobile') !== -1)) {
		isMobile = true;
	} //end if
	//--
	if(((typeof window.screen.width !== "undefined") && (window.screen.width > 0)) && ((typeof window.screen.height !== "undefined") && (window.screen.height > 0))) {
		if((window.screen.width <= 320) || (window.screen.height <= 320)) {
			isMobile = true;
		} //end if
	} //end if
	//--
	return isMobile;
	//--
} //END FUNCTION


/**
 * Detect if the Internet Explorer matches minimum required version: at least IE9.
 * If fail, an alert will be shown.
 *
 * @method checkIEVersion
 * @static
 */
this.checkIEVersion = function(min_ver) { // check if version of internet explorer is at least 8 ; max is 10
	//--
	if(typeof min_ver == 'undefined') {
		min_ver = 9; // minimum required version of Internet Explorer
	} //end if
	//--
	var ver = -1; // Return value assumes failure.
	//--
	if((navigator.appName == 'Microsoft Internet Explorer') || (navigator.appName == 'Netscape')) { // IE11 or later identifies as Netscape
		//--
		var ua = navigator.userAgent;
		var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
		if(re.exec(ua) != null) {
			ver = parseFloat(RegExp.$1);
		} //end if
		//--
		if((ver > -1) && (ver < min_ver)) {
			alert('You are using an OLD VERSION of Internet Explorer (' + ver + ') OR your Internet Explorer have the (Old) Compatibility Mode Enabled which drops some of the HTML5 features.\n\nDISABLE the COMPATIBILITY MODE or UPDATE your Internet Explorer to version ' + min_ver + ' or later.\nYou can also use ALTERNATE BROWSERS:\n* Firefox 10 or later\n* Chrome 12 or later\n* Safari 5 or later\n\nRESET / UPGRADE / SWITCH your browser and try again.');
		} //end if
		//--
	} //end if
	//--
} //END FUNCTION
//--

} //END CLASS

//==================================================================
//==================================================================

// END

// ############### core_utils.js

// [LIB - Smart.Framework / JS / Core Utils]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: -

//==================================================================
//==================================================================

//================== [NO:evcode]

/**
* CLASS :: Core Utils
*
* @class SmartJS_CoreUtils
* @static
*
* @module Smart.Framework/JS/Core
*/
var SmartJS_CoreUtils = new function() { // START CLASS :: v.20190313

// :: static

var _class = this; // self referencing

var tseed = (new Date()).valueOf(); // time based uuid seed, must be global in this class to ensure real unique UIDs per execution

/**
 * Generate a base36 10-chars length UUID
 *
 * @method uuid
 * @static
 * @return 	{String} 			A unique UUID, time based, base36 ; Ex: 1A2B3C4D5E
 */
this.uuid = function() {
	//--
	uuid = String((tseed++).toString(36)).toUpperCase().substr(-10); // if longer than 10 chars, take the last 10 chars only
	//--
	if(uuid.length < 10) {
		for(var i=0; i<uuid.length; i++) { // left pad with zeroes
			if(uuid.length < 10) {
				uuid = String('0' + uuid);
			} else {
				break;
			} //end if else
		} //end for
	} //end if
	//--
	return String(uuid);
	//--
} //END FUNCTION


/**
 * Check if a number is valid: Finite and !NaN
 *
 * @method isFiniteNumber
 * @static
 * @param 	{Number} 	num 	The number to be tested
 * @return 	{Boolean} 			TRUE is number is Finite and !NaN ; FALSE otherwise
 */
this.isFiniteNumber = function(num) { // http://stackoverflow.com/questions/5690071/why-check-for-isnan-after-isfinite
	//--
	return Boolean(isFinite(num) && !isNaN(num));
	//--
} //END FUNCTION


/**
 * Trim a string (at begining or end by any whitespace: space \ n \ r \ t)
 *
 * @method stringTrim
 * @static
 * @param 	{String} 	str 	The string to be trimmed
 * @return 	{String} 			The trimmed string
 */
this.stringTrim = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	return String(str.replace(/^\s\s*/, '').replace(/\s\s*$/, '')); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Make uppercase the first character of a string
 * This implementation is compatible with PHP unicode mb_convert_case/MB_CASE_UPPER on the first letter
 *
 * @method stringUcFirst
 * @static
 * @param 	{String} 	str 	The string to be processed
 * @return 	{String} 			The processed string
 */
this.stringUcFirst = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	var out = '';
	if(str.length == 1) {
		out = str.toUpperCase();
	} else if(str.length > 1) {
		out = str.charAt(0).toUpperCase() + str.substr(1);
	} //end if else
	//--
	return String(out);
	//--
} //END FUNCTION


/**
 * Make uppercase the first character of each word in a string while making lowercase the others
 * This implementation is compatible with PHP unicode mb_convert_case/MB_CASE_TITLE
 *
 * @method stringUcWords
 * @static
 * @param 	{String} 	str 	The string to be processed
 * @return 	{String} 			The processed string
 */
this.stringUcWords = function(str) {
	//--
	// discuss at: http://locutus.io/php/ucwords/
	// original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
	// improved by: Waldo Malqui Silva (http://waldo.malqui.info)
	// improved by: Robin
	// improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
	// bugfixed by: Cetvertacov Alexandr (https://github.com/cetver)
	// improved by: unix-world.org
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	var out = String(str).toLowerCase().replace(/^(.)|\s+(.)/g, function($1) {
		if($1) {
			return String($1).toUpperCase();
		} else {
			return '';
		} //end if else
	});
	//--
	return String(out);
	//--
} //END FUNCTION


/**
 * Split string by colon with trimming pre/post
 *
 * @method stringSplitbyColon
 * @static
 * @param 	{String} 	str 	The string to be splitted by : (colon)
 * @return 	{Array} 			The array with string parts splitted
 */
this.stringSplitbyColon = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	str = _class.stringTrim(str);
	//--
	return str.split(/\s*\:\s*/); // Array
	//--
} //END FUNCTION


/**
 * Split string by equal with trimming pre/post
 *
 * @method stringSplitbyEqual
 * @static
 * @param 	{String} 	str 	The string to be splitted by = (equal)
 * @return 	{Array} 			The array with string parts splitted
 */
this.stringSplitbyEqual = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	str = _class.stringTrim(str);
	//--
	return str.split(/\s*\=\s*/); // Array
	//--
} //END FUNCTION


/**
 * Split string by comma with trimming pre/post
 *
 * @method stringSplitbyComma
 * @static
 * @param 	{String} 	str 	The string to be splitted by , (comma)
 * @return 	{Array} 			The array with string parts splitted
 */
this.stringSplitbyComma = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	str = _class.stringTrim(str);
	//--
	return str.split(/\s*,\s*/); // Array
	//--
} //END FUNCTION


/**
 * Split string by semicolon with trimming pre/post
 *
 * @method stringSplitbySemicolon
 * @static
 * @param 	{String} 	str 		The string to be splitted by ; (semicolon)
 * @return 	{Array} 				The array with string parts splitted
 */
this.stringSplitbySemicolon = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	str = _class.stringTrim(str);
	//--
	return str.split(/\s*;\s*/); // Array
	//--
} //END FUNCTION


/**
 * Replace all occurences in a string - Case Sensitive
 *
 * @method stringReplaceAll
 * @static
 * @param 	{String} 	token 		The string part to be replaced
 * @param 	{String} 	newToken 	The string part replacement
 * @param 	{String} 	str 		The string where to do the replacements
 * @return 	{String} 				The processed string
 */
this.stringReplaceAll = function(token, newToken, str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	return String(str.split(token).join(newToken)); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Replace all occurences in a string - Case Insensitive
 *
 * @method stringIReplaceAll
 * @static
 * @param 	{String} 	token 		The string part to be replaced
 * @param 	{String} 	newToken 	The string part replacement
 * @param 	{String} 	str 		The string where to do the replacements
 * @return 	{String} 				The processed string
 */
this.stringIReplaceAll = function(token, newToken, str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	var i = -1;
	//--
	if((str != '') && (typeof token === 'string') && (typeof newToken === 'string')) {
		//--
		token = token.toLowerCase();
		//--
		while((i = str.toLowerCase().indexOf(token, i >= 0 ? i + newToken.length : 0)) !== -1) {
			str = String(str.substring(0, i) + newToken + str.substring(i + token.length));
		} //end while
		//--
	} //end if
	//--
	return String(str); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Get the first element from an Array
 *
 * @method arrayGetFirst
 * @static
 * @param 	{Array} 	arr 		The array to be used
 * @return 	{Mixed} 				The first element from the array
 */
this.arrayGetFirst = function(arr) {
	//--
	if(arr instanceof Array) {
		return arr.shift(); // Mixed
	} else {
		return '';
	} //end if
	//--
} //END FUNCTION


/**
 * Get the last element from an Array
 *
 * @method arrayGetLast
 * @static
 * @param 	{Array} 	arr 		The array to be used
 * @return 	{Mixed} 				The last element from the array
 */
this.arrayGetLast = function(arr) {
	//--
	if(arr instanceof Array) {
		return arr.pop(); // Mixed
	} else {
		return '';
	} //end if
	//--
} //END FUNCTION


/**
 * Format a number as INTEGER
 *
 * @method format_number_int
 * @static
 * @param 	{Numeric} 	y_number 				A numeric value
 * @param 	{Boolean} 	y_allow_negatives 		If TRUE will allow negative values else will return just positive (unsigned) values
 * @return 	{Integer} 							An integer number
 */
this.format_number_int = function(y_number, y_allow_negatives) {
	//--
	if((typeof y_number == 'undefined') || (y_number == null) || (y_number == '') || (!_class.isFiniteNumber(y_number))) {
		y_number = 0;
	} //end if
	//--
	if(y_allow_negatives !== true) {
		y_allow_negatives = false;
	} //end if
	//--
	y_number = parseInt(String(y_number));
	if(!_class.isFiniteNumber(y_number)) {
		y_number = 0;
	} //end if
	//--
	if(y_allow_negatives !== true) { // force as positive
		if(y_number < 0) {
			y_number = parseInt(-1 * y_number);
		} //end if
		if(!_class.isFiniteNumber(y_number)) {
			y_number = 0;
		} //end if
		if(y_number < 0) {
			y_number = 0;
		} //end if
	} //end if
	//--
	return y_number; // Integer
	//--
} //END FUNCTION


/**
 * Format a number as DECIMAL
 *
 * @method format_number_dec
 * @static
 * @param 	{Numeric} 	y_number 					A numeric value
 * @param 	{Integer} 	y_decimals 					The number of decimal to use (between 1 and 4)
 * @param 	{Boolean} 	y_allow_negatives 			*Optional* If FALSE will disallow negative (will return just positive / unsigned values)
 * @param 	{Boolean} 	y_discard_trailing_zeroes 	*Optional* If set to FALSE will keep trailing zeroes, otherwise will discard them
 * @return 	{Integer} 								A decimal number
 */
this.format_number_dec = function(y_number, y_decimals, y_allow_negatives, y_discard_trailing_zeroes) {
	//--
	if((typeof y_number == 'undefined') || (y_number == null) || (y_number == '') || (!_class.isFiniteNumber(y_number))) {
		y_number = 0;
	} //end if
	//--
	if((typeof y_decimals == 'undefined') || (y_decimals == null) || (y_decimals == '')) {
		y_decimals = 2; // default;
	} //end if
	y_decimals = parseInt(y_decimals);
	if(!_class.isFiniteNumber(y_decimals)) {
		y_decimals = 2;
	} //end if
	if((y_decimals < 1) || (y_decimals > 4)) {
		y_decimals = 2;
	} //end if
	//--
	if(y_allow_negatives !== false) {
		y_allow_negatives = true; // default
	} //end if
	//--
	if(y_discard_trailing_zeroes !== true) {
		y_discard_trailing_zeroes = false; // default
	} //end if
	//--
	y_number = parseFloat(String(y_number)).toFixed(y_decimals);
	if(!_class.isFiniteNumber(y_number)) {
		y_number = parseFloat(0).toFixed(y_decimals);
	} //end if
	//--
	if(y_allow_negatives !== true) { // force as positive
		if(y_number < 0) {
			y_number = parseFloat(-1 * y_number).toFixed(y_decimals);
		} //end if
		if(!_class.isFiniteNumber(y_number)) {
			y_number = parseFloat(0).toFixed(y_decimals);
		} //end if
		if(y_number < 0) {
			y_number = parseFloat(0).toFixed(y_decimals);
		} //end if
	} //end if
	//-- remove trailing zeroes if not set to keep them
	if(y_discard_trailing_zeroes !== false) {
		y_number = parseFloat(y_number);
	} //end if
	//--
	return y_number; // Integer
	//--
} //END FUNCTION


/**
 * Safe escape URL Variable (using RFC3986 standards to be full Unicode compliant).
 * This is a shortcut to the encodeURIComponent() to provide a standard into Smart.Framework/JS.
 *
 * @method escape_url
 * @static
 * @param 	{String} 	str 		The URL variable value to be escaped
 * @return 	{String} 				The escaped URL variable
 */
this.escape_url = function(str) {
	//-- format sting
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	str = String(encodeURIComponent(str));
	//-- fixes to make it more compliant with it RFC 3986
	str = str.replace('!', '%21');
	str = str.replace("'", '%27');
	str = str.replace('(', '%28');
	str = str.replace(')', '%29');
	str = str.replace('*', '%2A');
	//--
	return String(str); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Quote string with slashes in a C style.
 * This is compatible with PHP addcslashes() function.
 *
 * @method addcslashes
 * @static
 * @param 	{String} 	str 		The string to be escaped
 * @param 	{String} 	charlist 	A list of characters to be escaped. If charlist contains characters \n, \r etc., they are converted in C-like style, while other non-alphanumeric characters with ASCII codes lower than 32 and higher than 126 converted to octal representation
 * @return 	{String} 				Returns the escaped string
 */
this.addcslashes = function(str, charlist) {
	//--
	//  discuss at: http://phpjs.org/functions/addcslashes/
	// original by: Brett Zamir (http://brett-zamir.me)
	//        note: We show double backslashes in the return value example code below because a JavaScript string will not
	//        note: render them as backslashes otherwise
	//   example 1: addcslashes('foo[ ]', 'A..z'); // Escape all ASCII within capital A to lower z range, including square brackets
	//   returns 1: "\\f\\o\\o\\[ \\]"
	//   example 2: addcslashes("zoo['.']", 'z..A'); // Only escape z, period, and A here since not a lower-to-higher range
	//   returns 2: "\\zoo['\\.']"
	//   example 3: addcslashes("@a\u0000\u0010\u00A9", "\0..\37!@\177..\377"); // Escape as octals those specified and less than 32 (0x20) or greater than 126 (0x7E), but not otherwise
	//   returns 3: '\\@a\\000\\020\\302\\251'
	//   example 4: addcslashes("\u0020\u007E", "\40..\175"); // Those between 32 (0x20 or 040) and 126 (0x7E or 0176) decimal value will be backslashed if specified (not octalized)
	//   returns 4: '\\ ~'
	//   example 5: addcslashes("\r\u0007\n", '\0..\37'); // Recognize C escape sequences if specified
	//   returns 5: "\\r\\a\\n"
	//   example 6: addcslashes("\r\u0007\n", '\0'); // Do not recognize C escape sequences if not specified
	//   returns 6: "\r\u0007\n"
	// improved by: unix-world.org
	//--
	var target = '',
		chrs = [],
		i = 0,
		j = 0,
		c = '',
		next = '',
		rangeBegin = '',
		rangeEnd = '',
		chr = '',
		begin = 0,
		end = 0,
		octalLength = 0,
		postOctalPos = 0,
		cca = 0,
		escHexGrp = [],
		encoded = '',
		percentHex = /%([\dA-Fa-f]+)/g;
	//--
	var _pad = function(n, c) {
		if((n = n + '').length < c) {
			return new Array(++c - n.length).join('0') + n;
		} //end if
		return n;
	};
	//--
	for(i=0; i<charlist.length; i++) {
		c = charlist.charAt(i);
		next = charlist.charAt(i + 1);
		if(c === '\\' && next && (/\d/).test(next)) {
			rangeBegin = charlist.slice(i + 1).match(/^\d+/)[0]; // Octal
			octalLength = rangeBegin.length;
			postOctalPos = i + octalLength + 1;
			if(charlist.charAt(postOctalPos) + charlist.charAt(postOctalPos + 1) === '..') {
				// Octal begins range
				begin = rangeBegin.charCodeAt(0);
				if((/\\\d/).test(charlist.charAt(postOctalPos + 2) + charlist.charAt(postOctalPos + 3))) {
					// Range ends with octal
					rangeEnd = charlist.slice(postOctalPos + 3).match(/^\d+/)[0];
					// Skip range end backslash
					i += 1;
				} else if(charlist.charAt(postOctalPos + 2)) {
					// Range ends with character
					rangeEnd = charlist.charAt(postOctalPos + 2);
				} else {
					console.error('ERROR: SmartJS/Core@addcslashes: Range with no end point');
				} //end if else
				end = rangeEnd.charCodeAt(0);
				if(end > begin) {
					// Treat as a range
					for(j=begin; j<=end; j++) {
						chrs.push(String.fromCharCode(j));
					} //end for
				} else {
					// Supposed to treat period, begin and end as individual characters only, not a range
					chrs.push('.', rangeBegin, rangeEnd);
				} //end if else
				// Skip dots and range end (already skipped range end backslash if present)
				i += rangeEnd.length + 2;
			} else {
				// Octal is by itself
				chr = String.fromCharCode(parseInt(rangeBegin, 8));
				chrs.push(chr);
			} //end if else
			// Skip range begin
			i += octalLength;
		} else if(next + charlist.charAt(i + 2) === '..') {
			// Character begins range
			rangeBegin = c;
			begin = rangeBegin.charCodeAt(0);
			if((/\\\d/).test(charlist.charAt(i + 3) + charlist.charAt(i + 4))) {
				// Range ends with octal
				rangeEnd = charlist.slice(i + 4).match(/^\d+/)[0];
				// Skip range end backslash
				i += 1;
			} else if(charlist.charAt(i + 3)) {
				// Range ends with character
				rangeEnd = charlist.charAt(i + 3);
			} else {
				console.error('ERROR: SmartJS/Core@addcslashes: Range with no end point');
			} //end if else
			end = rangeEnd.charCodeAt(0);
			if(end > begin) {
				// Treat as a range
				for(j=begin; j<=end; j++) {
					chrs.push(String.fromCharCode(j));
				} //end for
			} else {
				// Supposed to treat period, begin and end as individual characters only, not a range
				chrs.push('.', rangeBegin, rangeEnd);
			} //end if else
			// Skip dots and range end (already skipped range end backslash if present)
			i += rangeEnd.length + 2;
		} else {
			// Character is by itself
			chrs.push(c);
		} //end if else
	} //end for
	//--
	for(i = 0; i < str.length; i++) {
		c = str.charAt(i);
		if(chrs.indexOf(c) !== -1) {
			target += '\\';
			cca = c.charCodeAt(0);
			if(cca < 32 || cca > 126) {
				// Needs special escaping
				switch (c) {
					case '\n':
						target += 'n';
						break;
					case '\t':
						target += 't';
						break;
					case '\u000D':
						target += 'r';
						break;
					case '\u0007':
						target += 'a';
						break;
					case '\v':
						target += 'v';
						break;
					case '\b':
						target += 'b';
						break;
					case '\f':
						target += 'f';
						break;
					default:
						//target += _pad(cca.toString(8), 3);break; // Sufficient for UTF-16
						encoded = encodeURIComponent(c);
						// 3-length-padded UTF-8 octets
						if((escHexGrp = percentHex.exec(encoded)) !== null) {
							target += _pad(parseInt(escHexGrp[1], 16).toString(8), 3); // already added a slash above
						} //end if
						while((escHexGrp = percentHex.exec(encoded)) !== null) {
							target += '\\' + _pad(parseInt(escHexGrp[1], 16).toString(8), 3);
						} //end while
						break;
				} //end switch
			} else {
				// Perform regular backslashed escaping
				target += c;
			} //end if else
		} else {
			// Just add the character unescaped
			target += c;
		} //end if else
	} //end for
	//--
	return target ? String(target) : '';
	//--
} //END FUNCTION


/**
 * Convert special characters to HTML entities.
 * This is like the Smart::escape_css() from the PHP Smart.Framework.
 *
 * @method escape_css
 * @static
 * @param 	{String} 	str 		The string to be escaped
 * @return 	{String} 				The safe escaped string to be injected in CSS code
 */
this.escape_css = function(str) { // v.181217
	//--
	return String(_class.addcslashes(str, "\x00..\x1F!\"#$%&'()*+,./:;<=>?@[\\]^`{|}~"));
	//--
} //END FUNCTION


/*
 * Convert special characters to HTML entities.
 * This is like the htmlspecialchars() from PHP.
 * Depending on the flag parameter, the following values will be converted to safe HTML entities:
 * 		ENT_COMPAT: 	< > & "
 * 		ENT_QUOTES: 	< > & " '
 * 		ENT_NOQUOTES: 	< > &
 *
 * @method htmlspecialchars
 * @static
 * @param 	{String} 	str 		The string to be escaped
 * @param 	{Enum} 		flag 		*Optional* A bitmask of one or more of the following flags: ENT_COMPAT (default) ; ENT_QUOTES ; ENT_NOQUOTES
 * @return 	{String} 				The safe escaped string to be injected in HTML code
 */
this.htmlspecialchars = function(str, flag) { // v.170308
	//-- format sting
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//-- format flag
	if((typeof flag == 'undefined') || (flag == undefined) || (flag == null) || (flag == '')) {
		flag = 'ENT_COMPAT';
	} //end if
	//-- replace basics
	str = str.replace(/&/g, '&amp;');
	str = str.replace(/</g, '&lt;');
	str = str.replace(/>/g, '&gt;');
	//-- replace quotes, depending on flag
	if(flag == 'ENT_QUOTES') { // ENT_QUOTES
		//-- replace all quotes: ENT_QUOTES
		str = str.replace(/"/g, '&quot;');
		str = str.replace(/'/g, '&#039;');
		//--
	} else if (flag != 'ENT_NOQUOTES') { // ENT_COMPAT
		//-- default, replace just double quotes
		str = str.replace(/"/g, '&quot;');
		//--
	} //end if else
	//--
	return String(str); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Convert special characters to HTML entities.
 * This is like the Smart::escape_html() from the PHP Smart.Framework.
 * These values will be converted to safe HTML entities: < > & "
 *
 * @method escape_html
 * @static
 * @param 	{String} 	str 		The string to be escaped
 * @return 	{String} 				The safe escaped string to be injected in HTML code
 */
this.escape_html = function(str) { // v.170308
	//--
	return String(_class.htmlspecialchars(str, 'ENT_COMPAT'));
	//--
} //END FUNCTION


/**
 * Convert special characters to escaped entities for safe use with Javascript Strings.
 * This is like the Smart::escape_js() from the PHP Smart.Framework.
 *
 * @method escape_js
 * @static
 * @param 	{String} 	str 		The string to be escaped
 * @return 	{String} 				The escaped string using the json encode standard to be injected between single quotes '' or double quotes ""
 */
this.escape_js = function(str) { // v.170831
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//-- sub-function to escape a string as unicode
	var escape_unicode = function(str) {
		str = String(str);
		return String('\\u' + ('0000' + str.charCodeAt(0).toString(16)).slice(-4).toLowerCase());
	} //END FUNCTION
	//-- table of character substitutions: get from json2.js but excludding the " which is done later to preserve compatibility with PHP
	var meta = {
		'\b': '\\b',
		'\t': '\\t',
		'\n': '\\n',
		'\f': '\\f',
		'\r': '\\r',
		'\\': '\\\\'
	};
	//-- replace meta
	var encoded = str.replace(/[\x00-\x1f\x7f-\x9f\\]/g, function(a){ var c = meta[a]; return typeof c === 'string' ? c: escape_unicode(a); });
	//-- replace unicode characters
	encoded = encoded.replace(/[\u007F-\uFFFF]/g, function(c){ return escape_unicode(c); });
	//-- replace special characters (use uppercase unicode escapes as in PHP ; example: u003C / u003E )
	encoded = encoded.replace(/[\u0026]/g, '\\u0026');	// & 	JSON_HEX_AMP
	encoded = encoded.replace(/[\u0022]/g, '\\u0022');	// " 	JSON_HEX_QUOT
	encoded = encoded.replace(/[\u0027]/g, '\\u0027');	// ' 	JSON_HEX_APOS
	encoded = encoded.replace(/[\u003C]/g, '\\u003C'); 	// < 	JSON_HEX_TAG
	encoded = encoded.replace(/[\u003E]/g, '\\u003E'); 	// > 	JSON_HEX_TAG
	encoded = encoded.replace(/[\/]/g,     '\\/');	    // / 	JSON_UNESCAPED_SLASHES
	//-- return string
	return String(encoded); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Replace new lines \ r \ n ; \ n with the <br> html tag.
 * This is compatible with the PHP nl2br() function.
 *
 * @method nl2br
 * @static
 * @param {String} str The string to be processed
 * @return {String} The processed string with <br> html tags if new lines were detected
 */
this.nl2br = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	return String(str.replace(/\r\n/g, /\n/).replace(/\r/g, /\n/).replace(/\n/g, '<br>')); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Capitalize the first letter of a string.
 * This is compatible with the PHP ucfirst() function.
 *
 * @method ucfirst
 * @static
 * @param {String} str The string to be processed
 * @return {String} The processed string with 1st letter capitalized
 */
this.ucfirst = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	return String(str.charAt(0).toUpperCase() + str.slice(1));
	//--
} //END FUNCTION


/**
 * Un-quotes a quoted string.
 * This is compatible with PHP stripslashes() function.
 *
 * @method stripslashes
 * @static
 * @param {String} str The string to be processed
 * @return {String} The processed string
 */
this.stripslashes = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//-- original written by: Kevin van Zonneveld (http://kevin.vanzonneveld.net) ; improved by: Ates Goral, marrtins, rezna ; fixed / bugfixed by: Mick@el, Onno Marsman, Brett Zamir, Rick Waldron, Brant Messenger
	return str.replace(/\\(.?)/g, function(s, n1) {
		switch(n1) {
			case '\\':
				return '\\';
			case '0':
				return '\u0000';
			case '':
				return '';
			default:
				return String(n1);
		} //end switch
	});
	//--
} //END FUNCTION


/**
 * Encodes an ISO-8859-1 string to UTF-8
 *
 * @method utf8_encode
 * @static
 * @param 	{String} 	string 			The string to be processed
 * @return 	{String} 					The processed string
 */
this.utf8_encode = function(string) {
	//--
	if((typeof string == 'undefined') || (string == undefined) || (string == null)) {
		string = '';
	} else {
		string = String(string); // force string
	} //end if else
	//--
	var utftext = '';
	//--
	string = string.replace(/\r\n/g,"\n");
	for(var n = 0; n < string.length; n++) {
		var c = string.charCodeAt(n);
		if (c < 128) {
			utftext += String.fromCharCode(c);
		} else if((c > 127) && (c < 2048)) {
			utftext += String.fromCharCode((c >> 6) | 192);
			utftext += String.fromCharCode((c & 63) | 128);
		} else {
			utftext += String.fromCharCode((c >> 12) | 224);
			utftext += String.fromCharCode(((c >> 6) & 63) | 128);
			utftext += String.fromCharCode((c & 63) | 128);
		} //end if else
	} //end for
	//--
	return String(utftext); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Decodes an UTF-8 string to ISO-8859-1
 *
 * @method utf8_decode
 * @static
 * @param 	{String} 	string 			The string to be processed
 * @return 	{String} 					The processed string
 */
this.utf8_decode = function(utftext) {
	//--
	if((typeof utftext == 'undefined') || (utftext == undefined) || (utftext == null)) {
		utftext = '';
	} else {
		utftext = String(utftext); // force string
	} //end if else
	//--
	var string = '';
	//--
	var i = 0;
	var c, c1, c2, c3;
	c = c1 = c2 = c3 = 0;
	while ( i < utftext.length ) {
		c = utftext.charCodeAt(i);
		if (c < 128) {
			string += String.fromCharCode(c);
			i++;
		} else if((c > 191) && (c < 224)) {
			c2 = utftext.charCodeAt(i+1);
			string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
			i += 2;
		} else {
			c2 = utftext.charCodeAt(i+1);
			c3 = utftext.charCodeAt(i+2);
			string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
			i += 3;
		} //end if else
	} //end while
	//--
	return String(string); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Convert binary data into hexadecimal representation.
 * This is compatible with PHP bin2hex() function.
 *
 * @method bin2hex
 * @static
 * @param 	{String} 	s 			The string to be processed
 * @return 	{String} 				The processed string
 */
this.bin2hex = function(s) {
	//--
	s = String(_class.utf8_encode(s)); // force string and make it unicode safe
	//--
	var hex = '';
	var i, l, n;
	for(i = 0, l = s.length; i < l; i++) {
		n = s.charCodeAt(i).toString(16);
		hex += n.length < 2 ? '0' + n : n;
	} //end for
	//--
	return String(hex); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Decodes a hexadecimally encoded binary string.
 * This is compatible with PHP hex2bin() function.
 *
 * @method hex2bin
 * @static
 * @param 	{String} 	hex 		The string to be processed
 * @return 	{String} 				The processed string
 */
this.hex2bin = function(hex) {
	//--
	hex = String(_class.stringTrim(hex)); // force string and trim to avoid surprises ...
	//--
	var bytes = [], str;
	//--
	for(var i=0; i< hex.length-1; i+=2) {
		bytes.push(parseInt(hex.substr(i, 2), 16));
	} //end for
	//--
	return String(_class.utf8_decode(String.fromCharCode.apply(String, bytes))); // fix to return empty string instead of null
	//--
} //END FUNCTION


/**
 * Quote regular expression characters in a string.
 * This is compatible with PHP preg_quote() function.
 *
 * @method preg_quote
 * @static
 * @param 	{String} 	str 		The string to be processed
 * @return 	{String} 				The processed string
 */
this.preg_quote = function(str) {
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	// http://kevin.vanzonneveld.net
	// + original by: booeyOH
	// + improved by: Ates Goral (http://magnetiq.com)
	// + improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
	// + bugfixed by: Onno Marsman
	// *   example 1: preg_quote("$40");
	// *   returns 1: '\$40'
	// *   example 2: preg_quote("*RRRING* Hello?");
	// *   returns 2: '\*RRRING\* Hello\?'
	// *   example 3: preg_quote("\\.+*?[^]$(){}=!<>|:");
	// *   returns 3: '\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:'
	// improved by: unix-world.org
	//--
	return String(str.replace(/([\\\.\+\*\?\[\^\]\$\(\)\{\}\=\!\<\>\|\:])/g, '\\$1'));
	//--
} //END FUNCTION


/*
 * Add to List
 *
 * @private : internal development only
 * @method addToList
 * @static
 * @param 	{String} 	newVal 		The new val to add to the List
 * @param 	{String} 	textList 	The string List to add newVal at
 * @param 	{String} 	splitBy 	The string separator, any of: , ;
 * @return 	{String} 				The processed string as List separed by separator
 */
this.addToList = function(newVal, textList, splitBy) {
	//--
	newVal = String(newVal);
	//--
	var terms = [];
	switch(splitBy) {
		case ',':
			terms = SmartJS_CoreUtils.stringSplitbyComma(textList);
			break;
		case ';':
			terms = SmartJS_CoreUtils.stringSplitbySemicolon(textList);
			break;
		default:
			console.error('ERROR: SmartJS/Core@addToList: Invalid splitBy separator. Must be any of [,;]');
			return '';
	} //end switch
	//--
	terms.pop(); // remove the current input
	var found = 0;
	if(terms.length > 0) {
		for(var i=0; i<terms.length; i++) {
			if(terms[i] == newVal) {
				found = 1;
				break;
			} //end if
		} //end for
	} //end if
	if(found == 0) {
		terms.push(newVal); // add the selected item
	} //end if
	terms.push(''); // add placeholder to get the comma-and-space at the end
	//--
	return String(terms.join(splitBy + ' '));
	//--
} //END FUNCTION


/**
 * Regexp Match All occurences.
 * This is compatible just with the PHP preg_match_all()
 *
 * @method stringRegexMatchAll
 * @static
 * @param 	{String} 	str 		The string to be searched
 * @param 	{Regex} 	regexp 		A valid regular expression
 * @return 	{Array} 				The array with matches
 */
this.stringRegexMatchAll = function(str, regexp) { // v.170922
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	var matches = [];
	//--
	var match = null;
	var loopidx = 0;
	var maxloops = 1000000; // set a safe value as in php.ini pcre.recursion_limit, but higher enough: 1 million
	while(match = regexp.exec(str)) {
		matches.push(match);
		loopidx++;
		if(loopidx >= maxloops) { // protect against infinite loop
			console.error('WARNING: SmartJS/Core@stringRegexMatchAll has entered in a possible infinite loop. Max recursion depth reached at: ' + maxloops);
			break;
		} //end if
	} //end while
	//--
	/* this is a non safe alternative of the above code but does not have a protection against infinite loops !!!
	//var arguments = {}; // DON'T use it as arguments is a reserved word in JS and the minifiers will break it below if found as defined as var here ... (prior this was a fix, but not necessary: required init to avoid using using arguments from a global context !)
	str.replace(regexp, function() {
		var arr = ([]).slice.call(arguments, 0);
		var extras = arr.splice(-2);
		arr.index = extras[0];
		arr.input = extras[1];
		matches.push(arr);
	}); */
	//--
	return matches; // Array
	//--
} //END FUNCTION


/**
 * Find if a string contains another sub-string
 *
 * @method stringContains
 * @static
 * @param 	{String} 	str 		The string to search in (haystack)
 * @param 	{String} 	search 		The string to search for in haystack (needle)
 * @param 	{Integer+} 	pos 		The position to start
 * @return 	{Boolean} 				TRUE if the str contains search at the pos
 */
this.stringContains = function(str, search, pos) { // v.181222
	//--
	// inspired from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith#Polyfill
	//--
	if((typeof str == 'undefined') || (str == undefined) || (str == null)) {
		str = '';
	} else {
		str = String(str); // force string
	} //end if else
	//--
	if((typeof search == 'undefined') || (search == undefined) || (search == null)) {
		search = '';
	} else {
		search = String(search); // force string
	} //end if else
	//--
	if(search === '') {
		return false;
	} //end if
	//--
	if((typeof pos == 'undefined') || (pos == undefined) || (pos == null)) {
		return str.includes(search);
	} //end if
	pos = parseInt(pos);
	if(pos < 0) {
		pos = 0;
	} //end if
	if(!_class.isFiniteNumber(pos)) {
		pos = 0;
	} //end if
	//--
	if(!str || !search) {
		return false;
	} //end if
	//--
	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	//--
} //END FUNCTION


/**
 * Render Simple Markers-TPL Template + Comments + Specials (only markers replacements with escaping or processing syntax and support for comments and special replacements: SPACE, TAB, R, N ; no support for IF / LOOP / INCLUDE syntax since the js regex is too simplistic and this can be implemented using real js code)
 * This is compatible just with the REPLACE MARKERS of Smart.Framework PHP server-side Markers-TPL Templating for substitutions on client-side, except the extended syntax as IF/LOOP/INCLUDE.
 * To be used together with the server-side Markers-TPL templating, to avoid the server-side markers to be replaced as (####+/-MARKER+/-####) will need the template to be escape_url+escape_js and 3rd param: urlescaped = TRUE
 *
 * @method renderMarkersTpl
 * @static
 * @param 	{String} 	template 	The string template with markers
 * @param 	{ArrayObj} 	arrobj 		The Object-Array with marker replacements as { 'MAR.KER_1' => 'Value 1', 'MARKER-2' => 'Value 2', ... }
 * @return 	{String} 				The processed string
 */
this.renderMarkersTpl = function(template, arrobj, urlescaped) { // v.20190313
	//--
	var debug = false;
	//--
	if((typeof template === 'string') && (typeof arrobj === 'object')) {
		//--
		if(urlescaped === true) {
			template = String(decodeURIComponent(template));
		} //end if
		//--
		template = _class.stringTrim(template);
		//-- remove comments: javascript regex miss the regex flags: s = single line: Dot matches newline characters ; U = Ungreedy: The match becomes lazy by default ; Now a ? following a quantifier makes it greedy
		// because missing the single line dot match and ungreedy is almost impossible to solve this with a regex in an optimum way, tus we use this trick :-)
		// because missing the /s flag, the extra \S have to be added to the \s to match new lines and the (.*) have become ([\s\S^]*)
		// because missing the /U flag, missing ungreedy, we need to split/join to solve this
		if((template.indexOf('[%%%%COMMENT%%%%]') >= 0) && (template.indexOf('[%%%%/COMMENT%%%%]') >= 0)) { // indexOf() :: if not found returns -1
			var arr_comments = [];
			arr_comments = template.split('[%%%%COMMENT%%%%]');
			for(var i=0; i<arr_comments.length; i++) {
				if(arr_comments[i].indexOf('[%%%%/COMMENT%%%%]') >= 0) { // indexOf() :: if not found returns -1
					arr_comments[i] = '[%%%%COMMENT%%%%]' + arr_comments[i];
					arr_comments[i] = arr_comments[i].replace(/[\s\S]?\[%%%%COMMENT%%%%\]([\s\S^]*)\[%%%%\/COMMENT%%%%\][\s\S]?/g, '');
				} //end if
			} //end for
			template = _class.stringTrim(arr_comments.join(''));
			arr_comments = null;
		} //end if
		//-- replace markers
		if(template != '') {
			//--
			var regexp = /\[####([A-Z0-9_\-\.]+)((\|[a-z0-9]+)*)####\]/g; // {{{SYNC-REGEX-MARKER-TEMPLATES}}}
			//--
			var markers = _class.stringRegexMatchAll(template, regexp);
		//	if(debug) {
		//		console.log(markers);
		//	} //end if
			//--
			if(markers.length) {
				//--
				for(var i=0; i<markers.length; i++) {
					//--
					var marker = markers[i]; // expects array
				//	if(debug) {
				//		console.log(JSON.stringify(marker, null, 2));
				//	} //end if
					//--
					if(marker.length) {
						//--
						var tmp_marker_val 		= '';									// just initialize
						var tmp_marker_id 		= marker[0] ? String(marker[0]) : ''; 	// [####THE-MARKER|escapings...####]
						var tmp_marker_key 		= marker[1] ? String(marker[1]) : ''; 	// THE-MARKER
						var tmp_marker_esc 		= marker[2] ? String(marker[2]) : ''; 	// |escaping1(|escaping2...|escaping99)
						var tmp_marker_arr_esc  = []; 									// just initialize
						//--
						if((tmp_marker_id != null) && (tmp_marker_id != '') && (tmp_marker_key != null) && (tmp_marker_key != '') && (template.indexOf(tmp_marker_id) >= 0)) { // indexOf() :: if not found returns -1 # check if exists because it does replaceAll on a cycle so another cycle can run without scope !
							//--
							if(debug) {
								console.log('Marker Found: ' + tmp_marker_id + ' :: ' + tmp_marker_key);
							} //end if
							//--
							if(tmp_marker_key in arrobj) {
								//-- prepare val from input array
								tmp_marker_val = arrobj[tmp_marker_key] ? arrobj[tmp_marker_key] : '';
								tmp_marker_val = String(tmp_marker_val);
								//-- protect against cascade recursion or undefined variables or n/a syntax
								if(debug) { // this notice is too complex to fix in all situations, thus make it show just on Debug !
									if(tmp_marker_val.indexOf('[####') >= 0) { // indexOf() :: if not found returns -1
										console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Markers detected in Replacement Key: ' + tmp_marker_key + ' in Template for Value: ^' + '\n' + tmp_marker_val + '\n' + template + '$ #####}');
									} //end if
									if(tmp_marker_val.indexOf('[%%%%') >= 0) { // indexOf() :: if not found returns -1
										console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Marker Syntax detected in Replacement Key: ' + tmp_marker_key + ' in Template for Value: ^' + '\n' + tmp_marker_val + '\n' + template + '$ #####}');
									} //end if
									if(tmp_marker_val.indexOf('[@@@@') >= 0) { // indexOf() :: if not found returns -1
										console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Marker Sub-Templates detected in Replacement Key: ' + tmp_marker_key + ' in Template for Value: ^' + '\n' + tmp_marker_val + '\n' + template + '$ #####}');
									} //end if
								} //end if
								tmp_marker_val = _class.stringReplaceAll('[####', '(####*', tmp_marker_val);
								tmp_marker_val = _class.stringReplaceAll('####]', '*####)', tmp_marker_val);
								tmp_marker_val = _class.stringReplaceAll('[%%%%', '(%%%%*', tmp_marker_val);
								tmp_marker_val = _class.stringReplaceAll('%%%%]', '*%%%%)', tmp_marker_val);
								tmp_marker_val = _class.stringReplaceAll('[@@@@', '(@@@@*', tmp_marker_val);
								tmp_marker_val = _class.stringReplaceAll('@@@@]', '*@@@@)', tmp_marker_val);
								//--
								if(tmp_marker_esc) { // if non-empty before removing leading | ; else no escapings
									//--
									if(_class.stringContains(tmp_marker_esc, '|', 0)) { // if contains leading |
										tmp_marker_esc = tmp_marker_esc.substr(1); // remove leading |
									} //end if
									//--
									if(tmp_marker_esc) { // if non-empty after removing leading | ; else no escapings
										//--
										tmp_marker_arr_esc = tmp_marker_esc.split(/\|/); // Array, split by |
									//	if(debug) {
									//		console.log(JSON.stringify(tmp_marker_arr_esc, null, 2));
									//	} //end if
										//--
										if(tmp_marker_arr_esc.length) {
											//--
											for(var j=0; j<tmp_marker_arr_esc.length; j++) {
												//--
												var escaping = String('|' + String(tmp_marker_arr_esc[j]));
												if(debug) {
													console.log(tmp_marker_id + ' / ' + escaping);
												} //end if
												//--
												if(escaping == '|bool') { // Boolean
													if(tmp_marker_val) {
														tmp_marker_val = 'true';
													} else {
														tmp_marker_val = 'false';
													} //end if else
													if(debug) {
														console.log('Marker Format Bool: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|int') { // Integer
													tmp_marker_val = parseInt(tmp_marker_val);
													if(!_class.isFiniteNumber(tmp_marker_val)) {
														tmp_marker_val = 0;
													} //end if
													tmp_marker_val = String(tmp_marker_val);
													if(debug) {
														console.log('Marker Format Int: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping.substring(0, 4) == '|dec') { // Dec (1..4)
													var xnum = parseInt(escaping.substring(4));
													if(!_class.isFiniteNumber(xnum)) {
														xnum = 1;
													} //end if
													if(xnum < 1) {
														xnum = 1;
													} //end if
													if(xnum > 4) {
														xnum = 4;
													} //end if
													tmp_marker_val = _class.format_number_dec(tmp_marker_val, xnum, true, false); // allow negatives, do not discard trailing zeroes
													if(!_class.isFiniteNumber(tmp_marker_val)) {
														tmp_marker_val = 0;
													} //end if
													tmp_marker_val = String(tmp_marker_val);
													if(debug) {
														console.log('Marker Format Dec[' + xnum + ']: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
													xnum = null;
												} else if(escaping == '|num') { // Number (Float / Decimal / Integer)
													tmp_marker_val = parseFloat(tmp_marker_val);
													if(!_class.isFiniteNumber(tmp_marker_val)) {
														tmp_marker_val = 0;
													} //end if
													tmp_marker_val = String(tmp_marker_val);
													if(debug) {
														console.log('Marker Format Number: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|htmid') { // HTML ID
													tmp_marker_val = tmp_marker_val.replace(/[^a-zA-Z0-9_\-]/g, '');
													tmp_marker_val = String(tmp_marker_val);
													if(debug) {
														console.log('Marker Format HTML-ID: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|jsvar') { // JS Variable
													tmp_marker_val = tmp_marker_val.replace(/[^a-zA-Z0-9_]/g, '');
													tmp_marker_val = String(tmp_marker_val);
													if(debug) {
														console.log('Marker Format JS-VAR: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if((escaping.substring(0, 7) == '|substr') || (escaping.substring(0, 7) == '|subtxt')) { // Sub(String|Text) (0,num)
													var xnum = parseInt(escaping.substring(7));
													if(!_class.isFiniteNumber(xnum)) {
														xnum = 1;
													} //end if
													if(xnum < 1) {
														xnum = 1;
													} //end if
													if(xnum > 65535) {
														xnum = 65535;
													} //end if
													if(xnum >= 1 && xnum <= 65535) {
														var xlen = tmp_marker_val.length;
														if(escaping.substring(0, 7) == '|subtxt') {
															if(xnum < 5) {
																xnum = 5;
															} //end if
															xnum = xnum - 3;
															if(xlen > xnum) {
																tmp_marker_val = tmp_marker_val.substring(0, xnum);
																tmp_marker_val = tmp_marker_val.replace(/\s+?(\S+)?$/, ''); // {{{SYNC-REGEX-TEXT-CUTOFF}}}
																tmp_marker_val = String(tmp_marker_val) + '...';
															} //end if
															if(debug) {
																console.log('Marker Sub-Text(' + xnum + '): ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
															} //end if
														} else { // '|substr'
															if(xlen > xnum) {
																tmp_marker_val = tmp_marker_val.substring(0, xnum);
															} //end if
															if(debug) {
																console.log('Marker Sub-String(' + xnum + '): ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
															} //end if
														} //end if
														xlen = null;
													} //end if
													xnum = null;
												} else if(escaping == '|lower') { // apply lowercase
													tmp_marker_val = String(tmp_marker_val).toLowerCase();
													if(debug) {
														console.log('Marker Format Apply LowerCase: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|upper') { // apply uppercase
													tmp_marker_val = String(tmp_marker_val).toUpperCase();
													if(debug) {
														console.log('Marker Format Apply UpperCase: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|ucfirst') { // apply uppercase first character
													tmp_marker_val = String(_class.stringUcFirst(tmp_marker_val));
													if(debug) {
														console.log('Marker Format Apply UcFirst: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|ucwords') { // apply uppercase on each word
													tmp_marker_val = String(_class.stringUcWords(tmp_marker_val));
													if(debug) {
														console.log('Marker Format Apply UcWords: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|trim') { // apply trim
													tmp_marker_val = String(_class.stringTrim(tmp_marker_val));
													if(debug) {
														console.log('Marker Format Apply Trim: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|url') { // escape URL
													tmp_marker_val = _class.escape_url(tmp_marker_val);
													if(debug) {
														console.log('Marker URL-Escape: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|json') { // format as Json Data ; expects pure JSON !!!
													var jsonObj = null;
													try {
														jsonObj = JSON.parse(tmp_marker_val); // it MUST be JSON !
													} catch(err){
														jsonObj = null;
													} //end try catch
													tmp_marker_val = JSON.stringify(jsonObj, null, null); // ensure no pretty print or json replacer is used
													tmp_marker_val = String(tmp_marker_val); // force string
													// Fixes: the JSON stringify does not make the JSON to be HTML-Safe, thus we need several minimal replacements: https://www.drupal.org/node/479368 + escape /
													tmp_marker_val = tmp_marker_val.replace(/[\u0026]/g, '\\u0026');	// & 	JSON_HEX_AMP
													tmp_marker_val = tmp_marker_val.replace(/[\u003C]/g, '\\u003C'); 	// < 	JSON_HEX_TAG (use uppercase as in PHP)
													tmp_marker_val = tmp_marker_val.replace(/[\u003E]/g, '\\u003E'); 	// > 	JSON_HEX_TAG (use uppercase as in PHP)
													tmp_marker_val = tmp_marker_val.replace(/[\/]/g,     '\\/');	    // / 	JSON_UNESCAPED_SLASHES
													// this JSON string will not be 100% like the one produced via PHP with HTML-Safe arguments but at least have the minimum escapes to avoid conflicting HTML tags
													tmp_marker_val = _class.stringTrim(tmp_marker_val);
													if(tmp_marker_val == '') {
														tmp_marker_val = 'null'; // ensure a minimal json as null for empty string if no expr !
													} //end if
													if(debug) {
														console.log('Marker Format JSON: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|js') { // Escape JS
													tmp_marker_val = _class.escape_js(tmp_marker_val);
													if(debug) {
														console.log('Marker JS-Escape: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|html') { // Escape HTML
													tmp_marker_val = _class.escape_html(tmp_marker_val);
													if(debug) {
														console.log('Marker HTML-Escape: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|css') { // Escape CSS
													tmp_marker_val = _class.escape_css(tmp_marker_val);
													if(debug) {
														console.log('Marker CSS-Escape: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else if(escaping == '|nl2br') { // Format NL2BR
													tmp_marker_val = _class.nl2br(tmp_marker_val);
													if(debug) {
														console.log('Marker NL2BR-Reflow: ' + tmp_marker_id + ' :: ' + tmp_marker_key + ' #' + j + ' ' + escaping + ' @ ' + tmp_marker_val);
													} //end if
												} else {
													console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Invalid or Undefined Escaping for Marker: ' + escaping + ' - detected in Replacement Key: ' + tmp_marker_id + ' @ ' + tmp_marker_val + ' detected in Template: ^' + '\n' + template.substr(0, 512) + '$(0..512)... #####}');
												} //end if else
												//--
											} //end for
											//--
										} //end if
										//--
									} //end if else
									//--
								} //end if
								//--
								template = _class.stringReplaceAll(tmp_marker_id, tmp_marker_val, template);
								//--
							} //end if
							//--
						} //end if
					} //end if
					//--
				} //end for
				//--
			} //end if
			//--
			marker = null;
			markers = null;
			//-- replace SPACE TAB R N
			if(template.indexOf('[%%%%|') >= 0) { // indexOf() :: if not found returns -1
				template = _class.stringReplaceAll('[%%%%|R%%%%]', '\r', template);
				template = _class.stringReplaceAll('[%%%%|N%%%%]', '\n', template);
				template = _class.stringReplaceAll('[%%%%|T%%%%]', '\t', template);
				template = _class.stringReplaceAll('[%%%%|SPACE%%%%]', ' ', template);
			} //end if
			//--
			if(template.indexOf('[####') >= 0) { // indexOf() :: if not found returns -1
				//--
				var undef_markers = _class.stringRegexMatchAll(template, regexp);
			//	if(debug) {
			//		console.log(undef_markers);
			//	} //end if
				//--
				var undef_log = '';
				for(var i=0; i<undef_markers.length; i++) {
					var undef_marker = undef_markers[i]; // expects array
					var tmp_undef_marker_id = undef_marker[0] ? String(undef_marker[0]) : ''; // [####THE-MARKER|escapings...####]
					undef_log += tmp_undef_marker_id + '\n';
				} //end for
				console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Markers detected in Template: ^' + '\n' + undef_log + '\n' + template.substr(0, 512) + '$(0..512)... #####}');
				//--
				undef_log = null;
				undef_marker = null;
				undef_markers = null;
				//--
			} //end if
			//--
			if(template.indexOf('[%%%%') >= 0) { // indexOf() :: if not found returns -1
				console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Marker Syntax detected in Template: ^' + '\n' + template.substr(0, 512) + '$(0..512)... #####}');
			} //end if
			if(template.indexOf('[@@@@') >= 0) { // indexOf() :: if not found returns -1
				console.error('WARNING: SmartJS/Core@renderMarkersTpl: {#### Undefined Marker Sub-Templates detected in Template: ^' + '\n' + template.substr(0, 512) + '$(0..512)... #####}');
			} //end if
			//--
		} //end if else
		//--
	} else {
		//--
		console.error('ERROR: SmartJS/Core@renderMarkersTpl: {#### Invalid Markers-Template Arguments ####}');
		template = '';
		//--
	} //end if
	//--
	return String(template); // fix to return empty string instead of null [OK]
	//--
} //END FUNCTION


/**
 * Sort a stack (array / object / property) using String Sort algorithm
 *
 * @method textSort
 * @static
 * @param 	{Mixed} 	property 		The stack to be sorted
 * @return 	{Mixed} 					The sorted stack
 */
this.textSort = function(property) {
	//--
	return function(a, b) {
		//--
		if(a[property] == null) {
				a[property] = '';
		} //end if
		if(b[property] == null) {
				b[property] = '';
		} //end if
		//--
		try {
			var comparer = a[property].localeCompare(b[property]); // a better compare
			if(comparer < 0) {
					comparer = -1;
			} //end if
			if(comparer > 0) {
					comparer = 1;
			} //end if
		} catch(e) {
			comparer = (a[property] < b[property]) ? -1 : (a[property] > b[property]) ? 1 : 0;
		} //end try catch
		//--
		return comparer; // Mixed
		//--
	} //end function
	//--
} //END FUNCTION


/**
 * Sort a stack (array / object / property) using Numeric Sort algorithm
 *
 * @method numericSort
 * @static
 * @param 	{Mixed} 	property 		The stack to be sorted
 * @return 	{Mixed} 					The sorted stack
 */
this.numericSort = function(property) {
	//--
	return function(a, b) {
		//--
		if(a[property].toString() == '') {
				a[property] = 0;
		} //end if
		if(b[property].toString() == '') {
				b[property] = 0;
		} //end if
		//--
		a[property] = parseFloat(a[property]); // parse as number
		b[property] = parseFloat(b[property]); // parse as number
		//--
		if(a[property] > b[property]) {
			return 1;
		} //end if
		//--
		if(a[property] < b[property]) {
			return -1;
		} //end if
		//--
		return 0;
		//--
	} //end function
	//--
} //END FUNCTION


/**
 * Format a date object into a string value.
 *
 * Hint: The format can be combinations of the following:
 * d  - day of month (no leading zero) ;
 * dd - day of month (two digit) ;
 * o  - day of year (no leading zeros) ;
 * oo - day of year (three digit) ;
 * D  - day name short ;
 * DD - day name long ;
 * m  - month of year (no leading zero) ;
 * mm - month of year (two digit) ;
 * M  - month name short ;
 * MM - month name long ;
 * y  - year (two digit) ;
 * yy - year (four digit) ;
 * @ - Unix timestamp (ms since 01/01/1970) ;
 * ! - Windows ticks (100ns since 01/01/0001) ;
 * "..." - literal text ;
 * '' - single quote ;
 *
 * @method formatDate
 * @static
 * @param 	{String} 	format 			The desired format of the date
 * @param 	{Date} 		date 			The date value to format, from Date() object
 * @param 	{Object} 	settings 		Attributes include: dayNamesShort string[7] - abbreviated names of the days from Sunday (optional) ; dayNames string[7] - names of the days from Sunday (optional) ; monthNamesShort string[12] - abbreviated names of the months (optional) ; monthNames string[12] - names of the months (optional)
 * @return 	{String} 					The date in the above format
 */
this.formatDate = function(format, date, settings) { // This function was taken from (c) jQueryUI/v1.12.0/2016-07-30
	//--
	if(!date) {
		return '';
	} //end if
	//--
	var defaultSettings = {
		monthNames: 		['January','February','March','April','May','June', 'July','August','September','October','November','December' ], // Names of months for drop-down and formatting
		monthNamesShort: 	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ], // For formatting
		dayNames: 			['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ], // For formatting
		dayNamesShort: 		['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ] // For formatting
	};
	//--
	var iFormat,
		//--
		dayNamesShort = (settings ? settings.dayNamesShort : null) || defaultSettings.dayNamesShort,
		dayNames = (settings ? settings.dayNames : null) || defaultSettings.dayNames,
		monthNamesShort = (settings ? settings.monthNamesShort : null) || defaultSettings.monthNamesShort,
		monthNames = (settings ? settings.monthNames : null) || defaultSettings.monthNames,
		//-- ticks to 1970
		_ticksTo1970 = (((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 10000000),
		//-- Check whether a format character is doubled
		lookAhead = function(match) {
			var matches = (iFormat + 1 < format.length && format.charAt( iFormat + 1 ) === match);
			if(matches) {
				iFormat++;
			} //end if
			return matches;
		}, //end function
		//-- Format a number, with leading zero if necessary
		formatNumber = function(match, value, len) {
			var num = String(value);
			if(lookAhead(match)) {
				while(num.length < len) {
					num = '0' + num;
				} //end while
			} //end if
			return num;
		}, //end function
		//-- Format a name, short or long as requested
		formatName = function(match, value, shortNames, longNames) {
			return (lookAhead( match ) ? longNames[ value ] : shortNames[ value ]);
		}, //end function
		//--
		output = '',
		literal = false;
		//--
	//--
	if(date) {
		//--
		for(iFormat=0; iFormat<format.length; iFormat++) {
			//--
			if(literal) {
				//--
				if(format.charAt(iFormat) === "'" && !lookAhead("'")) {
					literal = false;
				} else {
					output += format.charAt(iFormat);
				} //end if else
				//--
			} else {
				//--
				switch(format.charAt(iFormat)) {
					case 'd':
						output += formatNumber('d', date.getDate(), 2);
						break;
					case 'D':
						output += formatName('D', date.getDay(), dayNamesShort, dayNames);
						break;
					case 'o':
						output += formatNumber('o', Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0 ).getTime()) / 86400000), 3);
						break;
					case 'm':
						output += formatNumber('m', date.getMonth()+1, 2);
						break;
					case 'M':
						output += formatName('M', date.getMonth(), monthNamesShort, monthNames);
						break;
					case 'y':
						output += (lookAhead( 'y' ) ? date.getFullYear() : (date.getFullYear() % 100 < 10 ? '0' : '') + date.getFullYear() % 100);
						break;
					case '@':
						output += date.getTime();
						break;
					case '!':
						output += date.getTime() * 10000 + _ticksTo1970;
						break;
					case "'":
						if(lookAhead("'")) {
							output += "'";
						} else {
							literal = true;
						} //end if else
						break;
					default:
						output += format.charAt(iFormat);
				} //end switch
				//--
			} //end if else
			//--
		} //end for
		//--
	} //end if
	//--
	return String(output);
	//--
} //END FUNCTION


/**
 * Determine a date by a Date object or Expression
 *
 * Hint: Valid date objects or expressions:
 * new Date(1937, 1 - 1, 1) 	:: a date in the past, as object ;
 * '-1y -1m -1d' 				:: a date in the past as relative expression to the defaultDate ;
 * new Date(2037, 12 - 1, 31) 	:: a date in the future as object ;
 * '1y 1m 1d' 					:: a date in the future as relative expression to the defaultDate ;
 *
 * @method determineDate
 * @static
 * @param 	{Mixed} 	date 				The Date object or date relative expression to the defaultDate
 * @param 	{Mixed} 	defaultDate 		*Optional* null (for today) or a Date object / timestamp as default (selected) date to be used for relative expressions
 * @return 	{Mixed} 						A Date object or null if fails to validate expression
 */
this.determineDate = function(date, defaultDate) { // This function was taken from (c) jQueryUI/v1.12.0/2016-07-30
	//--
	if((typeof defaultDate == 'undefined') || (defaultDate == 'undefined') || (defaultDate == '') || (defaultDate == null)) {
		defaultDate = null; // fix by unixman
	} //end if
	//--
	var _daylightSavingAdjust = function(date) {
		if(!date) {
			return null;
		} //end if
		date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
		return date;
	} //end function
	//--
	var offsetNumeric = function(offset) {
		var date = new Date();
		date.setDate(date.getDate() + offset);
		return date;
	};
	//--
	var offsetString = function(offset) {
		var date = null;
		//if(offset.toLowerCase().match(/^c/)) {
		if(offset) { // fix by unixman
			date = defaultDate;
		} //end if
		if(date == null) {
			date = new Date();
		} //end if
		var year = date.getFullYear(),
			month = date.getMonth(),
			day = date.getDate();
		var pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
			matches = pattern.exec(offset);
		while(matches) {
			switch(matches[2] || "d") {
				case "d":
				case "D":
					day += parseInt(matches[1], 10);
					break;
				case "w":
				case "W":
					day += parseInt(matches[1], 10) * 7;
					break;
				case "m":
				case "M":
					month += parseInt(matches[1], 10);
					day = Math.min(day, new Date(year, month+1, 0).getDate()); // 2nd param is get days in month
					break;
				case "y":
				case "Y":
					year += parseInt(matches[1], 10);
					day = Math.min(day, new Date(year, month+1, 0).getDate()); // 2nd param is get days in month
					break;
			} //end switch
			matches = pattern.exec(offset);
		} //end while
		//--
		return new Date(year, month, day);
		//--
	};
	//--
	var newDate = (date == null || date === '' ? defaultDate : (typeof date === 'string' ? offsetString(date) : (typeof date === 'number' ? (!_class.isFiniteNumber(date) ? defaultDate : offsetNumeric(date)) : new Date(date.getTime()))));
	newDate = (newDate && newDate.toString() === 'Invalid Date' ? defaultDate : newDate);
	if(newDate) {
		newDate.setHours(0);
		newDate.setMinutes(0);
		newDate.setSeconds(0);
		newDate.setMilliseconds(0);
	} //end if
	//--
	return _daylightSavingAdjust(newDate);
	//--
} //END FUNCTION


} //END CLASS

//==================================================================
//==================================================================

// #END

// ############### date_utils.js
// [LIB - Smart.Framework / JS / DateUtils]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: -

/*
This code is released under the BSD License. Copyright (c) unix-world.org
This file contains portions of code from:
	- https://github.com/joshduck/simple-day # A simple library for working with calendar days (YYYY-MM-DD) as plain old JavaScript objects.
	- https://www.npmjs.com/package/date-offset @ http://howardhinnant.github.io/date_algorithms.html # A simple library for converting Gregorian dates to an integer offset.
*/

//==================================================================
//==================================================================

//================== [NO:evcode]

/**
* CLASS :: Date Utils
*
* @class SmartJS_DateUtils
* @static
*
* @module Smart.Framework/JS/Date
*/
var SmartJS_DateUtils = new function() { // START CLASS :: v.20190117

// :: static


/**
 * Create a Safe Date Object
 *
 * @method createSafeDate
 * @static
 * @param 	{Integer} 	year 	The Raw Year: YYYY
 * @param 	{Integer} 	month 	The Raw Month: 1..12 ; if wrong will fix ahead or behind
 * @param 	{Integer} 	day 	The Raw Day: 1..31 ; if wrong will fix ahead or behind
 * @return 	{Object} 			Normalized Date Object as: { year: YYYY, month: 1..12, day: 1..31 }
 */
this.createSafeDate = function(year, month, day) {
	//--
	return normalizeAndClone({
		year: year,
		month: month,
		day: day
	});
	//--
} //END FUNCTION


/**
 * Normalize a Date Object
 *
 * @method standardizeDate
 * @static
 * @param 	{Object} 	date 	The instanceof Date() or the Raw Date Object that need to be safe fixed as { year: YYYY, month: 1..12, day: 1..31 }
 * @return 	{Object} 			Normalized Date Object as: { year: YYYY, month: 1..12, day: 1..31 }
 */
this.standardizeDate = function(date) {
	//--
	if(date instanceof Date) {
		var d = date;
		date = null;
		date = {
			year:  d.getFullYear(),
			month: d.getMonth()+1,
			day:   d.getDate()
		};
		d = null;
	} //end if
	//--
	return normalizeAndClone(date);
	//--
} //END FUNCTION


/**
 * ISO a Date Object
 *
 * @method getIsoDate
 * @static
 * @param 	{Object} 	date 	The Raw Date Object as { year: YYYY, month: 1..12, day: 1..31 }
 * @return 	{String} 			Normalized Date String as: YYYY-MM-DD
 */
this.getIsoDate = function(date) {
	//--
	if(date instanceof Date) {
		var d = date;
		date = null;
		date = {
			year:  d.getFullYear(),
			month: d.getMonth()+1,
			day:   d.getDate()
		};
		d = null;
	} //end if
	//--
	date = normalizeAndClone(date);
	//--
	var y = String(date.year);
	var m = String(addLeadingZero(date.month));
	var d = String(addLeadingZero(date.day));
	//--
	return String(y + '-' + m + '-' + d);
	//--
} //END FUNCTION


/**
 * Calculate Days Offset between two dates
 *
 * @method calculateDaysOffset
 * @static
 * @param 	{Object} 	sdate1 	Normalized Date #1 Object as: { year: YYYY, month: MM, day: DD }
 * @param 	{Object} 	sdate2 	Normalized Date #2 Object as: { year: YYYY, month: MM, day: DD }
 * @return 	{Integer} 			The Date Offset in seconds between sdate1 and sdate2 as: sdate2 - sdate1
 */
this.calculateDaysOffset = function(sdate1, sdate2) {
	//--
	var ofs1 = toOffset(sdate1.year, sdate1.month, sdate1.day);
	var ofs2 = toOffset(sdate2.year, sdate2.month, sdate2.day);
	//--
	return ofs2 - ofs1;
	//--
} //END FUNCTION


/**
 * Calculate Months Offset between two dates
 *
 * @method calculateMonthsOffset
 * @static
 * @param 	{Object} 	sdate1 	Normalized Date #1 Object as: { year: YYYY, month: MM, day: DD }
 * @param 	{Object} 	sdate2 	Normalized Date #2 Object as: { year: YYYY, month: MM, day: DD }
 * @return 	{Integer} 			The Date Offset in seconds between sdate1 and sdate2 as: sdate2 - sdate1
 */
this.calculateMonthsOffset = function(sdate1, sdate2) {
	//--
	var ofs = ((sdate2.year - sdate1.year) * 12) + (sdate2.month - sdate1.month);
	//--
	return ofs;
	//--
} //END FUNCTION


/**
 * Add Years to a Date Object
 *
 * @method addYears
 * @static
 * @param 	{Object} 	date 	The Raw Date Object as { year: YYYY, month: 1..12, day: 1..31 }
 * @param 	{Integer} 	years 	The number of Years to add or substract
 * @return 	{Object} 			Normalized Date Object as: { year: YYYY, month: MM, day: DD }
 */
this.addYears = function(date, years) {
	//--
	var sd = normalizeAndClone(date);
	sd.year += years;
	sd = clipDay(sd);
	//--
	return sd;
	//--
} //END FUNCTION


/**
 * Add Months to a Date Object
 *
 * @method addMonths
 * @static
 * @param 	{Object} 	date 	The Raw Date Object as { year: YYYY, month: 1..12, day: 1..31 }
 * @param 	{Integer} 	months 	The number Months to add or substract
 * @return 	{Object} 			Normalized Date Object as: { year: YYYY, month: MM, day: DD }
 */
this.addMonths = function(date, months) {
	//--
	var sd = normalizeAndClone(date);
	sd.month += months;
	sd = wrapMonth(sd);
	sd = clipDay(sd);
	//--
	return sd;
	//--
} //END FUNCTION


/**
 * Add Days to a Date Object
 *
 * @method addDays
 * @static
 * @param 	{Object} 	date 	The Raw Date Object as { year: YYYY, month: 1..12, day: 1..31 }
 * @param 	{Integer} 	days 	The number Days to add or substract
 * @return 	{Object} 			Normalized Date Object as: { year: YYYY, month: MM, day: DD }
 */
this.addDays = function(date, days) {
	//--
	var normalized = normalizeAndClone(date);
	var offset = toOffset(normalized.year, normalized.month, normalized.day);
	//--
	return toDate(offset + days);
	//--
} //END FUNCTION


/**
 * Get the Number Of Days in a specific Month of the given Year
 *
 * @method daysInMonth
 * @static
 * @param 	{Integer} 	year 	The Year to be tested
 * @param 	{Integer} 	month 	The Month to be tested
 * @return 	{Integer} 			the Number of Days in the tested month as: 28, 29, 30 or 31
 */
this.daysInMonth = function(year, month) {
	//--
	return inMonthDays(year, month);
	//--
} //END FUNCTION


/**
 * Test if the given Year is a Leap Year or not
 *
 * @method isLeapYear
 * @static
 * @param 	{Integer} 	year 	The Year to be tested
 * @return 	{Boolean} 			TRUE if the Year is Leap or FALSE if is Not Leap
 */
this.isLeapYear = function(year) {
	//--
	return isYearLeap(year);
	//--
} //END FUNCTION


//##### PRIVATES


// add leading zero: d_or_m is Integer
var addLeadingZero = function(d_or_m) {
	//--
	if(d_or_m < 1) {
		d_or_m = 1;
	} //end if
	//--
	if(d_or_m < 10) {
		d_or_m = '0' + String(d_or_m);
	} //end if
	//--
	return String(d_or_m);
	//--
} //END FUNCTION

// normalize a date
var normalizeAndClone = function(date) {
	//--
	var yearOffset = yearOffsetForMonth(date.month);
	var year = date.year + yearOffset;
	var month = date.month - yearOffset * 12;
	//--
	return toDate(toOffset(year, month, date.day));
	//--
} //END FUNCTION


// wraps a month
var wrapMonth = function(date) {
	//--
	var yearOffset = yearOffsetForMonth(date.month);
	date.year += yearOffset;
	date.month -= yearOffset * 12;
	//--
	return date;
	//--
} //END FUNCTION


// clips a day
var clipDay = function(date) {
	//--
	date.day = Math.min(date.day, inMonthDays(date.year, date.month));
	//--
	return date;
	//--
} //END FUNCTION


// get the Year offset for a specific Month
var yearOffsetForMonth = function(month) {
	//--
	var ofs = 0;
	if(month > 12) {
		ofs = Math.ceil(month / 12) - 1;
	} else if(month < 1) {
		ofs = Math.floor((month - 1) / 12);
	} //end if else
	//--
	return ofs;
	//--
} //END FUNCTION


// Get the Number Of Days in a specific Month of the given Year
var inMonthDays = function(year, month) {
	//--
	var d = DAYS_IN_MONTH[month - 1];
	if(month === 2 && isYearLeap(year)) {
		d = 29;
	} //end if
	//--
	return d;
	//--
} //END FUNCTION
var DAYS_IN_MONTH = [
	31,
	28,
	31,
	30,
	31,
	30,
	31,
	31,
	30,
	31,
	30,
	31,
];


// Test if the given Year is a Leap Year or not
var isYearLeap = function(year) {
	//--
	var leap = true;
	if(year % 4 !== 0) {
		leap = false;
	} else if(year % 400 == 0) {
		leap = true;
	} else if(year % 100 == 0) {
		leap = false;
	} //end if else
	//--
	return leap;
	//--
} //END FUNCTION


// date-offset: calculate Y,M,D to Date
var toDate = function(z) {
	//--
	z += 719468;
	//--
	var era = ((z >= 0 ? z : z - 146096) / 146097) | 0;
	var doe = z - era * 146097;                                                // [0, 146096]
	var yoe = Math.floor((doe - Math.floor(doe / 1460) + Math.floor(doe / 36524) - Math.floor(doe / 146096)) / 365);   // [0, 399]
	var y = yoe + era * 400;
	var doy = doe - (365 * yoe + Math.floor(yoe / 4) - Math.floor(yoe / 100)); // [0, 365]
	var mp = Math.floor((5 * doy + 2) / 153);                                  // [0, 11]
	var d = doy - Math.floor((153 * mp + 2) / 5) + 1;                          // [1, 31]
	var m = mp + (mp < 10 ? 3 : -9);                                           // [1, 12]
	//--
	return {
		year: y + (m <= 2),
		month: m,
		day: d
	};
	//--
} //END FUNCTION


// date-offset: calculate Y,M,D to Offset
var toOffset = function(y, m, d) {
	//--
	y -= m <= 2;
	//--
	var era = ((y >= 0 ? y : y - 399) / 400) | 0;
	var yoe = y - era * 400;                                                   // [0, 399]
	var doy = Math.floor((153 * (m + (m > 2 ? -3 : 9)) + 2) / 5) + d - 1;      // [0, 365]
	var doe = yoe * 365 + Math.floor(yoe / 4) - Math.floor(yoe / 100) + doy;   // [0, 146096]
	//--
	return era * 146097 + doe - 719468;
	//--
} //END FUNCTION


} //END CLASS

//==================================================================
//==================================================================

/* Tests ...
var d = new Date();
console.log(JSON.stringify(d, null, 2));
var dz  = SmartJS_DateUtils.standardizeDate(d);
console.log(JSON.stringify(dz, null, 2));
var ds  = SmartJS_DateUtils.standardizeDate({ year: d.getFullYear(), month: d.getMonth()+1, day: d.getDate() });
console.log(JSON.stringify(ds, null, 2));
var iso = SmartJS_DateUtils.getIsoDate(ds);
console.log(iso);
var d1 = SmartJS_DateUtils.createSafeDate(d.getFullYear(), d.getMonth()+1, d.getDate());
console.log(JSON.stringify(d1, null, 2));
var d2 = SmartJS_DateUtils.createSafeDate(d.getFullYear(), (d.getMonth()+1)+3, d.getDate());
console.log(JSON.stringify(d2, null, 2));
var o = SmartJS_DateUtils.calculateDaysOffset(d1, d2);
console.log(o);
var o = SmartJS_DateUtils.calculateDaysOffset(d2, d1);
console.log(o);
var m = SmartJS_DateUtils.calculateMonthsOffset(d1, d2);
console.log(m);
var m = SmartJS_DateUtils.calculateMonthsOffset(d2, d1);
console.log(m);
var a1 = SmartJS_DateUtils.addYears(ds, 1);
console.log(JSON.stringify(a1, null, 2));
var a2 = SmartJS_DateUtils.addMonths(ds, 12);
console.log(JSON.stringify(a2, null, 2));
var a3 = SmartJS_DateUtils.addDays(ds, 365);
console.log(JSON.stringify(a3, null, 2));
*/

// #END

// ############### arch_utils.js

// [LIB - Smart.Framework / JS / LZS Archiver]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: SmartJS_CoreUtils

//==================================================================
//==================================================================

//================== [NO:evcode]

// based on LZString v.1.3.6 (a free LZ based compression algorithm)
// this is intended for on-the-fly archive/unarchive not for storing (where ZLib is a better option)
// it compatible with SmartFramework/PHP/SmartArchiverLZS
// License: BSD
// (c) 2013-2019 iradu@unix-world.org : optimizations, fixes, unicode safe
// Original work by (c) 2013 Pieroxy under the WTFPL License v2

/**
* CLASS :: LZS Archiver / Unarchiver
*
* @class SmartJS_Archiver_LZS
* @static
*
* @module Smart.Framework/JS/Archivers
*/
var SmartJS_Archiver_LZS = new function() { // START CLASS :: v.20190115.r2

// :: static

var _class = this; // self referencing

// lz priv props
var _f = String.fromCharCode;

// b64 priv props
var _keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

/**
 * Compress a string to LZS + Base64
 *
 * @method compressToBase64
 * @static
 * @param {String} input The original string to be compressed
 * @return {String} The compressed string LZS + Base64
 */
this.compressToBase64 = function(input) {
	//--
	if((typeof input == 'undefined') || (input == '') || (input == null)) {
		return '';
	} //end if
	//--
	input = String(input);
	//--
	input = _class.compressRawLZS(input); // make it unicode safe
	//--
	var i = 0;
	var output = '';
	var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
	//--
	while(i < (input.length * 2)) {
		//--
		if(i%2 == 0) {
			//--
			chr1 = input.charCodeAt(i/2) >> 8;
			chr2 = input.charCodeAt(i/2) & 255;
			//--
			if(i/2+1 < input.length) {
				chr3 = input.charCodeAt(i/2 + 1) >> 8;
			} else {
				chr3 = NaN;
			} //end if else
		} else {
			//--
			chr1 = input.charCodeAt((i-1) / 2) & 255;
			//--
			if((i+1)/2 < input.length) {
				chr2 = input.charCodeAt((i+1) / 2) >> 8;
				chr3 = input.charCodeAt((i+1) / 2) & 255;
			} else {
				chr2 = chr3 = NaN;
			} //end if else
			//--
		} //end if else
		//--
		i+=3;
		//--
		enc1 = chr1 >> 2;
		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		enc4 = chr3 & 63;
		//--
		if(isNaN(chr2)) {
			enc3 = enc4 = 64;
		} else if(isNaN(chr3)) {
			enc4 = 64;
		} //end if else
		//--
		output = output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		//--
	} //end while
	//--
	return String(output);
	//--
} //END FUNCTION


/**
 * Decompress from LZS + Base64
 *
 * @method decompressFromBase64
 * @static
 * @param {String} input The LZS + Base64 compressed string
 * @return {String} The uncompressed (original) string
 */
this.decompressFromBase64 = function(input) {
	//--
	if((typeof input == 'undefined') || (input == '') || (input == null)) {
		return '';
	} //end if
	//--
	input = String(input);
	//--
	input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ''); // remove invalid non-b64 chars
	//--
	var f = _f;
	var i = 0, ol = 0;
	var	output = '', output_;
	var chr1, chr2, chr3;
	var enc1, enc2, enc3, enc4;
	//--
	while(i < input.length) {
		//--
		enc1 = _keyStr.indexOf(input.charAt(i++));
		enc2 = _keyStr.indexOf(input.charAt(i++));
		enc3 = _keyStr.indexOf(input.charAt(i++));
		enc4 = _keyStr.indexOf(input.charAt(i++));
		//--
		chr1 = (enc1 << 2) | (enc2 >> 4);
		chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		chr3 = ((enc3 & 3) << 6) | enc4;
		//--
		if((ol % 2) == 0) {
			//--
			output_ = chr1 << 8;
			//--
			if(enc3 != 64) {
				output += f(output_ | chr2);
			} //end if
			if(enc4 != 64) {
				output_ = chr3 << 8;
			} //end if
			//--
		} else {
			//--
			output = output + f(output_ | chr1);
			//--
			if(enc3 != 64) {
				output_ = chr2 << 8;
			} //end if
			if(enc4 != 64) {
				output += f(output_ | chr3);
			} //end if
			//--
		} //end if else
		//--
		ol+=3;
		//--
	} //end while
	//--
	return String(_class.decompressRawLZS(output));
	//--
} //END FUNCTION


this.compressRawLZS = function(uncompressed) {
	//--
	if((typeof uncompressed == 'undefined') || (uncompressed == '') || (uncompressed == null)) {
		return '';
	} //end if
	//--
	uncompressed = String(uncompressed);
	//--
	var arch = SmartJS_CoreUtils.bin2hex(uncompressed).toUpperCase();
	//--
	return String(RawDeflate(String(arch + '#CHECKSUM-SHA1#' + SmartJS_CryptoHash.sha1(arch))));
	//--
} //END FUNCTION


this.decompressRawLZS = function(compressed) {
	//--
	if((typeof compressed == 'undefined') || (compressed == null) || (compressed == '')) {
		return '';
	} //end if
	//--
	compressed = String(compressed);
	//--
	var unarch = String(SmartJS_CoreUtils.stringTrim(RawInflate(String(compressed))));
	var parts = unarch.split('#CHECKSUM-SHA1#');
	unarch = SmartJS_CoreUtils.stringTrim(String(parts[0]));
	var checksum = SmartJS_CoreUtils.stringTrim(String(parts[1]));
	//-- aaa
	if(SmartJS_CryptoHash.sha1(unarch) !== (String(checksum))) {
		console.error('JS-LZS Archiver / Decompress: Checksum Failed'); // do not raise error just alert
		return '';
	} //end if
	//--
	return String(SmartJS_CoreUtils.hex2bin(unarch.toLowerCase()));
	//--
} //END FUNCTION


//=============== PRIVATES


var RawDeflate = function(uncompressed) {
	//--
	if((typeof uncompressed == 'undefined') || (uncompressed == '') || (uncompressed == null)) {
		return '';
	} //end if
	//--
	var f = _f;
	var i, ii, value;
	var	context_dictionary = {},
		context_dictionaryToCreate = {},
		context_c = '',
		context_wc = '',
		context_w = '',
		context_enlargeIn = 2, // compensate for the first entry which should not count
		context_dictSize = 3,
		context_numBits = 2,
		context_data_string = '',
		context_data_val = 0,
		context_data_position = 0;
	//--
	for(ii = 0; ii < uncompressed.length; ii += 1) {
		//--
		context_c = uncompressed.charAt(ii);
		//--
		if(!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
			context_dictionary[context_c] = context_dictSize++;
			context_dictionaryToCreate[context_c] = true;
		} //end if
		//--
		context_wc = context_w + context_c;
		//--
		if(Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
			//--
			context_w = context_wc;
			//--
		} else {
			//--
			if(Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
				//--
				if(context_w.charCodeAt(0) < 256) {
					//--
					for(i=0 ; i<context_numBits ; i++) {
						context_data_val = (context_data_val << 1);
						if(context_data_position == 15) {
							context_data_position = 0;
							context_data_string += f(context_data_val);
							context_data_val = 0;
						} else {
							context_data_position++;
						} //end if else
					} //end for
					//--
					value = context_w.charCodeAt(0);
					//--
					for(i=0 ; i<8 ; i++) {
						context_data_val = (context_data_val << 1) | (value&1);
						if(context_data_position == 15) {
							context_data_position = 0;
							context_data_string += f(context_data_val);
							context_data_val = 0;
						} else {
							context_data_position++;
						} //end if else
						value = value >> 1;
					} //end for
					//--
				} else {
					//--
					value = 1;
					//--
					for(i=0 ; i<context_numBits ; i++) {
						context_data_val = (context_data_val << 1) | value;
						if(context_data_position == 15) {
							context_data_position = 0;
							context_data_string += f(context_data_val);
							context_data_val = 0;
						} else {
							context_data_position++;
						} //end if else
						value = 0;
					} //end for
					//--
					value = context_w.charCodeAt(0);
					//--
					for(i=0 ; i<16 ; i++) {
						//--
						context_data_val = (context_data_val << 1) | (value&1);
						//--
						if(context_data_position == 15) {
							context_data_position = 0;
							context_data_string += f(context_data_val);
							context_data_val = 0;
						} else {
							context_data_position++;
						} //end if else
						//--
						value = value >> 1;
						//--
					} //end for
					//--
				} //end if else
				//--
				context_enlargeIn--;
				//--
				if(context_enlargeIn == 0) {
					context_enlargeIn = Math.pow(2, context_numBits);
					context_numBits++;
				} //end if
				//--
				delete context_dictionaryToCreate[context_w];
				//--
			} else {
				//--
				value = context_dictionary[context_w];
				//--
				for(i=0 ; i<context_numBits ; i++) {
					//--
					context_data_val = (context_data_val << 1) | (value&1);
					//--
					if(context_data_position == 15) {
						context_data_position = 0;
						context_data_string += f(context_data_val);
						context_data_val = 0;
					} else {
						context_data_position++;
					} //end if else
					//--
					value = value >> 1;
					//--
				} //end for
				//--
			} //end if else
			//--
			context_enlargeIn--;
			//--
			if(context_enlargeIn == 0) {
				context_enlargeIn = Math.pow(2, context_numBits);
				context_numBits++;
			} //end if
			//-- Add wc to the dictionary.
			context_dictionary[context_wc] = context_dictSize++;
			context_w = String(context_c);
			//--
		} //end if else
		//--
	} //end for
	//-- output the code for w
	if(context_w !== '') {
		//--
		if(Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
			//--
			if(context_w.charCodeAt(0) < 256) {
				//--
				for(i=0 ; i<context_numBits ; i++) {
					//--
					context_data_val = (context_data_val << 1);
					//--
					if(context_data_position == 15) {
						context_data_position = 0;
						context_data_string += f(context_data_val);
						context_data_val = 0;
					} else {
						context_data_position++;
					} //end if else
					//--
				} //end for
				//--
				value = context_w.charCodeAt(0);
				//--
				for(i=0 ; i<8 ; i++) {
					//--
					context_data_val = (context_data_val << 1) | (value&1);
					//--
					if(context_data_position == 15) {
						context_data_position = 0;
						context_data_string += f(context_data_val);
						context_data_val = 0;
					} else {
						context_data_position++;
					} //end if else
					//--
					value = value >> 1;
					//--
				} //end for
				//--
			} else {
				//--
				value = 1;
				//--
				for(i=0 ; i<context_numBits ; i++) {
					//--
					context_data_val = (context_data_val << 1) | value;
					//--
					if(context_data_position == 15) {
						context_data_position = 0;
						context_data_string += f(context_data_val);
						context_data_val = 0;
					} else {
						context_data_position++;
					} //end if else
					//--
					value = 0;
					//--
				} //end for
				//--
				value = context_w.charCodeAt(0);
				//--
				for(i=0 ; i<16 ; i++) {
					//--
					context_data_val = (context_data_val << 1) | (value&1);
					//--
					if(context_data_position == 15) {
						context_data_position = 0;
						context_data_string += f(context_data_val);
						context_data_val = 0;
					} else {
						context_data_position++;
					} //end if else
					//--
					value = value >> 1;
					//--
				} //end for
				//--
			} //end if else
			//--
			context_enlargeIn--;
			//--
			if(context_enlargeIn == 0) {
				context_enlargeIn = Math.pow(2, context_numBits);
				context_numBits++;
			} //end if
			//--
			delete context_dictionaryToCreate[context_w];
			//--
		} else {
			//--
			value = context_dictionary[context_w];
			//--
			for(i=0 ; i<context_numBits ; i++) {
				//--
				context_data_val = (context_data_val << 1) | (value&1);
				//--
				if(context_data_position == 15) {
					context_data_position = 0;
					context_data_string += f(context_data_val);
					context_data_val = 0;
				} else {
					context_data_position++;
				} //end if else
				//--
				value = value >> 1;
				//--
			} //end for
			//--
		} //end if else
		//--
		context_enlargeIn--;
		//--
		if(context_enlargeIn == 0) {
			context_enlargeIn = Math.pow(2, context_numBits);
			context_numBits++;
		} //end if
		//--
	} //end if else
	//-- mark the end of the stream
	value = 2;
	//--
	for(i=0 ; i<context_numBits ; i++) {
		//--
		context_data_val = (context_data_val << 1) | (value&1);
		//--
		if(context_data_position == 15) {
			context_data_position = 0;
			context_data_string += f(context_data_val);
			context_data_val = 0;
		} else {
			context_data_position++;
		} //end if else
		//--
		value = value >> 1;
		//--
	} //end for
	//-- flush the last char
	while(true) {
		//--
		context_data_val = (context_data_val << 1);
		//--
		if(context_data_position == 15) {
			context_data_string += f(context_data_val);
			break;
		} else {
			context_data_position++;
		} //end if else
		//--
	} //end while
	//--
	return context_data_string;
	//--
} //END FUNCTION


var RawInflate = function(compressed) {
	//--
	if((typeof compressed == 'undefined') || (compressed == null)) {
		return '';
	} //end if
	if(compressed == '') {
		return null; // this is a special case
	} //end if
	//--
	var f = _f;
	var i, w, c;
	var dictionary = [],
		next,
		enlargeIn = 4,
		dictSize = 4,
		numBits = 3,
		entry = '',
		result = '',
		bits, resb, maxpower, power;
	var data = {
		string:compressed,
		val:compressed.charCodeAt(0),
		position:32768,
		index:1
	};
	//--
	for(i=0; i<3; i+=1) {
	  dictionary[i] = i;
	} //end for
	//--
	bits = 0;
	maxpower = Math.pow(2,2);
	power=1;
	//--
	while(power != maxpower) {
		resb = data.val & data.position;
		data.position >>= 1;
		if(data.position == 0) {
			data.position = 32768;
			data.val = data.string.charCodeAt(data.index++);
		} //end if
		bits |= (resb>0 ? 1 : 0) * power;
		power <<= 1;
	} //end while
	//--
	switch(next = bits) {
		case 0:
			//--
			bits = 0;
			maxpower = Math.pow(2,8);
			power = 1;
			//--
			while(power != maxpower) {
				resb = data.val & data.position;
				data.position >>= 1;
				if(data.position == 0) {
					data.position = 32768;
					data.val = data.string.charCodeAt(data.index++);
				} //end if
				bits |= (resb>0 ? 1 : 0) * power;
				power <<= 1;
			} //end while
			//--
			c = f(bits);
			//--
			break;
		case 1:
			//--
			bits = 0;
			maxpower = Math.pow(2,16);
			power = 1;
			//--
			while(power != maxpower) {
				resb = data.val & data.position;
				data.position >>= 1;
				if(data.position == 0) {
					data.position = 32768;
					data.val = data.string.charCodeAt(data.index++);
				} //end if
				bits |= (resb>0 ? 1 : 0) * power;
				power <<= 1;
			} //end while
			//--
			c = f(bits);
			//--
			break;
		case 2:
			//--
			return '';
			//--
	} //end switch
	//--
	dictionary[3] = c;
	w = result = c;
	//--
	while(true) {
		//--
		if(data.index > data.string.length) {
			return '';
		} //end if
		//--
		bits = 0;
		maxpower = Math.pow(2,numBits);
		power = 1;
		//--
		while(power != maxpower) {
			resb = data.val & data.position;
			data.position >>= 1;
			if(data.position == 0) {
				data.position = 32768;
				data.val = data.string.charCodeAt(data.index++);
			} //end if
			bits |= (resb>0 ? 1 : 0) * power;
			power <<= 1;
		} //end while
		//--
		switch(c = bits) {
			case 0:
				//--
				bits = 0;
				maxpower = Math.pow(2,8);
				power = 1;
				//--
				while(power != maxpower) {
					resb = data.val & data.position;
					data.position >>= 1;
					if(data.position == 0) {
						data.position = 32768;
						data.val = data.string.charCodeAt(data.index++);
					} //end if
					bits |= (resb>0 ? 1 : 0) * power;
					power <<= 1;
				} //end while
				//--
				dictionary[dictSize++] = f(bits);
				c = dictSize-1;
				enlargeIn--;
				//--
				break;
			case 1:
				//--
				bits = 0;
				maxpower = Math.pow(2,16);
				power = 1;
				//--
				while(power != maxpower) {
					resb = data.val & data.position;
					data.position >>= 1;
					if(data.position == 0) {
						data.position = 32768;
						data.val = data.string.charCodeAt(data.index++);
					} //end if
					bits |= (resb>0 ? 1 : 0) * power;
					power <<= 1;
				} //end while
				//--
				dictionary[dictSize++] = f(bits);
				c = dictSize-1;
				enlargeIn--;
				//--
				break;
			case 2:
				//--
				return result;
				//--
		} //end switch
		//--
		if(enlargeIn == 0) {
			enlargeIn = Math.pow(2, numBits);
			numBits++;
		} //end if
		//--
		if(dictionary[c]) {
			entry = dictionary[c];
		} else {
			if(c === dictSize) {
				entry = w + w.charAt(0);
			} else {
				return null;
			} //end if else
		} //end if else
		//--
		result += entry;
		//-- add w+entry[0] to the dictionary
		dictionary[dictSize++] = w + entry.charAt(0);
		enlargeIn--;
		//--
		w = entry;
		//--
		if(enlargeIn == 0) {
			enlargeIn = Math.pow(2, numBits);
			numBits++;
		} //end if
		//--
	} //end while
	//--
  } //END FUNCTION

} //END CLASS

//==================================================================
//==================================================================

//#END

// ############### crypt_utils.js

// [LIB - Smart.Framework / JS / Crypto Utils]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: SmartJS_CoreUtils
// CONTAINS: Base64 encode/decode ; CryptoHash: CRC32B, MD5, SHA1, SHA512 ; Blowfish encrypt/decrypt

//==================================================================
// v.20190115
//==================================================================

//================== [NO:evcode]

//=======================================
// CLASS :: Crypto Test
//=======================================

/*
This code is released under the BSD License. Copyright (c) unix-world.org
This file contains portions of code from:
	CRC32B: https://github.com/fastest963/js-crc32, Copyright (c) James Hartig
	MD5, SHA1, SHA512, Base64.Encode/Decode: https://github.com/hirak/phpjs, Copyright (c) Kevin van Zonneveld and Contributors (http://phpjs.org/authors)
	Blowfish.Encrypt/Decrypt: https://github.com/agorlov/javascript-blowfish, Copyright (c) Alexandr Gorlov
*/

var SmartJS_TestCrypto = new function() { // START CLASS

// :: static

this.unicodeString = function() {
	return 'Unicode String:		şŞţŢăĂîÎâÂșȘțȚ (05-09#';
} //END FUNCTION

this.testBase64 = function() {
	return 'VW5pY29kZSBTdHJpbmc6CQnFn8WexaPFosSDxILDrsOOw6LDgsiZyJjIm8iaICgwNS0wOSM=';
} //END FUNCTION

this.testCRC32B = function() {
	return '055757b8';
} //END FUNCTION

this.testMD5 = function() {
	return '3d6efbef789d8043a3926541feb9a18c';
} //END FUNCTION

this.testSHA1 = function() {
	return '5a0a127dfbdb83491b9fbc0ee39dc947066c426c';
} //END FUNCTION

this.testSHA512 = function() {
	return 'b51b7b530f2b72233c55fe0fd3c3c44bbabe4db6e826afc58b48668a52ea79fe5fbd27253b98aedbcee401dbb8aa00a97056dd088a56b44ba0a3320df2db5c1e';
} //END FUNCTION

this.raiseError = function(err) {
	console.error('ERROR: SmartJS/Crypto: The browser FAILED with: ' + err);
	throw 'ERROR: SmartJS/Crypto: The browser FAILED with: ' + err;
} //END FUNCTION

} //END CLASS

//=======================================
//=======================================

var SmartJS_TestBase64 = false;

/**
* CLASS :: Base64 Encode / Decode
*
* @class SmartJS_Base64
* @static
*
* @module Smart.Framework/JS/Crypto
*/
var SmartJS_Base64 = new function() { // START CLASS

// :: static

//== PRIVATES BASE64

// PRIVATE :: BASE64 :: encode
var base64_core_enc = function(input, is_binary) {
	//-- make it unicode
	if(is_binary !== true) { // binary content must not be re-encoded to UTF-8
		input = SmartJS_CoreUtils.utf8_encode(input);
	} //end if
	//-- encoder
	var keyStr = base64_key();
	var output = '';
	var chr1, chr2, chr3;
	var enc1, enc2, enc3, enc4;
	var i = 0;
	//--
	do {
		//--
		chr1 = input.charCodeAt(i++);
		chr2 = input.charCodeAt(i++);
		chr3 = input.charCodeAt(i++);
		//--
		enc1 = chr1 >> 2;
		enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
		enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
		enc4 = chr3 & 63;
		//--
		if (isNaN(chr2)) {
			enc3 = enc4 = 64;
		} else if (isNaN(chr3)) {
			enc4 = 64;
		} //end if
		//--
		output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
		keyStr.charAt(enc3) + keyStr.charAt(enc4);
		//--
	} while (i < input.length);
	//--
	return String(output);
	//--
} //END FUNCTION

// PRIVATE :: BASE64 :: decode
var base64_core_dec = function(input, is_binary) {
	//-- decoder
	var keyStr = base64_key();
	var output = '';
	var chr1, chr2, chr3;
	var enc1, enc2, enc3, enc4;
	var i = 0;
	//--
	input = input.replace(/[^A-Za-z0-9\+\/\=]/g, ""); // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
	//--
	do {
		//--
		enc1 = keyStr.indexOf(input.charAt(i++));
		enc2 = keyStr.indexOf(input.charAt(i++));
		enc3 = keyStr.indexOf(input.charAt(i++));
		enc4 = keyStr.indexOf(input.charAt(i++));
		//--
		chr1 = (enc1 << 2) | (enc2 >> 4);
		chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
		chr3 = ((enc3 & 3) << 6) | enc4;
		//--
		output = output + String.fromCharCode(chr1);
		//--
		if (enc3 != 64) {
			output = output + String.fromCharCode(chr2);
		} //end if
		//--
		if (enc4 != 64) {
			output = output + String.fromCharCode(chr3);
		} //end if
		//--
	} while (i < input.length);
	//--
	if(is_binary !== true) { // binary content must not be re-encoded to UTF-8
		output = SmartJS_CoreUtils.utf8_decode(output); // make it back unicode safe
	} //end if
	//--
	return String(output);
	//--
} //END FUNCTION

// PRIVATE :: BASE64 :: key
var base64_key = function() {
	//--
	return 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
	//--
} //END FUNCTION

//== PUBLIC BASE64

/**
 * Encode a string to Base64
 *
 * @method encode
 * @static
 * @param {String} s The plain string (to be encoded)
 * @param {Boolean} bin Set to TRUE if the string is binary to avoid re-encode to UTF-8
 * @return {String} the Base64 encoded string
 */
this.encode = function(s, bin) {
	//--
	if(SmartJS_TestBase64 !== true) {
		if(base64_core_enc(SmartJS_TestCrypto.unicodeString()) == SmartJS_TestCrypto.testBase64()) {
			SmartJS_TestBase64 = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('Base64/Encode');
			return '';
		} //end if else
	} //end if
	//--
	return String(base64_core_enc(s, bin));
	//--
} //END FUNCTION

/**
 * Decode a string from Base64
 *
 * @method decode
 * @static
 * @param {String} s The B64 encoded string
 * @param {Boolean} bin Set to TRUE if the string is binary to avoid re-encode to UTF-8
 * @return {String} the plain (B64 decoded) string
 */
this.decode = function(s, bin) {
	//--
	if(SmartJS_TestBase64 !== true) {
		if(base64_core_dec(SmartJS_TestCrypto.testBase64()) == SmartJS_TestCrypto.unicodeString()) {
			SmartJS_TestBase64 = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('Base64/Decode');
			return '';
		} //end if else
	} //end if
	//--
	return String(base64_core_dec(s, bin));
	//--
} //END FUNCTION

} //END CLASS

//=======================================
//=======================================

var SmartJS_TestCRC32B = false;
var SmartJS_TestMD5 = false;
var SmartJS_TestSHA1 = false;
var SmartJS_TestSHA512 = false;

/**
* CLASS :: Hash Crypto: CRC32B / MD5 / SHA1 / SHA512
*
* @class SmartJS_CryptoHash
* @static
*
* @module Smart.Framework/JS/Crypto
*/
var SmartJS_CryptoHash = new function() { // START CLASS

// :: static

//== PRIVATES CRYPTO

// PRIVATE :: CRYPTO :: this function acts as a setting for chrsz
var crypt_chrsz = function() {
	return 8;  // bits per input character. 8 - ASCII; 16 - Unicode (sync with the other functions)
} //END FUNCTION

// PRIVATE :: CRYPTO :: this function acts as a setting for hexcase
var crypt_hexcase = function() {
	return 0;  // hex output format. 0 - lowercase; 1 - uppercase
} //END FUNCTION

// PRIVATE :: CRYPTO :: Add integers, wrapping at 2^32. This uses 16-bit operations internally to work around bugs in some JS interpreters.
var crypt_safe_add = function(x, y) {
	var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	return (msw << 16) | (lsw & 0xFFFF);
} //END FUNCTION

// PRIVATE :: CRYPTO :: Bitwise rotate a 32-bit number to the left.
var crypt_bit_rol = function(num, cnt) {
	return (num << cnt) | (num >>> (32 - cnt));
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert a string to an Array of little-endian words. If chrsz is ASCII, characters >255 have their hi-byte silently ignored.
var crypt_str2binl = function(str) {
	var bin = Array();
	var mask = (1 << crypt_chrsz()) - 1;
	for(var i = 0; i < str.length * crypt_chrsz(); i += crypt_chrsz()) {
		bin[i>>5] |= (str.charCodeAt(i / crypt_chrsz()) & mask) << (i%32);
	} //end for
	return bin;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert an Array of little-endian words to a string
var crypt_binl2str = function(bin) {
	var str = "";
	var mask = (1 << crypt_chrsz()) - 1;
	for(var i = 0; i < bin.length * 32; i += crypt_chrsz()) {
		str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & mask);
	} //end for
	return str;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert an Array of little-endian words to a hex string.
var crypt_binl2hex = function(binarray) {
	var tmp_hexcase = 0 + crypt_hexcase();
	var hex_tab = tmp_hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	var str = "";
	for(var i = 0; i < binarray.length * 4; i++) {
		str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
	} //end for
	return str;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert an 8-bit or 16-bit string to an Array of big-endian words
var crypt_str2binb = function(str) {
	var bin = Array();
	var mask = (1 << crypt_chrsz()) - 1;
	for(var i = 0; i < str.length * crypt_chrsz(); i += crypt_chrsz()) {
		bin[i>>5] |= (str.charCodeAt(i / crypt_chrsz()) & mask) << (32 - crypt_chrsz() - i%32);
	} //end for
	return bin;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert an Array of big-endian words to a string
var crypt_binb2str = function(bin) {
	var str = '';
	var mask = (1 << crypt_chrsz()) - 1;
	for(var i = 0; i < bin.length * 32; i += crypt_chrsz()) {
		str += String.fromCharCode((bin[i>>5] >>> (32 - crypt_chrsz() - i%32)) & mask);
	} //end for
	return str;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert an Array of big-endian words to a hex string.
var crypt_binb2hex = function(binarray) {
	var tmp_hexcase = 0 + crypt_hexcase();
	var hex_tab = tmp_hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
	var str = "";
	for(var i = 0; i < binarray.length * 4; i++) {
		str += hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8+4)) & 0xF) + hex_tab.charAt((binarray[i>>2] >> ((3 - i%4)*8  )) & 0xF);
	} //end for
	return str;
} //END FUNCTION

// PRIVATE :: CRYPTO :: Convert a String to Array.
var crypt_strtoarr = function(string) {
	var l = string.length,
		bytes = new Array(l),
		i = 0;
	for(i=0; i<l; i++) {
		bytes[i] = string.charCodeAt(i);
	} //end for
	return bytes;
} //END FUNCTION

//== PRIVATES CRC32B

/**
 * Returns the CRC32B hash of a string
 *
 * @method crc32b
 * @static
 * @param {String} s The string
 * @return {String} The CRC32B hash of the string
 */
this.crc32b = function(s) {
	//--
	if(SmartJS_TestCRC32B !== true) { // run test
		if(crc32b_hex(SmartJS_TestCrypto.unicodeString()) == SmartJS_TestCrypto.testCRC32B()) {
			SmartJS_TestCRC32B = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('CRC32B/Hash');
			return '';
		} //end if else
	} //end if
	//--
	return String(crc32b_hex(s));
	//--
} //END FUNCTION

var CRC32B_TABLE = null;
var crc32b_init_tbl = function() {
	if(CRC32B_TABLE !== null) {
		return;
	} //end if
	CRC32B_TABLE = new Array(256);
	var i = 0, c = 0, b = 0;
	for(i=0; i<256; i++) {
		c = i;
		b = 8;
		while(b--) {
			c = (c >>> 1) ^ ((c & 1) ? 0xEDB88320 : 0);
		} //end while
		CRC32B_TABLE[i] = c;
	} //end for
} //END FUNCTION

var crc32b_hex = function(s) {
	s = SmartJS_CoreUtils.utf8_encode(s);
	var values = crypt_strtoarr(s),
		crc = -1,
		i = 0,
		l = values.length,
		isObjects = typeof values[0] === 'object',
		id = 0;
	crc32b_init_tbl();
	for(i=0; i<l; i++) {
		id = isObjects ? (values[i].id >>> 0) : values[i];
		crc = CRC32B_TABLE[(crc ^ id) & 0xFF] ^ (crc >>> 8);
	} //end for
	crc = (~crc >>> 0).toString(16); // bitflip then cast to 32-bit unsigned
	crc = String(crc);
	//-- unixman fix (pad with leading zeroes)
	var padding = 8 - (crc.length);
	if(padding > 0) {
		for(i=0; i<padding; i++) {
			crc = '0' + crc;
		} //end for
	} //end if
	//--
	return String(crc);
} //END FUNCTION str

//== PRIVATES MD5

// PRIVATE :: MD5 :: encrypt (hex)
var md5_hex = function(s) {
	//-- make it unicode
	s = SmartJS_CoreUtils.utf8_encode(s);
	//--
	return crypt_binl2hex(md5_core(crypt_str2binl(s), s.length * crypt_chrsz()));
	//--
} //END FUNCTION

// PRIVATE :: MD5 :: basic operation 0 for the md5 algorithm
var md5_cmn = function(q, a, b, x, s, t) {
	return crypt_safe_add(crypt_bit_rol(crypt_safe_add(crypt_safe_add(a, q), crypt_safe_add(x, t)), s),b);
} //END FUNCTION

// PRIVATE :: MD5 :: basic operation 1 for the md5 algorithm
var md5_ff = function(a, b, c, d, x, s, t) {
	return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
} //END FUNCTION

// PRIVATE :: MD5 :: basic operation 2 for the md5 algorithm
var md5_gg = function(a, b, c, d, x, s, t) {
	return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
} //END FUNCTION

// PRIVATE :: MD5 :: basic operation 3 for the md5 algorithm
var md5_hh = function(a, b, c, d, x, s, t) {
	return md5_cmn(b ^ c ^ d, a, b, x, s, t);
} //END FUNCTION

// PRIVATE :: MD5 :: basic operation 4 for the md5 algorithm
var md5_ii = function(a, b, c, d, x, s, t) {
	return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
} //END FUNCTION

// PRIVATE :: MD5 :: core
var md5_core = function(x, len) {
	//-- append padding
	x[len >> 5] |= 0x80 << ((len) % 32);
	x[(((len + 64) >>> 9) << 4) + 14] = len;
	//--
	var a =  1732584193;
	var b = -271733879;
	var c = -1732584194;
	var d =  271733878;
	//--
	for(var i = 0; i < x.length; i += 16) {
		//--
		var olda = a;
		var oldb = b;
		var oldc = c;
		var oldd = d;
		//--
		a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
		d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
		c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
		b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
		a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
		d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
		c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
		b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
		a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
		d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
		c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
		b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
		a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
		d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
		c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
		b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
		//--
		a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
		d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
		c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
		b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
		a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
		d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
		c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
		b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
		a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
		d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
		c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
		b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
		a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
		d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
		c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
		b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
		//--
		a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
		d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
		c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
		b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
		a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
		d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
		c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
		b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
		a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
		d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
		c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
		b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
		a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
		d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
		c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
		b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
		//--
		a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
		d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
		c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
		b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
		a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
		d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
		c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
		b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
		a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
		d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
		c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
		b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
		a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
		d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
		c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
		b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
		//--
		a = crypt_safe_add(a, olda);
		b = crypt_safe_add(b, oldb);
		c = crypt_safe_add(c, oldc);
		d = crypt_safe_add(d, oldd);
		//--
	} //end for
	//--
	return Array(a, b, c, d);
	//--
} //END FUNCTION

//== PUBLIC MD5

/**
 * Returns the MD5 hash of a string
 *
 * @method md5
 * @static
 * @param {String} s The string
 * @return {String} The MD5 hash of the string
 */
this.md5 = function(s) {
	//--
	if(SmartJS_TestMD5 !== true) { // run test
		if(md5_hex(SmartJS_TestCrypto.unicodeString()) == SmartJS_TestCrypto.testMD5()) {
			SmartJS_TestMD5 = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('MD5/Hash');
			return '';
		} //end if else
	} //end if
	//--
	return String(md5_hex(s));
	//--
} //END FUNCTION

//== PRIVATES SHA1

// PRIVATE :: SHA1 :: encrypt (hex)
var sha1_hex = function(s) {
	//-- make it unicode
	s = SmartJS_CoreUtils.utf8_encode(s);
	//--
	return crypt_binb2hex(sha1_core(crypt_str2binb(s),s.length * crypt_chrsz()));
	//--
} //END FUNCTION

// PRIVATE :: SHA1 :: basic operation 0 for the sha1 algorithm
var sha1_ft = function(t, b, c, d) {
	if(t < 20) {
		return (b & c) | ((~b) & d);
	} //end if
	if(t < 40) {
		return b ^ c ^ d;
	} //end if
	if(t < 60) {
		return (b & c) | (b & d) | (c & d);
	} //end if
	return b ^ c ^ d;
} //END FUNCTION

// PRIVATE :: SHA1 :: basic operation 1 for the sha1 algorithm
var sha1_kt = function(t) {
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 : (t < 60) ? -1894007588 : -899497514 ;
} //END FUNCTION

// PRIVATE :: SHA1 :: core
var sha1_core = function(x, len) {
	//-- append padding
	x[len >> 5] |= 0x80 << (24 - len % 32);
	x[((len + 64 >> 9) << 4) + 15] = len;
	//--
	var w = Array(80);
	var a =  1732584193;
	var b = -271733879;
	var c = -1732584194;
	var d =  271733878;
	var e = -1009589776;
	//--
	for(var i = 0; i < x.length; i += 16) {
		//--
		var olda = a;
		var oldb = b;
		var oldc = c;
		var oldd = d;
		var olde = e;
		//--
		for(var j = 0; j < 80; j++) {
			if(j < 16) {
				w[j] = x[i + j];
			} else {
				w[j] = crypt_bit_rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1);
			} //end if else
			//--
			var t = crypt_safe_add(crypt_safe_add(crypt_bit_rol(a, 5), sha1_ft(j, b, c, d)), crypt_safe_add(crypt_safe_add(e, w[j]), sha1_kt(j)));
			//--
			e = d;
			d = c;
			c = crypt_bit_rol(b, 30);
			b = a;
			a = t;
			//--
		} //end for
		//--
		a = crypt_safe_add(a, olda);
		b = crypt_safe_add(b, oldb);
		c = crypt_safe_add(c, oldc);
		d = crypt_safe_add(d, oldd);
		e = crypt_safe_add(e, olde);
	} //end for
	//--
	return Array(a, b, c, d, e);
	//--
} //END FUNCTION

//== PUBLIC SHA1

/**
 * Returns the SHA1 hash of a string
 *
 * @method sha1
 * @static
 * @param {String} s The string
 * @return {String} The SHA1 hash of the string
 */
this.sha1 = function(s) {
	//--
	if(SmartJS_TestSHA1 !== true) { // run test
		if(sha1_hex(SmartJS_TestCrypto.unicodeString()) == SmartJS_TestCrypto.testSHA1()) {
			SmartJS_TestSHA1 = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('SHA1/Hash');
			return '';
		} //end if else
	} //end if
	//--
	return String(sha1_hex(s));
	//--
} //END FUNCTION

//== PRIVATES SHA512

// Secure Hash Algorithm (SHA512), based on http://www.happycode.info

// PRIVATE :: SHA512 :: encrypt (hex)
var sha512_hex = function(s) {
	//--
	return crypt_binb2hex(sha512_core(s));
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_int_64 = function(msint_32, lsint_32) {
	//--
	this.highOrder = msint_32;
	this.lowOrder = lsint_32;
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_safeadd_2 = function(x, y) {
	//--
	var lsw, msw, lowOrder, highOrder;
	//--
	lsw = (x.lowOrder & 0xFFFF) + (y.lowOrder & 0xFFFF);
	msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);
	lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	lsw = (x.highOrder & 0xFFFF) + (y.highOrder & 0xFFFF) + (msw >>> 16);
	msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);
	highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	return new sha512_int_64(highOrder, lowOrder);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_safeadd_4 = function(a, b, c, d) {
	//--
	var lsw, msw, lowOrder, highOrder;
	//--
	lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF);
	msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);
	lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (msw >>> 16);
	msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);
	highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	return new sha512_int_64(highOrder, lowOrder);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_safeadd_5 = function(a, b, c, d, e) {
	//--
	var lsw, msw, lowOrder, highOrder;
	//--
	lsw = (a.lowOrder & 0xFFFF) + (b.lowOrder & 0xFFFF) + (c.lowOrder & 0xFFFF) + (d.lowOrder & 0xFFFF) + (e.lowOrder & 0xFFFF);
	msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (e.lowOrder >>> 16) + (lsw >>> 16);
	lowOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	lsw = (a.highOrder & 0xFFFF) + (b.highOrder & 0xFFFF) + (c.highOrder & 0xFFFF) + (d.highOrder & 0xFFFF) + (e.highOrder & 0xFFFF) + (msw >>> 16);
	msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (e.highOrder >>> 16) + (lsw >>> 16);
	highOrder = ((msw & 0xFFFF) << 16) | (lsw & 0xFFFF);
	//--
	return new sha512_int_64(highOrder, lowOrder);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_maj = function(x, y, z) {
	//--
	return new sha512_int_64(
		(x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),
		(x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_ch = function(x, y, z) {
	//--
	return new sha512_int_64(
		(x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),
		(x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_rot_r = function(x, n) {
	//--
	if(n <= 32) {
		return new sha512_int_64(
			(x.highOrder >>> n) | (x.lowOrder << (32 - n)),
			(x.lowOrder >>> n) | (x.highOrder << (32 - n))
		);
	} else {
		return new sha512_int_64(
			(x.lowOrder >>> n) | (x.highOrder << (32 - n)),
			(x.highOrder >>> n) | (x.lowOrder << (32 - n))
		);
	} //end if else
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_sh_r = function(x, n) {
	//--
	if(n <= 32) {
		return new sha512_int_64(
			x.highOrder >>> n,
			x.lowOrder >>> n | (x.highOrder << (32 - n))
		);
	} else {
		return new sha512_int_64(
			0,
			x.highOrder << (32 - n)
		);
	} //end if else
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_sigma_0 = function(x) {
	//--
	var rotr28 = sha512_rot_r(x, 28);
	var rotr34 = sha512_rot_r(x, 34);
	var rotr39 = sha512_rot_r(x, 39);
	//--
	return new sha512_int_64(
		rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,
		rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_sigma_1 = function(x) {
	//--
	var rotr14 = sha512_rot_r(x, 14);
	var rotr18 = sha512_rot_r(x, 18);
	var rotr41 = sha512_rot_r(x, 41);
	//--
	return new sha512_int_64(
		rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,
		rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_gamma_0 = function(x) {
	//--
	var rotr1 = sha512_rot_r(x, 1), rotr8 = sha512_rot_r(x, 8), shr7 = sha512_sh_r(x, 7);
	//--
	return new sha512_int_64(
		rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,
		rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_gamma_1 = function(x) {
	//--
	var rotr19 = sha512_rot_r(x, 19);
	var rotr61 = sha512_rot_r(x, 61);
	var shr6 = sha512_sh_r(x, 6);
	//--
	return new sha512_int_64(
		rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,
		rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder
	);
	//--
} //END FUNCTION

// PRIVATE :: SHA512
var sha512_core = function(str) {
	//--
	var H = [
			new sha512_int_64(0x6a09e667, 0xf3bcc908), new sha512_int_64(0xbb67ae85, 0x84caa73b),
			new sha512_int_64(0x3c6ef372, 0xfe94f82b), new sha512_int_64(0xa54ff53a, 0x5f1d36f1),
			new sha512_int_64(0x510e527f, 0xade682d1), new sha512_int_64(0x9b05688c, 0x2b3e6c1f),
			new sha512_int_64(0x1f83d9ab, 0xfb41bd6b), new sha512_int_64(0x5be0cd19, 0x137e2179)
		];
	//--
	var K = [
			new sha512_int_64(0x428a2f98, 0xd728ae22), new sha512_int_64(0x71374491, 0x23ef65cd),
			new sha512_int_64(0xb5c0fbcf, 0xec4d3b2f), new sha512_int_64(0xe9b5dba5, 0x8189dbbc),
			new sha512_int_64(0x3956c25b, 0xf348b538), new sha512_int_64(0x59f111f1, 0xb605d019),
			new sha512_int_64(0x923f82a4, 0xaf194f9b), new sha512_int_64(0xab1c5ed5, 0xda6d8118),
			new sha512_int_64(0xd807aa98, 0xa3030242), new sha512_int_64(0x12835b01, 0x45706fbe),
			new sha512_int_64(0x243185be, 0x4ee4b28c), new sha512_int_64(0x550c7dc3, 0xd5ffb4e2),
			new sha512_int_64(0x72be5d74, 0xf27b896f), new sha512_int_64(0x80deb1fe, 0x3b1696b1),
			new sha512_int_64(0x9bdc06a7, 0x25c71235), new sha512_int_64(0xc19bf174, 0xcf692694),
			new sha512_int_64(0xe49b69c1, 0x9ef14ad2), new sha512_int_64(0xefbe4786, 0x384f25e3),
			new sha512_int_64(0x0fc19dc6, 0x8b8cd5b5), new sha512_int_64(0x240ca1cc, 0x77ac9c65),
			new sha512_int_64(0x2de92c6f, 0x592b0275), new sha512_int_64(0x4a7484aa, 0x6ea6e483),
			new sha512_int_64(0x5cb0a9dc, 0xbd41fbd4), new sha512_int_64(0x76f988da, 0x831153b5),
			new sha512_int_64(0x983e5152, 0xee66dfab), new sha512_int_64(0xa831c66d, 0x2db43210),
			new sha512_int_64(0xb00327c8, 0x98fb213f), new sha512_int_64(0xbf597fc7, 0xbeef0ee4),
			new sha512_int_64(0xc6e00bf3, 0x3da88fc2), new sha512_int_64(0xd5a79147, 0x930aa725),
			new sha512_int_64(0x06ca6351, 0xe003826f), new sha512_int_64(0x14292967, 0x0a0e6e70),
			new sha512_int_64(0x27b70a85, 0x46d22ffc), new sha512_int_64(0x2e1b2138, 0x5c26c926),
			new sha512_int_64(0x4d2c6dfc, 0x5ac42aed), new sha512_int_64(0x53380d13, 0x9d95b3df),
			new sha512_int_64(0x650a7354, 0x8baf63de), new sha512_int_64(0x766a0abb, 0x3c77b2a8),
			new sha512_int_64(0x81c2c92e, 0x47edaee6), new sha512_int_64(0x92722c85, 0x1482353b),
			new sha512_int_64(0xa2bfe8a1, 0x4cf10364), new sha512_int_64(0xa81a664b, 0xbc423001),
			new sha512_int_64(0xc24b8b70, 0xd0f89791), new sha512_int_64(0xc76c51a3, 0x0654be30),
			new sha512_int_64(0xd192e819, 0xd6ef5218), new sha512_int_64(0xd6990624, 0x5565a910),
			new sha512_int_64(0xf40e3585, 0x5771202a), new sha512_int_64(0x106aa070, 0x32bbd1b8),
			new sha512_int_64(0x19a4c116, 0xb8d2d0c8), new sha512_int_64(0x1e376c08, 0x5141ab53),
			new sha512_int_64(0x2748774c, 0xdf8eeb99), new sha512_int_64(0x34b0bcb5, 0xe19b48a8),
			new sha512_int_64(0x391c0cb3, 0xc5c95a63), new sha512_int_64(0x4ed8aa4a, 0xe3418acb),
			new sha512_int_64(0x5b9cca4f, 0x7763e373), new sha512_int_64(0x682e6ff3, 0xd6b2b8a3),
			new sha512_int_64(0x748f82ee, 0x5defb2fc), new sha512_int_64(0x78a5636f, 0x43172f60),
			new sha512_int_64(0x84c87814, 0xa1f0ab72), new sha512_int_64(0x8cc70208, 0x1a6439ec),
			new sha512_int_64(0x90befffa, 0x23631e28), new sha512_int_64(0xa4506ceb, 0xde82bde9),
			new sha512_int_64(0xbef9a3f7, 0xb2c67915), new sha512_int_64(0xc67178f2, 0xe372532b),
			new sha512_int_64(0xca273ece, 0xea26619c), new sha512_int_64(0xd186b8c7, 0x21c0c207),
			new sha512_int_64(0xeada7dd6, 0xcde0eb1e), new sha512_int_64(0xf57d4f7f, 0xee6ed178),
			new sha512_int_64(0x06f067aa, 0x72176fba), new sha512_int_64(0x0a637dc5, 0xa2c898a6),
			new sha512_int_64(0x113f9804, 0xbef90dae), new sha512_int_64(0x1b710b35, 0x131c471b),
			new sha512_int_64(0x28db77f5, 0x23047d84), new sha512_int_64(0x32caab7b, 0x40c72493),
			new sha512_int_64(0x3c9ebe0a, 0x15c9bebc), new sha512_int_64(0x431d67c4, 0x9c100d4c),
			new sha512_int_64(0x4cc5d4be, 0xcb3e42b6), new sha512_int_64(0x597f299c, 0xfc657e2a),
			new sha512_int_64(0x5fcb6fab, 0x3ad6faec), new sha512_int_64(0x6c44198c, 0x4a475817)
		];
	//--
	var W = new Array(64);
	var a, b, c, d, e, f, g, h, i, j;
	var T1, T2;
	//--
	str = SmartJS_CoreUtils.utf8_encode(str);
	//--
	var strlen = str.length * crypt_chrsz();
	str = crypt_str2binb(str);
	//--
	str[strlen >> 5] |= 0x80 << (24 - strlen % 32);
	str[(((strlen + 128) >> 10) << 5) + 31] = strlen;
	//--
	for(var i = 0; i < str.length; i += 32) {
		//--
		a = H[0];
		b = H[1];
		c = H[2];
		d = H[3];
		e = H[4];
		f = H[5];
		g = H[6];
		h = H[7];
		//--
		for(var j = 0; j < 80; j++) {
			//--
			if(j < 16) {
				W[j] = new sha512_int_64(str[j*2 + i], str[j*2 + i + 1]);
			} else {
				W[j] = sha512_safeadd_4(sha512_gamma_1(W[j - 2]), W[j - 7], sha512_gamma_0(W[j - 15]), W[j - 16]);
			} //end if else
			//--
			T1 = sha512_safeadd_5(h, sha512_sigma_1(e), sha512_ch(e, f, g), K[j], W[j]);
			T2 = sha512_safeadd_2(sha512_sigma_0(a), sha512_maj(a, b, c));
			//--
			h = g;
			g = f;
			f = e;
			e = sha512_safeadd_2(d, T1);
			d = c;
			c = b;
			b = a;
			a = sha512_safeadd_2(T1, T2);
			//--
		} //end for
		//--
		H[0] = sha512_safeadd_2(a, H[0]);
		H[1] = sha512_safeadd_2(b, H[1]);
		H[2] = sha512_safeadd_2(c, H[2]);
		H[3] = sha512_safeadd_2(d, H[3]);
		H[4] = sha512_safeadd_2(e, H[4]);
		H[5] = sha512_safeadd_2(f, H[5]);
		H[6] = sha512_safeadd_2(g, H[6]);
		H[7] = sha512_safeadd_2(h, H[7]);
		//--
	} //end for
	//--
	var binarray = [];
	//--
	for(var i = 0; i < H.length; i++) {
		binarray.push(H[i].highOrder);
		binarray.push(H[i].lowOrder);
	} //end for
	//--
	return binarray;
	//--
} //END FUNCTION

//== PUBLIC SHA512

/**
 * Returns the SHA512 hash of a string
 *
 * @method sha512
 * @static
 * @param {String} s The string
 * @return {String} The SHA512 hash of the string
 */
this.sha512 = function(s) {
	//--
	if(SmartJS_TestSHA512 !== true) { // run test
		if(sha512_hex(SmartJS_TestCrypto.unicodeString()) == SmartJS_TestCrypto.testSHA512()) {
			SmartJS_TestSHA512 = true; // test passed
		} else { // test failed
			SmartJS_TestCrypto.raiseError('SHA512/Hash');
			return '';
		} //end if else
	} //end if
	//--
	return String(sha512_hex(s));
	//--
} //END FUNCTION

} //END CLASS

//=======================================
//=======================================

/*
 * Blowfish.js from Dojo Toolkit 1.8.1
 * License: New BSD License
 * Cut of by Sladex (xslade@gmail.com)
 * Based on the C# implementation by Marcus Hahn (http://www.hotpixel.net/)
 * Unsigned math based on Paul Johnstone and Peter Wood patches.
 * 2005-12-08
 */

// NOTICE: Max Key for Blowfish is up to 56 chars length (56 bytes = 448 bits)

/**
* CLASS :: Blowfish (CBC) :: encrypt / decrypt
*
* @class SmartJS_CryptoBlowfish
* @static
*
* @module Smart.Framework/JS/Crypto
*/
SmartJS_CryptoBlowfish = new function() {

// :: static

//== PRIVATE VARS BLOWFISH

// Modes: ECB:0, CBC:1, PCBC:2, CFB:3, OFB:4, CTR:5
var cipher_Modes = {
	CBC:1 // the other modes are not compatible with the PHP Crypto Api at the moment
};

// Objects for processing Blowfish encryption/decryption
var POW2 = Math.pow(2,2);
var POW3 = Math.pow(2,3);
var POW4 = Math.pow(2,4);
var POW8 = Math.pow(2,8);
var POW16 = Math.pow(2,16);
var POW24 = Math.pow(2,24);

// CBC mode initialization vector
var iv = null;

// Blowfish Data Object
var boxes = {
	p:[
		0x243f6a88, 0x85a308d3, 0x13198a2e, 0x03707344, 0xa4093822, 0x299f31d0, 0x082efa98, 0xec4e6c89,
		0x452821e6, 0x38d01377, 0xbe5466cf, 0x34e90c6c, 0xc0ac29b7, 0xc97c50dd, 0x3f84d5b5, 0xb5470917,
		0x9216d5d9, 0x8979fb1b
	],
	s0:[
		0xd1310ba6, 0x98dfb5ac, 0x2ffd72db, 0xd01adfb7, 0xb8e1afed, 0x6a267e96, 0xba7c9045, 0xf12c7f99,
		0x24a19947, 0xb3916cf7, 0x0801f2e2, 0x858efc16, 0x636920d8, 0x71574e69, 0xa458fea3, 0xf4933d7e,
		0x0d95748f, 0x728eb658, 0x718bcd58, 0x82154aee, 0x7b54a41d, 0xc25a59b5, 0x9c30d539, 0x2af26013,
		0xc5d1b023, 0x286085f0, 0xca417918, 0xb8db38ef, 0x8e79dcb0, 0x603a180e, 0x6c9e0e8b, 0xb01e8a3e,
		0xd71577c1, 0xbd314b27, 0x78af2fda, 0x55605c60, 0xe65525f3, 0xaa55ab94, 0x57489862, 0x63e81440,
		0x55ca396a, 0x2aab10b6, 0xb4cc5c34, 0x1141e8ce, 0xa15486af, 0x7c72e993, 0xb3ee1411, 0x636fbc2a,
		0x2ba9c55d, 0x741831f6, 0xce5c3e16, 0x9b87931e, 0xafd6ba33, 0x6c24cf5c, 0x7a325381, 0x28958677,
		0x3b8f4898, 0x6b4bb9af, 0xc4bfe81b, 0x66282193, 0x61d809cc, 0xfb21a991, 0x487cac60, 0x5dec8032,
		0xef845d5d, 0xe98575b1, 0xdc262302, 0xeb651b88, 0x23893e81, 0xd396acc5, 0x0f6d6ff3, 0x83f44239,
		0x2e0b4482, 0xa4842004, 0x69c8f04a, 0x9e1f9b5e, 0x21c66842, 0xf6e96c9a, 0x670c9c61, 0xabd388f0,
		0x6a51a0d2, 0xd8542f68, 0x960fa728, 0xab5133a3, 0x6eef0b6c, 0x137a3be4, 0xba3bf050, 0x7efb2a98,
		0xa1f1651d, 0x39af0176, 0x66ca593e, 0x82430e88, 0x8cee8619, 0x456f9fb4, 0x7d84a5c3, 0x3b8b5ebe,
		0xe06f75d8, 0x85c12073, 0x401a449f, 0x56c16aa6, 0x4ed3aa62, 0x363f7706, 0x1bfedf72, 0x429b023d,
		0x37d0d724, 0xd00a1248, 0xdb0fead3, 0x49f1c09b, 0x075372c9, 0x80991b7b, 0x25d479d8, 0xf6e8def7,
		0xe3fe501a, 0xb6794c3b, 0x976ce0bd, 0x04c006ba, 0xc1a94fb6, 0x409f60c4, 0x5e5c9ec2, 0x196a2463,
		0x68fb6faf, 0x3e6c53b5, 0x1339b2eb, 0x3b52ec6f, 0x6dfc511f, 0x9b30952c, 0xcc814544, 0xaf5ebd09,
		0xbee3d004, 0xde334afd, 0x660f2807, 0x192e4bb3, 0xc0cba857, 0x45c8740f, 0xd20b5f39, 0xb9d3fbdb,
		0x5579c0bd, 0x1a60320a, 0xd6a100c6, 0x402c7279, 0x679f25fe, 0xfb1fa3cc, 0x8ea5e9f8, 0xdb3222f8,
		0x3c7516df, 0xfd616b15, 0x2f501ec8, 0xad0552ab, 0x323db5fa, 0xfd238760, 0x53317b48, 0x3e00df82,
		0x9e5c57bb, 0xca6f8ca0, 0x1a87562e, 0xdf1769db, 0xd542a8f6, 0x287effc3, 0xac6732c6, 0x8c4f5573,
		0x695b27b0, 0xbbca58c8, 0xe1ffa35d, 0xb8f011a0, 0x10fa3d98, 0xfd2183b8, 0x4afcb56c, 0x2dd1d35b,
		0x9a53e479, 0xb6f84565, 0xd28e49bc, 0x4bfb9790, 0xe1ddf2da, 0xa4cb7e33, 0x62fb1341, 0xcee4c6e8,
		0xef20cada, 0x36774c01, 0xd07e9efe, 0x2bf11fb4, 0x95dbda4d, 0xae909198, 0xeaad8e71, 0x6b93d5a0,
		0xd08ed1d0, 0xafc725e0, 0x8e3c5b2f, 0x8e7594b7, 0x8ff6e2fb, 0xf2122b64, 0x8888b812, 0x900df01c,
		0x4fad5ea0, 0x688fc31c, 0xd1cff191, 0xb3a8c1ad, 0x2f2f2218, 0xbe0e1777, 0xea752dfe, 0x8b021fa1,
		0xe5a0cc0f, 0xb56f74e8, 0x18acf3d6, 0xce89e299, 0xb4a84fe0, 0xfd13e0b7, 0x7cc43b81, 0xd2ada8d9,
		0x165fa266, 0x80957705, 0x93cc7314, 0x211a1477, 0xe6ad2065, 0x77b5fa86, 0xc75442f5, 0xfb9d35cf,
		0xebcdaf0c, 0x7b3e89a0, 0xd6411bd3, 0xae1e7e49, 0x00250e2d, 0x2071b35e, 0x226800bb, 0x57b8e0af,
		0x2464369b, 0xf009b91e, 0x5563911d, 0x59dfa6aa, 0x78c14389, 0xd95a537f, 0x207d5ba2, 0x02e5b9c5,
		0x83260376, 0x6295cfa9, 0x11c81968, 0x4e734a41, 0xb3472dca, 0x7b14a94a, 0x1b510052, 0x9a532915,
		0xd60f573f, 0xbc9bc6e4, 0x2b60a476, 0x81e67400, 0x08ba6fb5, 0x571be91f, 0xf296ec6b, 0x2a0dd915,
		0xb6636521, 0xe7b9f9b6, 0xff34052e, 0xc5855664, 0x53b02d5d, 0xa99f8fa1, 0x08ba4799, 0x6e85076a
	],
	s1:[
		0x4b7a70e9, 0xb5b32944, 0xdb75092e, 0xc4192623, 0xad6ea6b0, 0x49a7df7d, 0x9cee60b8, 0x8fedb266,
		0xecaa8c71, 0x699a17ff, 0x5664526c, 0xc2b19ee1, 0x193602a5, 0x75094c29, 0xa0591340, 0xe4183a3e,
		0x3f54989a, 0x5b429d65, 0x6b8fe4d6, 0x99f73fd6, 0xa1d29c07, 0xefe830f5, 0x4d2d38e6, 0xf0255dc1,
		0x4cdd2086, 0x8470eb26, 0x6382e9c6, 0x021ecc5e, 0x09686b3f, 0x3ebaefc9, 0x3c971814, 0x6b6a70a1,
		0x687f3584, 0x52a0e286, 0xb79c5305, 0xaa500737, 0x3e07841c, 0x7fdeae5c, 0x8e7d44ec, 0x5716f2b8,
		0xb03ada37, 0xf0500c0d, 0xf01c1f04, 0x0200b3ff, 0xae0cf51a, 0x3cb574b2, 0x25837a58, 0xdc0921bd,
		0xd19113f9, 0x7ca92ff6, 0x94324773, 0x22f54701, 0x3ae5e581, 0x37c2dadc, 0xc8b57634, 0x9af3dda7,
		0xa9446146, 0x0fd0030e, 0xecc8c73e, 0xa4751e41, 0xe238cd99, 0x3bea0e2f, 0x3280bba1, 0x183eb331,
		0x4e548b38, 0x4f6db908, 0x6f420d03, 0xf60a04bf, 0x2cb81290, 0x24977c79, 0x5679b072, 0xbcaf89af,
		0xde9a771f, 0xd9930810, 0xb38bae12, 0xdccf3f2e, 0x5512721f, 0x2e6b7124, 0x501adde6, 0x9f84cd87,
		0x7a584718, 0x7408da17, 0xbc9f9abc, 0xe94b7d8c, 0xec7aec3a, 0xdb851dfa, 0x63094366, 0xc464c3d2,
		0xef1c1847, 0x3215d908, 0xdd433b37, 0x24c2ba16, 0x12a14d43, 0x2a65c451, 0x50940002, 0x133ae4dd,
		0x71dff89e, 0x10314e55, 0x81ac77d6, 0x5f11199b, 0x043556f1, 0xd7a3c76b, 0x3c11183b, 0x5924a509,
		0xf28fe6ed, 0x97f1fbfa, 0x9ebabf2c, 0x1e153c6e, 0x86e34570, 0xeae96fb1, 0x860e5e0a, 0x5a3e2ab3,
		0x771fe71c, 0x4e3d06fa, 0x2965dcb9, 0x99e71d0f, 0x803e89d6, 0x5266c825, 0x2e4cc978, 0x9c10b36a,
		0xc6150eba, 0x94e2ea78, 0xa5fc3c53, 0x1e0a2df4, 0xf2f74ea7, 0x361d2b3d, 0x1939260f, 0x19c27960,
		0x5223a708, 0xf71312b6, 0xebadfe6e, 0xeac31f66, 0xe3bc4595, 0xa67bc883, 0xb17f37d1, 0x018cff28,
		0xc332ddef, 0xbe6c5aa5, 0x65582185, 0x68ab9802, 0xeecea50f, 0xdb2f953b, 0x2aef7dad, 0x5b6e2f84,
		0x1521b628, 0x29076170, 0xecdd4775, 0x619f1510, 0x13cca830, 0xeb61bd96, 0x0334fe1e, 0xaa0363cf,
		0xb5735c90, 0x4c70a239, 0xd59e9e0b, 0xcbaade14, 0xeecc86bc, 0x60622ca7, 0x9cab5cab, 0xb2f3846e,
		0x648b1eaf, 0x19bdf0ca, 0xa02369b9, 0x655abb50, 0x40685a32, 0x3c2ab4b3, 0x319ee9d5, 0xc021b8f7,
		0x9b540b19, 0x875fa099, 0x95f7997e, 0x623d7da8, 0xf837889a, 0x97e32d77, 0x11ed935f, 0x16681281,
		0x0e358829, 0xc7e61fd6, 0x96dedfa1, 0x7858ba99, 0x57f584a5, 0x1b227263, 0x9b83c3ff, 0x1ac24696,
		0xcdb30aeb, 0x532e3054, 0x8fd948e4, 0x6dbc3128, 0x58ebf2ef, 0x34c6ffea, 0xfe28ed61, 0xee7c3c73,
		0x5d4a14d9, 0xe864b7e3, 0x42105d14, 0x203e13e0, 0x45eee2b6, 0xa3aaabea, 0xdb6c4f15, 0xfacb4fd0,
		0xc742f442, 0xef6abbb5, 0x654f3b1d, 0x41cd2105, 0xd81e799e, 0x86854dc7, 0xe44b476a, 0x3d816250,
		0xcf62a1f2, 0x5b8d2646, 0xfc8883a0, 0xc1c7b6a3, 0x7f1524c3, 0x69cb7492, 0x47848a0b, 0x5692b285,
		0x095bbf00, 0xad19489d, 0x1462b174, 0x23820e00, 0x58428d2a, 0x0c55f5ea, 0x1dadf43e, 0x233f7061,
		0x3372f092, 0x8d937e41, 0xd65fecf1, 0x6c223bdb, 0x7cde3759, 0xcbee7460, 0x4085f2a7, 0xce77326e,
		0xa6078084, 0x19f8509e, 0xe8efd855, 0x61d99735, 0xa969a7aa, 0xc50c06c2, 0x5a04abfc, 0x800bcadc,
		0x9e447a2e, 0xc3453484, 0xfdd56705, 0x0e1e9ec9, 0xdb73dbd3, 0x105588cd, 0x675fda79, 0xe3674340,
		0xc5c43465, 0x713e38d8, 0x3d28f89e, 0xf16dff20, 0x153e21e7, 0x8fb03d4a, 0xe6e39f2b, 0xdb83adf7
	],
	s2:[
		0xe93d5a68, 0x948140f7, 0xf64c261c, 0x94692934, 0x411520f7, 0x7602d4f7, 0xbcf46b2e, 0xd4a20068,
		0xd4082471, 0x3320f46a, 0x43b7d4b7, 0x500061af, 0x1e39f62e, 0x97244546, 0x14214f74, 0xbf8b8840,
		0x4d95fc1d, 0x96b591af, 0x70f4ddd3, 0x66a02f45, 0xbfbc09ec, 0x03bd9785, 0x7fac6dd0, 0x31cb8504,
		0x96eb27b3, 0x55fd3941, 0xda2547e6, 0xabca0a9a, 0x28507825, 0x530429f4, 0x0a2c86da, 0xe9b66dfb,
		0x68dc1462, 0xd7486900, 0x680ec0a4, 0x27a18dee, 0x4f3ffea2, 0xe887ad8c, 0xb58ce006, 0x7af4d6b6,
		0xaace1e7c, 0xd3375fec, 0xce78a399, 0x406b2a42, 0x20fe9e35, 0xd9f385b9, 0xee39d7ab, 0x3b124e8b,
		0x1dc9faf7, 0x4b6d1856, 0x26a36631, 0xeae397b2, 0x3a6efa74, 0xdd5b4332, 0x6841e7f7, 0xca7820fb,
		0xfb0af54e, 0xd8feb397, 0x454056ac, 0xba489527, 0x55533a3a, 0x20838d87, 0xfe6ba9b7, 0xd096954b,
		0x55a867bc, 0xa1159a58, 0xcca92963, 0x99e1db33, 0xa62a4a56, 0x3f3125f9, 0x5ef47e1c, 0x9029317c,
		0xfdf8e802, 0x04272f70, 0x80bb155c, 0x05282ce3, 0x95c11548, 0xe4c66d22, 0x48c1133f, 0xc70f86dc,
		0x07f9c9ee, 0x41041f0f, 0x404779a4, 0x5d886e17, 0x325f51eb, 0xd59bc0d1, 0xf2bcc18f, 0x41113564,
		0x257b7834, 0x602a9c60, 0xdff8e8a3, 0x1f636c1b, 0x0e12b4c2, 0x02e1329e, 0xaf664fd1, 0xcad18115,
		0x6b2395e0, 0x333e92e1, 0x3b240b62, 0xeebeb922, 0x85b2a20e, 0xe6ba0d99, 0xde720c8c, 0x2da2f728,
		0xd0127845, 0x95b794fd, 0x647d0862, 0xe7ccf5f0, 0x5449a36f, 0x877d48fa, 0xc39dfd27, 0xf33e8d1e,
		0x0a476341, 0x992eff74, 0x3a6f6eab, 0xf4f8fd37, 0xa812dc60, 0xa1ebddf8, 0x991be14c, 0xdb6e6b0d,
		0xc67b5510, 0x6d672c37, 0x2765d43b, 0xdcd0e804, 0xf1290dc7, 0xcc00ffa3, 0xb5390f92, 0x690fed0b,
		0x667b9ffb, 0xcedb7d9c, 0xa091cf0b, 0xd9155ea3, 0xbb132f88, 0x515bad24, 0x7b9479bf, 0x763bd6eb,
		0x37392eb3, 0xcc115979, 0x8026e297, 0xf42e312d, 0x6842ada7, 0xc66a2b3b, 0x12754ccc, 0x782ef11c,
		0x6a124237, 0xb79251e7, 0x06a1bbe6, 0x4bfb6350, 0x1a6b1018, 0x11caedfa, 0x3d25bdd8, 0xe2e1c3c9,
		0x44421659, 0x0a121386, 0xd90cec6e, 0xd5abea2a, 0x64af674e, 0xda86a85f, 0xbebfe988, 0x64e4c3fe,
		0x9dbc8057, 0xf0f7c086, 0x60787bf8, 0x6003604d, 0xd1fd8346, 0xf6381fb0, 0x7745ae04, 0xd736fccc,
		0x83426b33, 0xf01eab71, 0xb0804187, 0x3c005e5f, 0x77a057be, 0xbde8ae24, 0x55464299, 0xbf582e61,
		0x4e58f48f, 0xf2ddfda2, 0xf474ef38, 0x8789bdc2, 0x5366f9c3, 0xc8b38e74, 0xb475f255, 0x46fcd9b9,
		0x7aeb2661, 0x8b1ddf84, 0x846a0e79, 0x915f95e2, 0x466e598e, 0x20b45770, 0x8cd55591, 0xc902de4c,
		0xb90bace1, 0xbb8205d0, 0x11a86248, 0x7574a99e, 0xb77f19b6, 0xe0a9dc09, 0x662d09a1, 0xc4324633,
		0xe85a1f02, 0x09f0be8c, 0x4a99a025, 0x1d6efe10, 0x1ab93d1d, 0x0ba5a4df, 0xa186f20f, 0x2868f169,
		0xdcb7da83, 0x573906fe, 0xa1e2ce9b, 0x4fcd7f52, 0x50115e01, 0xa70683fa, 0xa002b5c4, 0x0de6d027,
		0x9af88c27, 0x773f8641, 0xc3604c06, 0x61a806b5, 0xf0177a28, 0xc0f586e0, 0x006058aa, 0x30dc7d62,
		0x11e69ed7, 0x2338ea63, 0x53c2dd94, 0xc2c21634, 0xbbcbee56, 0x90bcb6de, 0xebfc7da1, 0xce591d76,
		0x6f05e409, 0x4b7c0188, 0x39720a3d, 0x7c927c24, 0x86e3725f, 0x724d9db9, 0x1ac15bb4, 0xd39eb8fc,
		0xed545578, 0x08fca5b5, 0xd83d7cd3, 0x4dad0fc4, 0x1e50ef5e, 0xb161e6f8, 0xa28514d9, 0x6c51133c,
		0x6fd5c7e7, 0x56e14ec4, 0x362abfce, 0xddc6c837, 0xd79a3234, 0x92638212, 0x670efa8e, 0x406000e0
	],
	s3:[
		0x3a39ce37, 0xd3faf5cf, 0xabc27737, 0x5ac52d1b, 0x5cb0679e, 0x4fa33742, 0xd3822740, 0x99bc9bbe,
		0xd5118e9d, 0xbf0f7315, 0xd62d1c7e, 0xc700c47b, 0xb78c1b6b, 0x21a19045, 0xb26eb1be, 0x6a366eb4,
		0x5748ab2f, 0xbc946e79, 0xc6a376d2, 0x6549c2c8, 0x530ff8ee, 0x468dde7d, 0xd5730a1d, 0x4cd04dc6,
		0x2939bbdb, 0xa9ba4650, 0xac9526e8, 0xbe5ee304, 0xa1fad5f0, 0x6a2d519a, 0x63ef8ce2, 0x9a86ee22,
		0xc089c2b8, 0x43242ef6, 0xa51e03aa, 0x9cf2d0a4, 0x83c061ba, 0x9be96a4d, 0x8fe51550, 0xba645bd6,
		0x2826a2f9, 0xa73a3ae1, 0x4ba99586, 0xef5562e9, 0xc72fefd3, 0xf752f7da, 0x3f046f69, 0x77fa0a59,
		0x80e4a915, 0x87b08601, 0x9b09e6ad, 0x3b3ee593, 0xe990fd5a, 0x9e34d797, 0x2cf0b7d9, 0x022b8b51,
		0x96d5ac3a, 0x017da67d, 0xd1cf3ed6, 0x7c7d2d28, 0x1f9f25cf, 0xadf2b89b, 0x5ad6b472, 0x5a88f54c,
		0xe029ac71, 0xe019a5e6, 0x47b0acfd, 0xed93fa9b, 0xe8d3c48d, 0x283b57cc, 0xf8d56629, 0x79132e28,
		0x785f0191, 0xed756055, 0xf7960e44, 0xe3d35e8c, 0x15056dd4, 0x88f46dba, 0x03a16125, 0x0564f0bd,
		0xc3eb9e15, 0x3c9057a2, 0x97271aec, 0xa93a072a, 0x1b3f6d9b, 0x1e6321f5, 0xf59c66fb, 0x26dcf319,
		0x7533d928, 0xb155fdf5, 0x03563482, 0x8aba3cbb, 0x28517711, 0xc20ad9f8, 0xabcc5167, 0xccad925f,
		0x4de81751, 0x3830dc8e, 0x379d5862, 0x9320f991, 0xea7a90c2, 0xfb3e7bce, 0x5121ce64, 0x774fbe32,
		0xa8b6e37e, 0xc3293d46, 0x48de5369, 0x6413e680, 0xa2ae0810, 0xdd6db224, 0x69852dfd, 0x09072166,
		0xb39a460a, 0x6445c0dd, 0x586cdecf, 0x1c20c8ae, 0x5bbef7dd, 0x1b588d40, 0xccd2017f, 0x6bb4e3bb,
		0xdda26a7e, 0x3a59ff45, 0x3e350a44, 0xbcb4cdd5, 0x72eacea8, 0xfa6484bb, 0x8d6612ae, 0xbf3c6f47,
		0xd29be463, 0x542f5d9e, 0xaec2771b, 0xf64e6370, 0x740e0d8d, 0xe75b1357, 0xf8721671, 0xaf537d5d,
		0x4040cb08, 0x4eb4e2cc, 0x34d2466a, 0x0115af84, 0xe1b00428, 0x95983a1d, 0x06b89fb4, 0xce6ea048,
		0x6f3f3b82, 0x3520ab82, 0x011a1d4b, 0x277227f8, 0x611560b1, 0xe7933fdc, 0xbb3a792b, 0x344525bd,
		0xa08839e1, 0x51ce794b, 0x2f32c9b7, 0xa01fbac9, 0xe01cc87e, 0xbcc7d1f6, 0xcf0111c3, 0xa1e8aac7,
		0x1a908749, 0xd44fbd9a, 0xd0dadecb, 0xd50ada38, 0x0339c32a, 0xc6913667, 0x8df9317c, 0xe0b12b4f,
		0xf79e59b7, 0x43f5bb3a, 0xf2d519ff, 0x27d9459c, 0xbf97222c, 0x15e6fc2a, 0x0f91fc71, 0x9b941525,
		0xfae59361, 0xceb69ceb, 0xc2a86459, 0x12baa8d1, 0xb6c1075e, 0xe3056a0c, 0x10d25065, 0xcb03a442,
		0xe0ec6e0e, 0x1698db3b, 0x4c98a0be, 0x3278e964, 0x9f1f9532, 0xe0d392df, 0xd3a0342b, 0x8971f21e,
		0x1b0a7441, 0x4ba3348c, 0xc5be7120, 0xc37632d8, 0xdf359f8d, 0x9b992f2e, 0xe60b6f47, 0x0fe3f11d,
		0xe54cda54, 0x1edad891, 0xce6279cf, 0xcd3e7e6f, 0x1618b166, 0xfd2c1d05, 0x848fd2c5, 0xf6fb2299,
		0xf523f357, 0xa6327623, 0x93a83531, 0x56cccd02, 0xacf08162, 0x5a75ebb5, 0x6e163697, 0x88d273cc,
		0xde966292, 0x81b949d0, 0x4c50901b, 0x71c65614, 0xe6c6c7bd, 0x327a140a, 0x45e1d006, 0xc3f27b9a,
		0xc9aa53fd, 0x62a80f00, 0xbb25bfe2, 0x35bdd2f6, 0x71126905, 0xb2040222, 0xb6cbcf7c, 0xcd769c2b,
		0x53113ec0, 0x1640e3d3, 0x38abbd60, 0x2547adf0, 0xba38209c, 0xf746ce76, 0x77afa1c5, 0x20756060,
		0x85cbfe4e, 0x8ae88dd8, 0x7aaaf9b0, 0x4cf9aa7e, 0x1948c25c, 0x02fb8a8c, 0x01c36ae4, 0xd6ebe1f9,
		0x90d4f869, 0xa65cdea0, 0x3f09252d, 0xc208e69f, 0xb74e6132, 0xce77e25b, 0x578fdfe3, 0x3ac372e6
	]
};

//== PRIVATES BLOWFISH

var array_map = function(arr, callback, thisObject, Ctr){
	// summary:
	//		applies callback to each element of arr and returns
	//		an Array with the results
	// arr: Array|String
	//		the array to iterate on. If a string, operates on
	//		individual characters.
	// callback: Function|String
	//		a function is invoked with three arguments, (item, index,
	//		array),	 and returns a value
	// thisObject: Object?
	//		may be used to scope the call to callback
	// returns: Array
	// description:
	//		This function corresponds to the JavaScript 1.6 Array.map() method, with one difference: when
	//		run over sparse arrays, this implementation passes the "holes" in the sparse array to
	//		the callback function with a value of undefined. JavaScript 1.6's map skips the holes in the sparse array.
	//		For more details, see:
	//		https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map
	// example:
	//	| // returns [2, 3, 4, 5]
	//	| array.map([1, 2, 3, 4], function(item){ return item+1 });
	// TODO: why do we have a non-standard signature here? do we need "Ctr"?
	//--
	var i = 0, l = arr && arr.length || 0, out = new (Ctr || Array)(l);
	if(l && typeof arr == "string") arr = arr.split("");
	if(typeof callback == "string") callback = cache[callback] || buildFn(callback);
	//--
	if(thisObject) {
		//--
		for(; i < l; ++i) {
			out[i] = callback.call(thisObject, arr[i], i, arr);
		} //end for
		//--
	} else {
		//--
		for(; i < l; ++i) {
			out[i] = callback(arr[i], i, arr);
		} //end for
		//--
	} //end if else
	//--
	return out; // Array
	//--
} //END FUNCTION

// fixes based on patch submitted by Peter Wood (#5791)

var add = function(x,y) {
	return (((x>>0x10)+(y>>0x10)+(((x&0xffff)+(y&0xffff))>>0x10))<<0x10)|(((x&0xffff)+(y&0xffff))&0xffff);
} //END FUNCTION

var xor = function(x,y) {
	return (((x>>0x10)^(y>>0x10))<<0x10)|(((x&0xffff)^(y&0xffff))&0xffff);
} //END FUNCTION

var dollar = function(v, box) {
	//--
	var d=box.s3[v&0xff]; v>>=8;
	var c=box.s2[v&0xff]; v>>=8;
	var b=box.s1[v&0xff]; v>>=8;
	var a=box.s0[v&0xff];
	//--
	var r;
	r = (((a>>0x10)+(b>>0x10)+(((a&0xffff)+(b&0xffff))>>0x10))<<0x10)|(((a&0xffff)+(b&0xffff))&0xffff);
	r = (((r>>0x10)^(c>>0x10))<<0x10)|(((r&0xffff)^(c&0xffff))&0xffff);
	//--
	return (((r>>0x10)+(d>>0x10)+(((r&0xffff)+(d&0xffff))>>0x10))<<0x10)|(((r&0xffff)+(d&0xffff))&0xffff);
	//--
} //END FUNCTION

var eb = function(o, box) {
	//--
	var l=o.left;
	var r=o.right;
	//--
	l=xor(l,box.p[0]);
	r=xor(r,xor(dollar(l,box),box.p[1]));
	l=xor(l,xor(dollar(r,box),box.p[2]));
	r=xor(r,xor(dollar(l,box),box.p[3]));
	l=xor(l,xor(dollar(r,box),box.p[4]));
	r=xor(r,xor(dollar(l,box),box.p[5]));
	l=xor(l,xor(dollar(r,box),box.p[6]));
	r=xor(r,xor(dollar(l,box),box.p[7]));
	l=xor(l,xor(dollar(r,box),box.p[8]));
	r=xor(r,xor(dollar(l,box),box.p[9]));
	l=xor(l,xor(dollar(r,box),box.p[10]));
	r=xor(r,xor(dollar(l,box),box.p[11]));
	l=xor(l,xor(dollar(r,box),box.p[12]));
	r=xor(r,xor(dollar(l,box),box.p[13]));
	l=xor(l,xor(dollar(r,box),box.p[14]));
	r=xor(r,xor(dollar(l,box),box.p[15]));
	l=xor(l,xor(dollar(r,box),box.p[16]));
	//--
	o.right=l;
	o.left=xor(r,box.p[17]);
	//--
} //END FUNCTION

var db = function(o, box) {
	//--
	var l=o.left;
	var r=o.right;
	//--
	l=xor(l,box.p[17]);
	r=xor(r,xor(dollar(l,box),box.p[16]));
	l=xor(l,xor(dollar(r,box),box.p[15]));
	r=xor(r,xor(dollar(l,box),box.p[14]));
	l=xor(l,xor(dollar(r,box),box.p[13]));
	r=xor(r,xor(dollar(l,box),box.p[12]));
	l=xor(l,xor(dollar(r,box),box.p[11]));
	r=xor(r,xor(dollar(l,box),box.p[10]));
	l=xor(l,xor(dollar(r,box),box.p[9]));
	r=xor(r,xor(dollar(l,box),box.p[8]));
	l=xor(l,xor(dollar(r,box),box.p[7]));
	r=xor(r,xor(dollar(l,box),box.p[6]));
	l=xor(l,xor(dollar(r,box),box.p[5]));
	r=xor(r,xor(dollar(l,box),box.p[4]));
	l=xor(l,xor(dollar(r,box),box.p[3]));
	r=xor(r,xor(dollar(l,box),box.p[2]));
	l=xor(l,xor(dollar(r,box),box.p[1]));
	//--
	o.right=l;
	o.left=xor(r,box.p[0]);
	//--
} //END FUNCTION

// Return true if it is a String
var isString = function(it) {
	return (typeof it == 'string' || it instanceof String); // Boolean
} //END FUNCTION

//	Note that we aren't caching contexts here; it might take a little longer but we should be more secure this way.
var init = function(key) {
	//--
	var k=key;
	//--
	if(isString(k)){
		k = array_map(k.split(""), function(item){ return item.charCodeAt(0) & 0xff; });
	} //end if
	//-- init the boxes
	var pos=0, data=0, res={ left:0, right:0 }, i, j, l;
	var box = {
		p: array_map(boxes.p.slice(0), function(item){
			var l=k.length, j;
			for(j=0; j<4; j++){ data=(data*POW8)|k[pos++ % l]; }
			return (((item>>0x10)^(data>>0x10))<<0x10)|(((item&0xffff)^(data&0xffff))&0xffff);
		}),
		s0:boxes.s0.slice(0),
		s1:boxes.s1.slice(0),
		s2:boxes.s2.slice(0),
		s3:boxes.s3.slice(0)
	};
	//-- encrypt p and the s boxes
	for(i=0, l=box.p.length; i<l;) {
		eb(res, box);
		box.p[i++]=res.left, box.p[i++]=res.right;
	} //end for
	for(i=0; i<4; i++) {
		for(j=0, l=box["s"+i].length; j<l;) {
			eb(res, box);
			box["s"+i][j++]=res.left, box["s"+i][j++]=res.right;
		} //end for
	} //end for
	//--
	return box;
	//--
} //END FUNCTION

// get the initialization vector
var getIV = function() {
	//--
	return iv.join("");	// string
	//--
} //END FUNCTION

// sets the initialization vector to data
var setIV = function(key) {
	//-- SmartFramework compatible {{{SYNC-BLOWFISH-IV}}}
	var data = String(SmartJS_Base64.encode(String(SmartJS_CryptoHash.sha1('@Smart.Framework-Crypto/BlowFish:' + key + '#' + SmartJS_CryptoHash.sha1('BlowFish-iv-SHA1' + key) + '-' + SmartJS_CryptoHash.md5('BlowFish-iv-MD5' + key) + '#'))).substring(1, (8+1)));
	//console.log('iV: ' + data);
	//-- pre-process
	var ba = array_map(data.split(""), function(item){ return item.charCodeAt(0); });
	//-- make it a pair of words
	iv={};
	iv.left=ba[0]*POW24|ba[1]*POW16|ba[2]*POW8|ba[3];
	iv.right=ba[4]*POW24|ba[5]*POW16|ba[6]*POW8|ba[7];
	//--
} //END FUNCTION

var setKey = function(key) {
	//-- generate a secure key {{{SYNC-BLOWFISH-KEY}}}
	var r_key = String(SmartJS_CryptoHash.sha512(key).substring(13, (29+13)) + SmartJS_CryptoHash.sha1(key).substring(13, (10+13)) + SmartJS_CryptoHash.md5(key).substring(13, (9+13)));
	//console.log('Key: ' + r_key);
	//--
	return r_key;
	//--
} //END FUNCTION

//== PUBLIC BLOWFISH

/**
 * Blowfish encrypts plaintext using an encryption key
 *
 * @method encrypt
 * @static
 * @param {String} plaintext The plain string
 * @param {String} key The encryption key
 * @return {String} The Blowfish encrypted string
 */
this.encrypt = function(plaintext, key) {
	//--
	plaintext = SmartJS_Base64.encode(plaintext); // b64 is because is not UTF-8 safe and may corrupt unicode characters
	//--
	setIV(key);
	key = setKey(key);
	//--
	var mode = cipher_Modes.CBC;
	//--
	var bx = init(key);
	//-- {{{SYNC-BLOWFISH-CHECKSUM}}}
	plaintext = String(plaintext + '#CHECKSUM-SHA1#' + SmartJS_CryptoHash.sha1(plaintext));
	//--
	//===== {{{SYNC-BLOWFISH-PADDING}}}
	//-- Blowfish is a 64-bit block cipher. This means that the data must be provided in units that are a multiple of 8 bytes
	var padding = 8 - (plaintext.length & 7);
	//-- unixman: fix: add spaces as padding as we have it as b64 encoded and will not modify the original
	// for(var i=0; i<padding; i++){ plaintext+=String.fromCharCode(padding); } // original padding
	for(var i=0; i<padding; i++) {
		plaintext += ' '; // unixman (pad with spaces)
	} //end for
	//--
	//=====
	//--
	var cipher=[], count=plaintext.length >> 3, pos=0, o={};
	var isCBC=(mode==cipher_Modes.CBC);
	var vector={left:iv.left||null, right:iv.right||null};
	//--
	for(var i=0; i<count; i++) {
		//--
		o.left=plaintext.charCodeAt(pos)*POW24
			|plaintext.charCodeAt(pos+1)*POW16
			|plaintext.charCodeAt(pos+2)*POW8
			|plaintext.charCodeAt(pos+3);
		o.right=plaintext.charCodeAt(pos+4)*POW24
			|plaintext.charCodeAt(pos+5)*POW16
			|plaintext.charCodeAt(pos+6)*POW8
			|plaintext.charCodeAt(pos+7);
		//--
		if(isCBC){
			o.left=(((o.left>>0x10)^(vector.left>>0x10))<<0x10)|(((o.left&0xffff)^(vector.left&0xffff))&0xffff);
			o.right=(((o.right>>0x10)^(vector.right>>0x10))<<0x10)|(((o.right&0xffff)^(vector.right&0xffff))&0xffff);
		} //end if
		//-- encrypt the block
		eb(o, bx);
		//--
		if(isCBC){
			vector.left=o.left;
			vector.right=o.right;
		} //end if
		//--
		cipher.push((o.left>>24)&0xff);
		cipher.push((o.left>>16)&0xff);
		cipher.push((o.left>>8)&0xff);
		cipher.push(o.left&0xff);
		cipher.push((o.right>>24)&0xff);
		cipher.push((o.right>>16)&0xff);
		cipher.push((o.right>>8)&0xff);
		cipher.push(o.right&0xff);
		//--
		pos+=8;
		//--
	} //end for
	//--
	//=====
	//-- BASE64
	//return SmartJS_Base64.encode(cipher.join(""));
	//-- HEX
	return String(array_map(cipher, function(item){ return (item<=0xf?'0':'')+item.toString(16); }).join('').toUpperCase()); // HEX
	//--
	//=====
	//--
} //END FUNCTION

/**
 * Blowfish decrypts ciphertext using the encryption key
 *
 * @method decrypt
 * @static
 * @param {String} ciphertext The Blowfish encrypted string
 * @param {String} key The encryption key
 * @return {String} The decrypted string
 */
this.decrypt = function(ciphertext, key) {
	//--
	setIV(key);
	key = setKey(key);
	//--
	var mode = cipher_Modes.CBC;
	//--
	var bx = init(key);
	var pt = [];
	//--
	var c = null;
	//--
	//=====
	//-- BASE64
	//c = SmartJS_Base64.decode(array_map(ciphertext.split(""), function(item){ return item.charCodeAt(0); }));
	//-- HEX
	c = [];
	ciphertext = SmartJS_CoreUtils.stringTrim(ciphertext).toLowerCase(); // make back lowercase and trim (because in encrypt we delivered as uppercase)
	for(var i=0, l=ciphertext.length-1; i<l; i+=2){
		c.push(parseInt(ciphertext.substr(i,2), 16));
	} //end for
	//--
	//=====
	//--
	var count=c.length >> 3, pos=0, o={};
	var isCBC=(mode==cipher_Modes.CBC);
	var vector={left:iv.left||null, right:iv.right||null};
	//--
	for(var i=0; i<count; i++) {
		//--
		o.left=c[pos]*POW24|c[pos+1]*POW16|c[pos+2]*POW8|c[pos+3];
		o.right=c[pos+4]*POW24|c[pos+5]*POW16|c[pos+6]*POW8|c[pos+7];
		//--
		if(isCBC) {
			var left=o.left;
			var right=o.right;
		} //end if
		//-- decrypt the block
		db(o, bx);
		//--
		if(isCBC) {
			o.left=(((o.left>>0x10)^(vector.left>>0x10))<<0x10)|(((o.left&0xffff)^(vector.left&0xffff))&0xffff);
			o.right=(((o.right>>0x10)^(vector.right>>0x10))<<0x10)|(((o.right&0xffff)^(vector.right&0xffff))&0xffff);
			vector.left=left;
			vector.right=right;
		} //end if
		//--
		pt.push((o.left>>24)&0xff);
		pt.push((o.left>>16)&0xff);
		pt.push((o.left>>8)&0xff);
		pt.push(o.left&0xff);
		pt.push((o.right>>24)&0xff);
		pt.push((o.right>>16)&0xff);
		pt.push((o.right>>8)&0xff);
		pt.push(o.right&0xff);
		pos+=8;
		//--
	} //end for
	//===== {{{SYNC-BLOWFISH-PADDING-TRIM}}} :: trim padding spaces
	// #un-padding# is not necessary as we added trailing spaces and we simply trim it below
	//if(pt[pt.length-1]==pt[pt.length-2]||pt[pt.length-1]==0x01) { var n=pt[pt.length-1]; pt.splice(pt.length-n, n); }
	//--
	var plaintext = SmartJS_CoreUtils.stringTrim(String(array_map(pt, function(item){ return String.fromCharCode(item); }).join("")));
	//=====
	//-- {{{SYNC-BLOWFISH-CHECKSUM}}}
	var parts = plaintext.split('#CHECKSUM-SHA1#');
	plaintext = SmartJS_CoreUtils.stringTrim(String(parts[0]));
	var checksum = SmartJS_CoreUtils.stringTrim(String(parts[1]));
	if(SmartJS_CryptoHash.sha1(plaintext) !== (String(checksum))) {
		console.error('JS-Blowfish / Decode: Checksum Failed'); // do not raise error just alert
		return '';
	} //end if
	//-- convert to string and reverse b64 :: b64 is because is not UTF-8 safe and may corrupt unicode characters
	return String(SmartJS_Base64.decode(plaintext)); // string
	//--
} //END FUNCTION

} //END CLASS

//=======================================
//=======================================

//==================================================================
//==================================================================

// #END

// ############### ifmodalbox.js

// [LIB - Smart.Framework / JS / Smart Modal iFrame]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: jQuery

//==================================================================
//==================================================================

//================== [NO:evcode]

//=======================================
// CLASS :: Smart Modal iFrame
//=======================================

//-- setup
var SmartJS_ModalBox_LoaderBlank = 'lib/js/framework/blank.html';			// loader html blank page or empty
var SmartJS_ModalBox_LoaderImg = 'lib/js/framework/img/loading.svg';		// loader image or empty
var SmartJS_ModalBox_CloseImg = 'lib/js/framework/img/close.svg';			// close image
var SmartJS_ModalBox_CloseAlign = 'right'; 									// close align: 'left' or 'right'
var SmartJS_ModalBox_CloseBtnAltHtml = ''; 									// alternate html code for the modal close button ...
var SmartJS_ModalBox_vAlign = 'top'; 										// vAlign: 'top' or 'middle' / 'center'
var SmartJS_ModalBox_DelayOpen = 850;										// modal open delay (500 ... 1000) ; default is 750
var SmartJS_ModalBox_DelayClose = 500;										// modal close delay (250 ... 750) ; default is 500
var SmartJS_ModalBox_CssOverlayBgColor = '#333333';							// modal overlay bg color #hexhex
var SmartJS_ModalBox_CssOverlayOpacity = '0.85'; 							// modal overlay bg opacity
//--

//===========================================

var SmartJS_ModalBox = new function() { // START CLASS :: v.20190911

// :: static

var _class = this; // self referencing

//-- private settings, access only as readonly or use get/set functions
this.iFBoxStatus = '';			// hold the status: '' | 'visible'
this.iFBoxRefreshState = 0; 	// if=1, will refresh parent
this.iFBoxRefreshURL = ''; 		// ^=1 -> if != '' will redirect parent
//-- registry
this.iFBoxProtect = 0;			// 1 protect ; 0 not protect
this.iFBoxWidth = 320;			// current width
this.iFBoxHeight = 200;			// current height
//--

var version = 'r.20190115';

// [PUBLIC]
this.getName = function() {
	//--
	return 'smart__iFModalBox__iFrame';
	//--
} //END FUNCTION

// [PUBLIC]
this.getStatus = function() {
	//--
	return String(_class.iFBoxStatus);
	//--
} //END FUNCTION

// [PUBLIC]
this.setRefreshParent = function(state, yURL) {
	//--
	if((typeof yURL == 'undefined') || (yURL == 'undefined') || (yURL == null)) {
		yURL = '';
	} //end if
	//--
	if(state) {
		_class.iFBoxRefreshState = 1;
		_class.iFBoxRefreshURL = yURL;
	} else {
		_class.iFBoxRefreshState = 0;
		_class.iFBoxRefreshURL = '';
	} //end if else
	//--
} //END FUNCTION

// [PUBLIC]
this.Refresh_SET_iFrame_Parent = function(yURL) {
	//--
	if((typeof yURL == 'undefined') || (yURL == 'undefined') || (yURL == null)) {
		yURL = '';
	} //end if
	//--
	_class.iFBoxRefreshState = 1;
	_class.iFBoxRefreshURL = String(yURL);
	//--
} //END FUNCTION

// [PUBLIC]
this.make_Visible = function() {
	//--
	jQuery('#smart__iFModalBox__X').css({
		'visibility': 'visible'
	});
	//--
	jQuery('#smart__iFModalBox__iFrame').css({
		'background-color': '#FFFFFF',
		'visibility': 'visible' // BugFix: we use opacity to hide/show iFrame because some bug in browsers if the iframe is hidden while loading
	});
	jQuery('#smart__iFModalBox__Ldr').empty().html('');
	//--
	return false;
	//--
} //END FUNCTION

// [PUBLIC]
this.go_Load = function(yURL, yProtect, windowWidth, windowHeight) {
	//--
	do_load(yURL, yProtect, windowWidth, windowHeight);
	//--
	return false;
	//--
} //END FUNCTION

// [PUBLIC]
this.go_UnLoad = function() {
	//--
	var test_unload = true;
	try {
		test_unload = _class.on_Before_Unload();
	} catch(e) {}
	if(!test_unload) {
		return false; // this is like onbeforeunload
	} //end if
	//--
	do_unload();
	//--
	var closeDelay = parseInt(SmartJS_ModalBox_DelayClose);
	if(!SmartJS_CoreUtils.isFiniteNumber(closeDelay)) {
		closeDelay = 500; // default
	} //end if
	if(closeDelay < 250) {
		closeDelay = 250;
	} //end if
	if(closeDelay > 750) {
		closeDelay = 750;
	} //end if
	//--
	setTimeout(function(){ SmartJS_ModalBox.fx_Unload(); }, closeDelay); // delayed close
	//--
	return false;
	//--
} //END FUNCTION

// [PUBLIC]
this.fx_Unload = function() {
	//--
	fx_out();
	//--
	return false;
	//--
} //END FUNCTION

//================================== # [PRIVATES]

var RefreshEXEC_Self = function() {
	//--
	if(_class.iFBoxRefreshState) {
		//--
		if((typeof _class.iFBoxRefreshURL == 'undefined') || (_class.iFBoxRefreshURL === undefined) || (_class.iFBoxRefreshURL == '')) {
			//--
			//self . location . reload(false); // false is to reload from cache
			self.location = self.location; // FIX: avoid reload to resend POST vars !!
			//--
		} else {
			//--
			self.location = String(_class.iFBoxRefreshURL);
			//--
		} //end if else
		//--
		_class.iFBoxRefreshState = 0;
		_class.iFBoxRefreshURL = '';
		//--
	} //end if
	//--
} //END FUNCTION

var get_Window_Width = function(windowWidth) {
	//--
	windowWidth = parseInt(windowWidth);
	//--
	if((windowWidth <= 0) || !SmartJS_CoreUtils.isFiniteNumber(windowWidth)) {
		//--
		windowWidth = parseInt(parseInt(jQuery(window).width()) - 40);
		//--
		if(!SmartJS_CoreUtils.isFiniteNumber(windowWidth)) {
			windowWidth = 920; // just in case
		} //end if
		//--
	} //end if
	//--
	if(windowWidth < 200) {
		windowWidth = 200;
	} //end if
	//--
	return windowWidth;
	//--
} //END FUNCTION

var get_Window_Height = function(windowHeight) {
	//--
	windowHeight = parseInt(windowHeight);
	//--
	if((windowHeight <= 0) || !SmartJS_CoreUtils.isFiniteNumber(windowHeight)) {
		//--
		windowHeight = parseInt(parseInt(jQuery(window).height()) - 20);
		//--
		if(!SmartJS_CoreUtils.isFiniteNumber(windowHeight)) {
			windowHeight = 700; // just in case
		} //end if
		//--
	} //end if
	//--
	if(windowHeight < 100) {
		windowHeight = 100;
	} //end if
	//--
	return windowHeight;
	//--
} //END FUNCTION

var do_load = function(yURL, yProtect, windowWidth, windowHeight) {
	//-- register
	_class.iFBoxStatus = 'visible';
	_class.iFBoxProtect = yProtect ? 1 : 0;
	_class.iFBoxWidth = windowWidth;
	_class.iFBoxHeight = windowHeight;
	//-- disable parent scrolling
	jQuery('body').css({
		'overflow': 'hidden' // need to be hidden
	});
	//-- show loading
	jQuery('#smart__iFModalBox__Ldr').empty();
	if(SmartJS_ModalBox_LoaderImg) {
		jQuery('#smart__iFModalBox__Ldr').html('<br><br><img src="' + SmartJS_CoreUtils.escape_html(SmartJS_ModalBox_LoaderImg) + '" alt="..." title="...">');
	} //end if
	//-- init display
	fx_in(_class.iFBoxProtect, _class.iFBoxWidth, _class.iFBoxHeight);
	//-- force no-cache and fix a bug if same URL as parent
	var UrlTime = new Date().getTime();
	if(yURL.indexOf('?') != -1) {
		yURL += '&smart__iFModalBox__iFrame=' + encodeURIComponent(UrlTime);
	} else {
		yURL += '?smart__iFModalBox__iFrame=' + encodeURIComponent(UrlTime);
	} //end if else
	//--
	jQuery('#smart__iFModalBox__iFrame').show().css({
		'width': '100%',
		'height': '100%',
		'visibility': 'hidden' // BugFix: we use opacity to hide/show iFrame because some bug in browsers if the iframe is hidden while loading
	}).attr('src', String(yURL));
	//--
	var the_closebtn = '';
	if(SmartJS_ModalBox_CloseBtnAltHtml === '') {
		the_closebtn = '<img id="ifrm-close" src="' + SmartJS_CoreUtils.escape_html(SmartJS_ModalBox_CloseImg) + '" alt="[X]" title="[X]">';
	} else {
		the_closebtn = String(SmartJS_ModalBox_CloseBtnAltHtml);
	} //end if else
	//--
	var the_align_left = 'auto';
	var the_align_right = 'auto';
	if(SmartJS_ModalBox_CloseAlign == 'left') {
		the_align_left = '-20px'; // left
	} else { // right
		the_align_right = '-20px'; // right
	} //end if else
	//--
	jQuery('#smart__iFModalBox__X').show().css({
		'position': 'absolute',
		'z-index': 2111111099, //9999999,
		'cursor': 'pointer',
		'top': '-12px',
		'left': the_align_left,
		'right': the_align_right,
		'min-width': '32px',
		'max-width': '64px',
		'min-height': '32px',
		'max-height': '64px',
		'visibility': 'hidden'
	}).empty().html(the_closebtn).click(function(){
		_class.go_UnLoad();
	});
	//--
	if(yProtect != 1) {
		jQuery('#smart__iFModalBox__Bg').click(function(){
			_class.go_UnLoad();
		});
	} else {
		jQuery('#smart__iFModalBox__Bg').unbind('click');
	} //end if
	//-- show delayed
	var openDelay = parseInt(SmartJS_ModalBox_DelayOpen);
	if(!SmartJS_CoreUtils.isFiniteNumber(openDelay)) {
		openDelay = 750; // default
	} //end if
	if(openDelay < 500) {
		openDelay = 500;
	} //end if
	if(openDelay > 1000) {
		openDelay = 1000;
	} //end if
	setTimeout(function(){ SmartJS_ModalBox.make_Visible(); }, openDelay); // delay a bit to avoid show a blank area
	//--
	return false;
	//--
} //END FUNCTION

var do_unload = function() {
	//--
	jQuery('#smart__iFModalBox__Bg').unbind('click');
	jQuery('#smart__iFModalBox__X').unbind('click');
	jQuery('#smart__iFModalBox__Ldr').empty().html('');
	//--
	var the_align_left = 'auto';
	var the_align_right = 'auto';
	if(SmartJS_ModalBox_CloseAlign == 'left') {
		the_align_left = '0px'; // left
	} else { // right
		the_align_right = '0px'; // right
	} //end if else
	//--
	jQuery('#smart__iFModalBox__X').css({
		'position': 'absolute',
		'width': '1px',
		'height': '1px',
		'left': the_align_left,
		'right': the_align_right,
		'top': '0px',
	}).empty().html('').hide();
	//--
	jQuery('#smart__iFModalBox__iFrame').css({
		'width': '1px',
		'height': '1px'
	});
	if(SmartJS_ModalBox_LoaderBlank) {
		jQuery('#smart__iFModalBox__iFrame').attr('src', SmartJS_CoreUtils.escape_html(SmartJS_ModalBox_LoaderBlank)); // force unload
	} //end if
	jQuery('#smart__iFModalBox__iFrame').attr('src', '').hide();
	//--
	jQuery('#smart__iFModalBox__Div').css({
		'position': 'absolute',
		'width': '1px',
		'height': '1px',
		'left': '0px',
		'top': '0px'
	}).hide();
	//-- restore parent scrolling
	jQuery('body').css({
		'overflow': 'auto' // need to be 'auto' instead 'visible' to work with IE
	});
	//--
	_class.iFBoxStatus = '';
	//--
	return false;
	//--
} //END FUNCTION

var fx_in = function(yProtect, windowWidth, windowHeight) {
	//--
	var the_wWidth = get_Window_Width(windowWidth);
	var the_wHeight = get_Window_Height(windowHeight);
	//--
	var the_wRealWidth = get_Window_Width(0);
	if(the_wRealWidth < windowWidth) {
		the_wWidth = the_wRealWidth;
	} //end if
	var the_wRealHeight = get_Window_Height(0);
	if(the_wRealHeight < windowHeight) {
		the_wHeight = the_wRealHeight;
	} //end if
	//--
	var the_style_cursor = 'auto';
	if(yProtect != 1) {
		the_style_cursor = 'pointer';
	} //end if
	jQuery('#smart__iFModalBox__Bg').css({
		'position': 'fixed',
		'z-index': 2111111097, //9999997,
		'cursor': the_style_cursor,
		'text-align': 'center',
		'left': '0px',
		'top': '0px',
		'width': '100%',
		'height': '100%',
	}).show();
	//--
	fx_position(the_wWidth, the_wHeight);
	//--
	//window.onresize = function () { // called when the window is resized
	//	fx_in(yProtect, windowWidth, windowHeight);
	//} //end function
	//--
	return false;
	//--
} //END FUNCTION

var fx_out = function() {
	//--
	//window.onresize = function () { // clear window resize
	//} //end function
	//--
	jQuery('#smart__iFModalBox__Div').css({
		'position': 'absolute',
		'width': '1px',
		'height': '1px',
		'left': '0px',
		'top': '0px'
	}).hide();
	//--
	jQuery('#smart__iFModalBox__Bg').css({
		'position': 'absolute',
		'width': '1px',
		'height': '1px',
		'left': '0px',
		'top': '0px'
	}).hide();
	//--
	RefreshEXEC_Self(); // {{{SYNC-MODAL-Refresh-Parent-By-EXEC}}}
	//--
	return false;
	//--
} //END FUNCTION

var fx_position = function(windowWidth, windowHeight) {
	//--
	var the_h_align = parseInt(parseInt(jQuery(window).scrollLeft()) + ((parseInt(jQuery(window).width()) - windowWidth) / 2)) + 'px';
	var the_v_align = parseInt(parseInt(jQuery(window).scrollTop()) + 10) + 'px';
	if((SmartJS_ModalBox_vAlign == 'center') || (SmartJS_ModalBox_vAlign == 'middle')) {
		the_v_align = parseInt((parseInt(jQuery(window).scrollTop()) + ((parseInt(jQuery(window).height()) - windowHeight) / 2))) + 'px';
	} //end if else
	//--
	jQuery('#smart__iFModalBox__Div').css({
		'position': 'absolute',
		'z-index': 2111111098, //9999998,
		'text-align': 'center',
		'left': the_h_align,
		'top': the_v_align,
		'width': windowWidth + 'px',
		'height': windowHeight + 'px'
	}).show();
	//--
} //END FUNCTION

//== ALL BELOW ARE EXTERNAL HANDLERS THAT CAN BE REDEFINED PER INSTANCE

//--
this.on_Before_Unload = function() {
	//--
	return true; // execute code onUnload and must return true if do unload or false to prevent unload
	//--
} //END FUNCTION
//--

//== ALL BELOW ARE EVENT HANDLERS AND DOM REGISTERS

//--
jQuery(function() {
	//--
	jQuery('body').append('<div id="smart__iFModalBox__Bg" data-info-smartframework="SmartJS.Modal.Loader: ' + SmartJS_CoreUtils.escape_html(version) + '" style="background-color:' + SmartJS_CoreUtils.escape_html(SmartJS_ModalBox_CssOverlayBgColor) + '; position:absolute; top:0px; left:0px; width:1px; height:1px; opacity: ' + SmartJS_CoreUtils.escape_html(SmartJS_ModalBox_CssOverlayOpacity) + ';"></div><div id="smart__iFModalBox__Div" style="position:absolute; top:0px; left:0px; width:1px; height:1px;"><div id="smart__iFModalBox__Ldr" align="center"></div><div id="smart__iFModalBox__X" title="[X]"></div><iframe name="smart__iFModalBox__iFrame" id="smart__iFModalBox__iFrame" width="1" height="1" scrolling="auto" src="" marginwidth="5" marginheight="5" hspace="0" vspace="0" frameborder="0"></iframe></div><!-- END: SmartJS.Modal.Loader -->');
	SmartJS_ModalBox.fx_Unload();
	//--
	jQuery(window).on('resize scroll', function(ev) {
		if(SmartJS_ModalBox.iFBoxStatus === 'visible') {
			//console.log('Resizing the iFrmodalBox by Window event: Resize or Scroll');
			fx_in(SmartJS_ModalBox.iFBoxProtect, SmartJS_ModalBox.iFBoxWidth, SmartJS_ModalBox.iFBoxHeight);
		} //end if
	});
	//--
}); // end on document ready
//--

//==

} //END CLASS

//===========================================

//==================================================================
//==================================================================

// #END

// ############### browser_utils.js

// [LIB - Smart.Framework / JS / Browser Utils]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: jQuery, jQuery.Gritter, jQuery.alertable, SmartJS_CoreUtils, SmartJS_CryptoHash
// OPTIONAL-DEPENDS: SmartJS_ModalBox, SmartSimpleDialog, SmartJS_BrowserUIUtils

//==================================================================
//==================================================================

//================== [OK:evcode]

//-- setup (can be changed after loading this script)
var SmartJS_BrowserUtils_Notifications = 'growl'; // growl | dialog (default notification to be used)
var SmartJS_BrowserUtils_NotifyLoadError = false; // if set to false will not raise notifications on ajax load errors: true | false
var SmartJS_BrowserUtils_Use_iFModalBox_Active = 0;
var SmartJS_BrowserUtils_Use_iFModalBox_Protection = 0;
var SmartJS_BrowserUtils_PopUp_ShowToolBar = 0;
var SmartJS_BrowserUtils_FullScreen_Img = 'lib/js/framework/img/fullscreen-on.svg';
var SmartJS_BrowserUtils_Cloner_Img_Add = 'lib/js/framework/img/clone-insert.svg';
var SmartJS_BrowserUtils_Cloner_Img_Remove = 'lib/js/framework/img/clone-remove.svg';
var SmartJS_BrowserUtils_LoaderImg = 'lib/js/framework/img/loading.svg';
var SmartJS_BrowserUtils_LoaderHtml = 'lib/js/framework/loading.html';
var SmartJS_BrowserUtils_ImgOK = 'lib/framework/img/sign-info.svg';
var SmartJS_BrowserUtils_ImgWarn = 'lib/framework/img/sign-warn.svg';
var SmartJS_BrowserUtils_DefaultCloseDelayedTimeout = 750;
var SmartJS_BrowserUtils_Time_Notification_OK = 1000;
var SmartJS_BrowserUtils_Time_Notification_ERR = 3000;
var SmartJS_BrowserUtils_Time_Delay_Redirect = 1500;
var SmartJS_BrowserUtils_Overlay_BgColor = '#777777';
var SmartJS_BrowserUtils_Overlay_Opacity = 0.85;
var SmartJS_BrowserUtils_LanguageId = 'en';
var SmartJS_BrowserUtils_CookieDomain = '';
var SmartJS_BrowserUtils_CookieName = '';
var SmartJS_BrowserUtils_TemplatePath = 'etc/templates/default/';
//--

//-- privates (don't touch them if you don't want to see weird things ...)
var SmartJS_BrowserUtils_PageAway = false;		// by default the PageAway confirm is set to false
var SmartJS_BrowserUtils_PopUpWindow = null; 	// this holds the pop-up window reference, we don't want to open new popups each time, so we use it if exists and just focus it (identified by window.name / target.name)
var SmartJS_BrowserUtils_RefreshState = 0; 		// if=1, will refresh parent
var SmartJS_BrowserUtils_RefreshURL = ''; 		// ^=1 -> if != '' will redirect parent
var SmartJS_BrowserUtils_CurrentForm = null;	// this holds the current form to submit reference
//--

/**
* CLASS :: Browser Utils
*
* @class SmartJS_BrowserUtils
* @static
*
* @module Smart.Framework/JS/Browser
*/
var SmartJS_BrowserUtils = new function() { // START CLASS :: v.20190527

// :: static

var _class = this; // self referencing


/**
 * Detect if a Browser Window is iFrame
 *
 * @method WindowIsiFrame
 * @static
 * @return 	{Boolean} 							TRUE if iFrame, FALSE if not
 */
this.WindowIsiFrame = function() {
	//--
	if(window.self !== window.top) {
		return true; // is iframe
	} else {
		return false; // not an iframe
	} //end if else
	//--
} //END FUNCTION


/**
 * Detect if a Browser Window is PopUp
 *
 * @method WindowIsPopup
 * @static
 * @return 	{Boolean} 							TRUE if PopUp, FALSE if not
 */
this.WindowIsPopup = function() {
	//--
	if(window.opener) {
		return true; // is popup
	} else {
		return false; // not an popup
	} //end if else
	//--
} //END FUNCTION


/**
 * Parse Current URL to extract GET Params 		Ex: http(s)://some.url/?param1=value1&param2=value%202
 *
 * @method parseCurrentUrlGetParams
 * @static
 * @return 	{Object} 							{ param1:'value1', param1:'value 2', ... }
 */
this.parseCurrentUrlGetParams = function() {
	//--
	var result = {};
	//--
	if(!location.search) {
		return result; // Object
	} //end if
	var query = String(location.search.substr(1)); // get: 'param1=value1&param2=value%202' from '?param1=value1&param2=value%202'
	if(!query) {
		return result; // Object
	} //end if
	//--
	query.split('&').forEach(function(part) {
		var item = '';
		part = String(part);
		if(part) {
			item = part.split('=');
			result[String(item[0])] = String(decodeURIComponent(String(item[1])));
		} //end if
	});
	//--
	return result; // Object
	//--
} //END FUNCTION


/**
 * Print current Browser Page
 *
 * @method PrintPage
 * @static
 */
this.PrintPage = function() {
	//--
	try {
		self.print();
	} catch(err){
		console.warn('Printing Check N/A: ' + err);
		var warnMsg = 'WARNING: Printing may not be available in your browser';
		if(jQuery.alertable) {
			jQuery.alertable.alert(warnMsg).always(function(){});
		} else {
			alert(warnMsg);
		} //end if else
	} //end try catch
	//--
} //END FUNCTION


/**
 * Count Down handler that bind to a HTML Element
 *
 * @method CountDown
 * @static
 * @param 	{Integer} 	counter 	The countdown counter
 * @param 	{String} 	elID 		The HTML Element ID to bind to
 * @param 	{JS-Code} 	evcode 		*Optional* the JS Code to execute on countdown complete (to zero)
 */
this.CountDown = function(counter, elID, evcode) {
	//--
	if((typeof counter != 'undefined') && (counter != '') && (counter !== '') && (counter != null)) {
		//--
		counter = parseInt(counter);
		if(!SmartJS_CoreUtils.isFiniteNumber(counter)) {
			counter = 1;
		} //end if
		//--
		var cdwn = setInterval(function() {
			//--
			if(counter > 0) {
				//--
				counter = counter - 1;
				//--
				if((typeof elID != 'undefined') && (elID != '') && (elID !== '') && (elID != null)) {
					jQuery('#' + elID).text(counter);
				} //end if
				//--
			} else {
				//--
				clearInterval(cdwn);
				//--
				if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
					try {
						if(typeof evcode === 'function') {
							evcode(counter, elID); // call
						} else {
							eval('(function(){ ' + evcode + ' })();'); // sandbox
						} //end if else
					} catch(err) {
						console.error('ERROR: JS-Eval Error on Browser CountDown Function' + '\nDetails: ' + err);
					} //end try catch
				} //end if
				//--
			} //end if
			//--
		}, 1000);
		//--
	} //end if
	//--
} //END FUNCTION


/**
 * Page Away control handler
 *
 * @method PageAwayControl
 * @static
 * @param 	{String} 	the_question 	The Question to confirm for navigate away this page
 */
this.PageAwayControl = function(the_question) {
	//--
	if((typeof the_question == 'undefined') || (the_question == null) || (the_question == '')) {
		the_question = 'Confirm leaving this page ... ?';
	} //end if
	//--
	window.onbeforeunload = function(e) {
		e = e || window.event;
		if(SmartJS_BrowserUtils_PageAway != true) {
			e.preventDefault();
			return String(the_question);
		} //end if
	} //END FUNCTION
	//--
	window.onunload = function () {
		SmartJS_BrowserUtils_PageAway = true;
	} //END FUNCTION
	//--
	if(_class.WindowIsiFrame() === true) { // try to set only if iframe
		try {
			if(typeof parent.SmartJS_ModalBox != 'undefined') {
				parent.SmartJS_ModalBox.on_Before_Unload = function() {
					if(SmartJS_BrowserUtils_PageAway != true) {
						var is_exit = confirm(String(the_question)); // true or false
						if(is_exit) {
							SmartJS_BrowserUtils_PageAway = true;
						} //end if
						return is_exit;
					} else {
						return true;
					} //end if else
				} //end function
			} //end if
		} catch (err) {
			console.error('NOTICE: BrowserUtils Failed to Set BeforeUnload PageAway on ModalBox: ' + err);
		} //end try catch
	} //end if
	//--
} //END FUNCTION


/**
 * Redirect to URL current browser window
 *
 * @method RedirectToURL
 * @static
 * @param 	{String} 	yURL 		The URL (relative or absolute) to redirect to ; if = @ (will just autorefresh the page)
 */
this.RedirectToURL = function(yURL) {
	//--
	if((typeof yURL != 'undefined') && (yURL != '') && (yURL !== null)) {
		SmartJS_BrowserUtils_PageAway = true;
		if(yURL === '@') {
			self.location = self.location; // avoid re-post vars
		} else {
			self.location = String(yURL);
		} //end if else
	} else {
		console.error('NOTICE: Invalid URL to Redirect ... (Browser Utils)');
	} //end if else
	//--
} //END FUNCTION


/**
 * Delayed Redirect to URL current browser window
 *
 * @method RedirectDelayedToURL
 * @static
 * @param 	{String} 	yURL 		The URL (relative or absolute) to redirect to
 * @param 	{Integer} 	ytime 		The time delay in milliseconds
 */
this.RedirectDelayedToURL = function(yURL, ytime) {
	//--
	setTimeout(function(){ SmartJS_BrowserUtils.RedirectToURL(yURL); }, ytime);
	//--
} //END FUNCTION


/**
 * Redirect to URL parent browser window
 *
 * @method RedirectParent
 * @static
 * @param 	{String} 	yURL 			The URL (relative or absolute) to redirect to
 */
this.RedirectParent = function(yURL) {
	//--
	if((typeof yURL == 'undefined') || (yURL == null) || (yURL == '')) {
		console.error('WARNING: Parent Redirection to Empty URL is not allowed !');
		return;
	} //end if
	//--
	if(_class.WindowIsPopup() === true) { // when called from PopUp
		try {
			window.opener.location = yURL;
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Redirect Parent from PopUp: ' + err);
		} //end try catch
	} else if(_class.WindowIsiFrame() === true) { // when called from iFrame
		try {
			parent.location = yURL;
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Redirect Parent from ModalBox: ' + err);
		} //end try catch
	} //end if else
	//--
} //END FUNCTION


/**
 * Lazy Refresh parent browser window or Lazy redirect parent window to another URL.
 * This method is different than RedirectParent() because will be executed just after the child (modal iFrame / PopUp) is closed.
 * It will just trigger a lazy refresh on parent that will be executed later, after closing current child window.
 *
 * @method RefreshParent
 * @static
 * @param 	{String} 	yURL 			*Optional* The URL (relative or absolute) to redirect to ; if this parameter is not specified will just reload the parent window with the same URL
 */
this.RefreshParent = function(yURL) {
	//--
	if(_class.WindowIsPopup() === true) { // when called from PopUp
		Refresh_SET_Popup_Parent(yURL); // catched errors indide
	} else if(_class.WindowIsiFrame() === true) { // when called from iFrame
		try {
			if(self.name) {
				if(typeof parent.SmartJS_ModalBox != 'undefined') {
					if(self.name === parent.SmartJS_ModalBox.getName()) {
						//console.log('ModalBox Set Refresh Parent: ' + self.name);
						parent.SmartJS_ModalBox.Refresh_SET_iFrame_Parent(yURL);
					} //end if
				} //end if
			} //end if
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Refresh Parent from ModalBox: ' + err);
		} //end try catch
	} //end if else
	//--
} //END FUNCTION


/**
 * Close a Modal / PopUp child browser window.
 * If a parent refresh is pending will execute it after.
 * This is the prefered way to close a child window (modal iFrame / PopUp) using a button or just executing this code in a child page.
 *
 * @method CloseModalPopUp
 * @static
 */
this.CloseModalPopUp = function() {
	//--
	if(_class.WindowIsPopup() === true) { // when called from PopUp
		//if(SmartJS_BrowserUtils_PageAway !== true) { // this was not functioning as expected because this is changed after firing the close button
		Refresh_EXEC_Popup_Parent(); // this is no more necessary as it is fired directly by close monitor {{{SYNC-POPUP-Refresh-Parent-By-EXEC}}} ; err is catched inside ; this is required for the situation that popup is created manually with window.open NOT by using the init_PopUp() in this class
		try {
			self.close(); // this may fail if window reference with parent is lost, needs try/catch
		} catch(err){}
		//} //end if
	} else if(_class.WindowIsiFrame() === true) { // when called from iFrame
		try {
			if(self.name) {
				if(typeof parent.SmartJS_ModalBox != 'undefined') {
					if(self.name === parent.SmartJS_ModalBox.getName()) {
						parent.SmartJS_ModalBox.go_UnLoad(); // {{{SYNC-MODAL-Refresh-Parent-By-EXEC}}}
					} //end if
				} //end if
			} //end if
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Close/Unload ModalBox: ' + err);
		} //end try catch
	} else { // if a popup lost parent reference or a manual opened link
		try {
			//console.log('Orphan Window ...');
			self.close(); // this may fail if window reference with parent is lost, needs try/catch
		} catch(err){}
	} //end if else
	//--
} //END FUNCTION


/**
 * Delayed Close a Modal / PopUp child browser window.
 * If a parent refresh is pending will execute it after.
 * This is the prefered way to close a child window (modal iFrame / PopUp) using a button or just executing this code in a child page.
 *
 * @method CloseDelayedModalPopUp
 * @static
 * @param 	{Integer} 	timeout 		The time delay in milliseconds ; If is NULL or 0 (zero) will use the default timeout
 */
this.CloseDelayedModalPopUp = function(timeout) {
	//--
	if((typeof timeout == 'undefined') || (timeout == null)) {
		timeout = SmartJS_BrowserUtils_DefaultCloseDelayedTimeout;
	} //end if
	//--
	timeout = parseInt(timeout);
	if(!SmartJS_CoreUtils.isFiniteNumber(timeout)) {
		timeout = 750; // default 0.75 sec.
	} //end if
	if(timeout < 100) {
		timeout = 100; // min 0.1 sec.
	} //end if
	if(timeout > 60000) {
		timeout = 60000; // max 60 sec.
	} //end if
	//--
	setTimeout(function(){ SmartJS_BrowserUtils_PageAway = true; SmartJS_BrowserUtils.CloseModalPopUp(); }, timeout);
	//--
} //END FUNCTION


/*
 * Prevent Modal Cascading overload in browser.
 * If set will use a Popup instead opening a modal iFrame child from another modal iFrame.
 * This will prevent some browser limitations with nested modal iFrames.
 *
 * @private : internal development only
 * @method Control_ModalCascading
 * @static
 */
this.Control_ModalCascading = function() {
	//--
	try {
		//--
		if(typeof SmartJS_ModalBox != 'undefined') {
			if(self.name) {
				if(self.name == SmartJS_ModalBox.getName()) {
					SmartJS_BrowserUtils_Use_iFModalBox_Active = 0; // disable modal in modal, if so will force popup
				} //end if else
			} //end if
		} //end if
		//--
	} catch(err){
		console.error('NOTICE: BrowserUtils Failed to control ModalCascading / Self: ' + err);
	} //end try catch
	//--
	try {
		//--
		if(typeof parent.SmartJS_ModalBox != 'undefined') {
			if(parent.name) {
				if(parent.name == parent.SmartJS_ModalBox.getName()) {
					SmartJS_BrowserUtils_Use_iFModalBox_Active = 0; // disable modal in modal, if so will force popup
				} //end if else
			} //end if
		} //end if
		//--
	} catch(err){
		console.error('NOTICE: BrowserUtils Failed to control ModalCascading / Parent: ' + err);
	} //end try catch
	//--
} //END FUNCTION


/**
 * Focus a browser window by reference
 *
 * @method windowFocus
 * @static
 * @param 	{Object} 	wnd 		The window (reference) object
 */
this.windowFocus = function(wnd) {
	//--
	try {
		wnd.focus(); // focus the window (this may fail if window reference with parent is lost, needs try/catch)
	} catch(err){} // older browsers have some bugs, ex: IE8 on IETester
	//--
} //END FUNCTION


/**
 * Scroll down a browser window by reference.
 * It will focus the referenced browser window first.
 *
 * @method windwScrollDown
 * @static
 * @param 	{Object} 	wnd 		The window (reference) object
 * @param 	{Integer} 	offset 		The offset in pixels to scroll down
 */
this.windwScrollDown = function(wnd, offset) {
	//--
	try {
		wnd.scrollBy(0, parseInt(offset)); // if offset is -1 will go to end
	} catch(err){} // just in case
	//--
} //END FUNCTION


/**
 * Get the highest available Z-Index from a browser page taking in account all visible layers (div).
 * It will ignore non-visible layers for speed-up, as they have anyway no Z-Index assigned.
 *
 * @method getHighestZIndex
 * @static
 * @return 	{Integer} 							The highest available Z-Index from current page
 */
this.getHighestZIndex = function() {
	//-- inits
	var index_highest = 1;
	var index_current = 1;
	//--
	// var position;
	//--
	jQuery('div').each(function(){ // this will scan just divs to be efficient
		//position = jQuery(this).css("position");
		//if(position === "absolute" || position === "relative" || position === "fixed") {
		if((jQuery(this).css('display') == 'none') || (jQuery(this).css('visibility') == 'hidden') || (jQuery(this).attr('id') == 'SmartFramework___Debug_InfoBar')) {
			// skip
		} else {
			index_current = parseInt(jQuery(this).css("z-index"), 10);
			if((SmartJS_CoreUtils.isFiniteNumber(index_current)) && (index_current > 0)) {
				if(index_current > index_highest) {
					index_highest = index_current;
				} //end if
			} //end if
		} //end if else
		//} //end if
	});
	index_highest += 1;
	//console.log('Using Highest Z-INDEX: ' + index_highest);
	//--
	return index_highest;
	//--
} //END FUNCTION


/**
 * Display a page overlay in the current browser window
 * The ZIndex of the overlay is: 2147400000
 * All page elements that must be visible over this overlay must have zIndex in range: 2147401000 - 214740999
 *
 * @method Overlay_Show
 * @static
 * @param 	{String} 	text 			*Optional* a text to display in overlay as notification
 * @param 	{String} 	title 			*Optional* a title to display for overlay as notification
 * @param 	{String} 	class_name 		*Optional* a CSS class name for the notification (if any)
 * @return 	{Object} 					The overlay as HTML object
 */
this.Overlay_Show = function(text, title, class_name) {
	//--
	if((typeof text == 'undefined') || (text == null)) {
		text = '';
	} //end if
	if((typeof title == 'undefined') || (title == null)) {
		title = '';
	} //end if
	if((typeof class_name == 'undefined') || (class_name == null)) {
		class_name = 'gritter-neutral';
	} //end if
	//--
	var the_style = 'style="display: none; background-color:' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUtils_Overlay_BgColor) + '; opacity: ' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUtils_Overlay_Opacity) + '; position: fixed; top: -50px; left: -50px; width: 1px; height: 1px;"';
	if(typeof SmartJS_BrowserUIUtils != 'undefined') {
		if((typeof SmartJS_BrowserUIUtils.overlayCssClass != 'undefined') && (SmartJS_BrowserUIUtils.overlayCssClass != null) && (SmartJS_BrowserUIUtils.overlayCssClass != '')) {
			the_style = 'class="' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUIUtils.overlayCssClass) + '"'; // integrate with UI's Overlay
		} //end if
	} //end if
	//--
	var have_gritter = true;
	if(typeof jQuery.gritter == 'undefined') {
		have_gritter = false;
	} //end if
	//--
	var inner_html = '<img src="' + SmartJS_BrowserUtils_LoaderImg + '" alt="... loading ..." style="background:transparent!important;color:#555555!important;opacity:1!important;">';
	if(have_gritter !== true) {
		inner_html = inner_html + '<div>' + '<h1>' + title + '</h1>' + '<div>' + text + '</div>' + '</div>';
	} //end if else
	jQuery('#smart_framework_overlay').remove(); // remove any instance if previous exist
	var overlay = jQuery('<div id="smart_framework_overlay" ' + the_style + '></div>').css({ 'z-index': 2147400000, 'position': 'fixed', 'top': '0px', 'left': '0px', 'width': '100%', 'height': '100%' }).hide().appendTo('body');
	jQuery('#smart_framework_overlay').html('<div style="width:100%; position:fixed; top:25px; left:0px;"><div align="center">' + inner_html + '</div></div>');
	//--
	try {
		overlay.fadeIn();
	} catch(err){
		//console.error('Overlay Failed to FadeIn: ' + err);
		overlay.show();
	} //end try catch
	//--
	if((text != '') || (title != '')) {
		if(have_gritter === true) {
			GrowlNotificationDoAdd(title, text, '', 500, false, class_name);
		} //end if else
	} //end if else
	//--
	return overlay;
	//--
} //END FUNCTION


/**
 * Clear all notifications from the page overlay in the current browser window
 *
 * @method Overlay_Clear
 * @static
 */
this.Overlay_Clear = function() {
	//--
	jQuery('#smart_framework_overlay').html('');
	//--
} //END FUNCTION


/**
 * Hide (destroy) the page overlay in the current browser window
 *
 * @method Overlay_Hide
 * @static
 */
this.Overlay_Hide = function() {
	//--
	var overlay = jQuery('#smart_framework_overlay');
	//--
	try {
		overlay.fadeOut();
	} catch(err){
		//console.error('Overlay Failed to FadeOut: ' + err);
		overlay.hide();
	} //end try catch
	//--
	overlay.css({ 'z-index': 1, 'position': 'fixed', 'top': '-50px', 'left': '-50px', 'width': 1, 'height': 1 }).remove(); // remove the instance
	//--
} //END FUNCTION


/**
 * Add a Growl notification in the current browser window (page)
 *
 * @method GrowlNotificationAdd
 * @static
 * @param 	{String} 	title 			a title for the notification (HTML) ; it can be empty string
 * @param 	{String} 	text 			the main notification message (HTML) ; this is mandatory
 * @param 	{String} 	image 			the URL link to a notification icon image (gif/png/jpg) or null
 * @param 	{Integer} 	time 			the notification display time in milliseconds
 * @param 	{Boolean} 	sticky 			*Optional* FALSE by default (will auto-close after the display time expire) ; TRUE to set sticky (require manual close, will not auto-close)
 * @param 	{String} 	class_name 		*Optional* a CSS class name for the notification or empty string to use default one
 * @param 	{Object} 	options 		*Optional* can map handlers for notification: before_open, after_open, before_close, after_close
 * @return 	{Object} 					The growl notification as HTML object
 */
this.GrowlNotificationAdd = function(title, text, image, time, sticky, class_name, options) {
	//--
	if((typeof text == 'undefined') || (text == null) || (text == '')) {
		text = ' '; // fix
	} //end if
	//--
	return GrowlNotificationDoAdd(title, text, image, time, sticky, class_name, options);
	//--
} //END FUNCTION


/**
 * Remove a Growl Notification by ID from the current browser window (page)
 *
 * @method GrowlNotificationRemove
 * @static
 * @param 	{String} 	id 		The HTML id of the Growl Notification to remove
 */
this.GrowlNotificationRemove = function(id) {
	//--
	GrowlNotificationDoRemove(id);
	//--
} //END FUNCTION


/**
 * Create a Maximize HTML Element wrapper arround a layer (div, iframe, ...).
 * This will add a maximize / un-maximize button and the handler to be able to maximize the element.
 * When the selected element will be maximized the page will be protected by an overlay.
 *
 * @method MaximizeElement
 * @static
 * @param 	{String} 	id 			The HTML id of the HTML element to bind to
 * @param 	{Boolean} 	maximized 	if (default) FALSE the element will not be maximized when bind to this ; if TRUE, element will be auto-maximized when bind to this function
 */
this.MaximizeElement = function(id, maximized) {
	//--
	var el = jQuery('#' + id);
	//--
	if((el.attr('data-fullscreen') == 'default') || (el.attr('data-fullscreen') == 'fullscreen')) {
		return; // avoid apply twice
	} //end if
	//--
	el.attr('data-fullscreen', 'default').append('<div style="position:absolute; top:-4px; left:-4px; width:20px; height: 20px; overflow:hidden; text-align:center; cursor:pointer; opacity:0.5;" title="Toggle Element Full Screen"><img height="20" src="' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUtils_FullScreen_Img) + '"></div>').css({ 'position': 'relative', 'border': '1px solid #DDDDDD', 'z-index': 1 }).click(function() {
		var the_el = jQuery(this);
		if(the_el.attr('data-fullscreen') == 'fullscreen') {
			_class.Overlay_Hide();
			the_el.attr('data-fullscreen', 'default');
			the_el.css({
				'position': 'relative',
				'top': 0,
				'left': 0,
				'width': Math.max(parseInt(the_el.attr('data-width')), 100),
				'height': Math.max(parseInt(the_el.attr('data-height')), 100),
				'z-index': 1
			});
		} else {
			_class.Overlay_Show();
			_class.Overlay_Clear();
			the_el.attr('data-width', String(SmartJS_CoreUtils.escape_html(String(the_el.width()))));
			the_el.attr('data-height', String(SmartJS_CoreUtils.escape_html(String(the_el.height()))));
			the_el.attr('data-fullscreen', 'fullscreen');
			the_el.css({
				'position': 'fixed',
				'top': '7px',
				'left': '7px',
				'width': '99%',
				'height': '98%',
				'z-index': 2147403000
			});
		} //end if else
	});
	//--
	if(maximized === true) {
		el.trigger('click');
	} //end if
	//--
} //END FUNCTION


/**
 * Create a Browser Alert Dialog that will have just the OK button.
 * This will detect if the UIDialog is available and will prefer to use it if set.
 * Otherwise will try to detect if SimpleDialog is available and will use it if UIDialog is not available - fallback.
 * If none of the above are available (not available) will try to use jQuery.alertable/alert else display a simple alert() - fallback.
 *
 * @method alert_Dialog
 * @static
 * @param 	{String} 	y_message 		The message to display (HTML)
 * @param 	{JS-Code} 	evcode 			*Optional* the JS Code to execute on closing this alert / Dialog by pressing the OK button (the alert / Dialog can be closed only if OK button is clicked)
 * @param 	{String} 	y_title 		*Optional* a title for this alert / Dialog (HTML)
 * @param 	{Integer} 	y_width 		*Optional* the width of the Dialog (will be used just if UIDialog / SimpleDialog are detected) ; if not set the default width will be used
 * @param 	{Integer} 	y_height 		*Optional* the height of the Dialog (will be used just if UIDialog / SimpleDialog are detected) ; if not set the default height will be used
 */
this.alert_Dialog = function(y_message, evcode, y_title, y_width, y_height) {
	//--
	if(typeof SmartJS_BrowserUIUtils != 'undefined') { // use UI Dialog (the best choice)
		//--
		SmartJS_BrowserUIUtils.DialogAlert(y_message, evcode, y_title, y_width, y_height);
		//--
	} else if(typeof SmartSimpleDialog != 'undefined') { // use simple dialog
		//--
		SmartSimpleDialog.Dialog_Alert(y_message, evcode, y_title, y_width, y_height);
		//--
	} else { // fallback to alertable or native browser alert
		//--
		y_title = jQuery('<div>' + y_title + '</div>').text(); // strip tags
		y_message = jQuery('<div>' + y_message + '</div>').text(); // strip tags
		//--
		if(jQuery.alertable) {
			jQuery.alertable.alert(y_title + '\n' + y_message).always(function(){ // use always not done to simulate real alert
				if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
					try {
						if(typeof evcode === 'function') {
							evcode(); // call :: sync params dialog-alert
						} else {
							eval('(function(){ ' + evcode + ' })();'); // sandbox
						} //end if else
					} catch(err) {
						console.error('ERROR: JS-Eval Error on Browser DialogAlert Function (1)' + '\nDetails: ' + err);
					} //end try catch
				} //end if
			});
		} else {
			alert(y_title + '\n' + y_message);
			if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
				try {
					if(typeof evcode === 'function') {
						evcode(); // call :: sync params dialog-alert
					} else {
						eval('(function(){ ' + evcode + ' })();'); // sandbox
					} //end if else
				} catch(err) {
					console.error('ERROR: JS-Eval Error on Browser DialogAlert Function (2)' + '\nDetails: ' + err);
				} //end try catch
			} //end if
		} //end if else
		//--
	} //end if else
	//--
} //END FUNCTION


/**
 * Create a Browser Confirm Dialog that will have 2 buttons: OK / Cancel.
 * This will detect if the UIDialog is available and will prefer to use it if set.
 * Otherwise will try to detect if SimpleDialog is available and will use it if UIDialog is not available - fallback.
 * If none of the above are available (not available) will try to use jQuery.alertable/confirm else display a simple confirm() - fallback.
 *
 * @method confirm_Dialog
 * @static
 * @param 	{String} 	y_question 		The question / message to display (HTML)
 * @param 	{JS-Code} 	evcode 			*Optional* the JS Code to execute on closing this confirm / Dialog by pressing the OK button (the confirm / Dialog can be closed by either OK button clicked or Cancel button clicked ; this code will be not executed on Cancel button click / close)
 * @param 	{String} 	y_title 		*Optional* a title for this confirm / Dialog (HTML)
 * @param 	{Integer} 	y_width 		*Optional* the width of the Dialog (will be used just if UIDialog / SimpleDialog are detected) ; if not set the default width will be used
 * @param 	{Integer} 	y_height 		*Optional* the height of the Dialog (will be used just if UIDialog / SimpleDialog are detected) ; if not set the default height will be used
 */
this.confirm_Dialog = function(y_question, evcode, y_title, y_width, y_height) {
	//--
	if(typeof SmartJS_BrowserUIUtils != 'undefined') { // use UI Dialog (the best choice)
		//--
		SmartJS_BrowserUIUtils.DialogConfirm(y_question, evcode, y_title, y_width, y_height);
		//--
	} else if(typeof SmartSimpleDialog != 'undefined') { // use simple dialog
		//--
		SmartSimpleDialog.Dialog_Confirm(y_question, evcode, y_title, y_width, y_height);
		//--
	} else { // fallback to alertable or native browser confirm dialog
		//--
		y_title = jQuery('<div>' + y_title + '</div>').text(); // strip tags
		y_question = jQuery('<div>' + y_question + '</div>').text(); // strip tags
		//--
		if(jQuery.alertable) {
			jQuery.alertable.confirm(y_title + '\n' + y_question).then(function(){
				if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
					try {
						if(typeof evcode === 'function') {
							evcode(); // call :: sync params dialog-confirm
						} else {
							eval('(function(){ ' + evcode + ' })();'); // sandbox
						} //end if else
					} catch(err) {
						console.error('ERROR: JS-Eval Error on Browser DialogConfirm Function (1)' + '\nDetails: ' + err);
					} //end try catch
				} //end if
			});
		} else {
			var the_confirmation = confirm(y_title + '\n' + y_question);
			if(the_confirmation) {
				if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
					try {
						if(typeof evcode === 'function') {
							evcode(); // call :: sync params dialog-confirm
						} else {
							eval('(function(){ ' + evcode + ' })();'); // sandbox
						} //end if else
					} catch(err) {
						console.error('ERROR: JS-Eval Error on Browser DialogConfirm Function (2)' + '\nDetails: ' + err);
					} //end try catch
				} //end if
			} //end if
		} //end if else
		//--
	} //end if else
	//--
} //END FUNCTION


/**
 * Confirm a Form Submit by a confirm / Dialog, with OK and Cancel buttons.
 * The form will be submitted just if OK button is clicked.
 * This function is using confirm_Dialog() and will detect and prefer in this order if UIDialog / SimpleDialog or just confirm() are available in Browser.
 *
 * @method confirmSubmitForm
 * @static
 * @param 	{String} 	y_confirm 		The question / message to display for confirmation (HTML)
 * @param 	{JS-Code} 	y_form 			The HTML Form Object to bind to
 * @param 	{String} 	y_target 		The window target to send this form to
 * @param 	{Integer} 	windowWidth 	*Optional* the width of the new Modal/PopUp child window if new window target is used ; if not set the default width will be used
 * @param 	{Integer} 	windowHeight 	*Optional* the height of the new Modal/PopUp child window if new window target is used ; if not set the default height will be used
 * @param 	{Enum} 		forcePopUp 		*Optional* if a new target window is required, 0 = default, use modal/iFrame if set by SmartJS_BrowserUtils_Use_iFModalBox_Active, 1 = force PopUp ; -1 force modal/iFrame
 * @param	{Enum} 		forceDims 		*Optional* if set to 1 will try force uwing the width/height set for the new modal/iFrame or PopUp
 */
this.confirmSubmitForm = function(y_confirm, y_form, y_target, windowWidth, windowHeight, forcePopUp, forceDims) {
	//--
	if((typeof y_form == 'undefined') || (y_form == null) || (y_form == '')) {
		//--
		console.error('ERROR: Form Object is Undefined in confirmSubmitForm()');
		//--
	} else {
		//--
		SmartJS_BrowserUtils_CurrentForm = y_form; // export this var because we can't reference this object in eval
		//--
		var submit_code = 'SmartJS_BrowserUtils_CurrentForm.submit();'; // by default we do just submit
		//--
		if((typeof y_target != 'undefined') && (y_target != null) && (y_target != '')) {
			//--
			if((typeof windowWidth == 'undefined') || (windowWidth == null) || (windowWidth == '')) {
				windowWidth = '0';
			} //end if
			if((typeof windowHeight == 'undefined') || (windowHeight == null) || (windowHeight == '')) {
				windowHeight = '0';
			} //end if
			if((typeof forcePopUp == 'undefined') || (forcePopUp == null) || (forcePopUp == '')) {
				forcePopUp = '0';
			} //end if
			if((typeof forceDims == 'undefined') || (forceDims == null) || (forceDims == '')) {
				forceDims = '0';
			} //end if
			//--
			submit_code = 'SmartJS_BrowserUtils.PopUpSendForm(SmartJS_BrowserUtils_CurrentForm, \'' + SmartJS_CoreUtils.escape_js(y_target) + '\', \'' + SmartJS_CoreUtils.escape_js(windowWidth) + '\', \'' + SmartJS_CoreUtils.escape_js(windowHeight) + '\', \'' + SmartJS_CoreUtils.escape_js(forcePopUp) + '\', \'' + SmartJS_CoreUtils.escape_js(forceDims) + '\');'; // in this situation we do both: popup/modal + submit
			//--
		} //end if
		//-- execute the above code only if confirmed
		_class.confirm_Dialog(y_confirm, submit_code);
		//--
	} //end if
	//--
} //END FUNCTION


/**
 * Raise a Modal/iFrame or PopUp child window with a new target to post a form within.
 * It will get the form URL and form method GET/POST directly from the objForm.
 * This function must be called by a form button onClick followed by 'return false;' not by classic submit to avoid fire the form send twice 1st before (in a _blank window) and 2nd after opening the child popup/modal.
 * This function if used in a button with 'return false;' will catch the form send behaviour and will trigger it just after the child modal/iFrame or PopUp child window (new) target is opened and available.
 *
 * @method PopUpSendForm
 * @static
 * @param 	{Object} 	objForm 		The HTML Form Object reference
 * @param 	{String} 	strTarget 		The child window target to post this form to
 * @param 	{Integer} 	windowWidth 	*Optional* the width of the new Modal/PopUp child window if new window target is used ; if not set the default width will be used
 * @param 	{Integer} 	windowHeight 	*Optional* the height of the new Modal/PopUp child window if new window target is used ; if not set the default height will be used
 * @param 	{Enum} 		forcePopUp 		*Optional* if a new target window is required, 0 = default, use modal/iFrame if set by SmartJS_BrowserUtils_Use_iFModalBox_Active, 1 = force PopUp ; -1 force modal/iFrame
 * @param	{Enum} 		forceDims 		*Optional* if set to 1 will try force uwing the width/height set for the new modal/iFrame or PopUp
 * @param 	{JS-Code} 	evcode 			*Optional* the JS Code to execute after submit this form
 */
this.PopUpSendForm = function(objForm, strTarget, windowWidth, windowHeight, forcePopUp, forceDims, evcode) {
	//--
	try {
		var strUrl = String(objForm.action); // ensure string and get form action
	} catch(err){
		console.error('SmartJS_BrowserUtils.PopUpSendForm :: ERROR: Invalid Form Object');
		return;
	} //end try catch
	//-- if cross domain calls between http:// and https:// will be made will try to force pop-up to avoid XSS Error
	var crr_protocol = String(document.location.protocol);
	var crr_arr_url = strUrl.split(':');
	var crr_url = String(crr_arr_url[0]) + ':';
	//--
	if(((crr_protocol === 'http:') || (crr_protocol === 'https:')) && ((crr_url === 'http:') || (crr_url === 'https:')) && (crr_url !== crr_protocol)) {
		forcePopUp = 1;
	} //end if
	//--
	objForm.target = strTarget; // normal popUp use
	if(((SmartJS_BrowserUtils_Use_iFModalBox_Active) && (forcePopUp != 1)) || (forcePopUp == -1)) {
		if(typeof SmartJS_ModalBox != 'undefined') {
			objForm.target = SmartJS_ModalBox.getName(); // use smart modal box
		} //end if else
	} //end if else
	//--
	init_PopUp(SmartJS_BrowserUtils_LoaderHtml, objForm.target, windowWidth, windowHeight, forcePopUp, forceDims);
	//--
	if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
		setTimeout(function(){ objForm.submit(); try { if(typeof evcode === 'function') { evcode(objForm, strTarget, forcePopUp, forceDims); } else { eval(evcode); } } catch(err) { console.error('ERROR: PopUpSendForm: After-Form JS Code Err: ' + err); } }, 500); // delay submit for buggy browsers
	} else {
		setTimeout(function(){ objForm.submit(); }, 500); // delay submit for buggy browsers
	} //end if else
	//--
	return false;
	//--
} //END FUNCTION


/**
 * Raise a Modal/iFrame or PopUp child window with a new target to open a URL link within.
 * This function can be called by a button, a link or other HTML elements at onClick (if 'a' element onClick is used must be followed by 'return false;' to avoid fire page refresh.
 *
 * @method PopUpLink
 * @static
 * @param 	{String} 	strUrl 			The URL link to be opened in a new browser child window target
 * @param 	{String} 	strTarget 		The child window target to post this form to
 * @param 	{Integer} 	windowWidth 	*Optional* the width of the new Modal/PopUp child window if new window target is used ; if not set the default width will be used
 * @param 	{Integer} 	windowHeight 	*Optional* the height of the new Modal/PopUp child window if new window target is used ; if not set the default height will be used
 * @param 	{Enum} 		forcePopUp 		*Optional* if a new target window is required, 0 = default, use modal/iFrame if set by SmartJS_BrowserUtils_Use_iFModalBox_Active, 1 = force PopUp ; -1 force modal/iFrame
 * @param	{Enum} 		forceDims 		*Optional* if set to 1 will try force uwing the width/height set for the new modal/iFrame or PopUp
 */
this.PopUpLink = function(strUrl, strTarget, windowWidth, windowHeight, forcePopUp, forceDims) {
	//--
	strUrl = String(strUrl); // ensure string
	//-- if cross domain calls between http:// and https:// will be made will try to force pop-up to avoid XSS Error
	var crr_protocol = String(document.location.protocol);
	var crr_arr_url = strUrl.split(':');
	var crr_url = crr_arr_url[0] + ':';
	//--
	if(((crr_protocol === 'http:') || (crr_protocol === 'https:')) && ((crr_url === 'http:') || (crr_url === 'https:')) && (crr_url !== crr_protocol)) {
		forcePopUp = 1;
	} //end if
	//--
	init_PopUp(strUrl, strTarget, windowWidth, windowHeight, forcePopUp, forceDims);
	//--
	return false;
	//--
} //END FUNCTION


/**
 * Get a Cookie from Browser by Name and return it's Value
 *
 * @method getCookie
 * @static
 * @param 	{String} 	name 			The cookie Name
 * @return 	{String} 					The cookie Value
 */
this.getCookie = function(name) {
	//--
	var c;
	try {
		c = document.cookie.match(new RegExp('(^|;)\\s*' + String(name) + '=([^;\\s]*)'));
	} catch(err){
		console.error('NOTICE: BrowserUtils Failed to getCookie: ' + err);
	} //end try catch
	//--
	if(c && c.length >= 3) {
		var d = decodeURIComponent(c[2]) || ''; // fix to avoid working with null !!
		return String(d);
	} else {
		return ''; // fix to avoid working with null !!
	} //end if
	//--
} //END FUNCTION


/**
 * Set a Cookie in Browser by Name and Value
 *
 * @method setCookie
 * @static
 * @param 	{String} 	name 			The cookie Name
 * @param 	{String} 	value 			The cookie Value
 * @param	{Numeric} 	days 			*Optional* The cookie expiration in days (default expire by session)
 * @param 	{String} 	path 			*Optional* The cookie path (default is /)
 * @param 	{String} 	domain 			*Optional* The cookie domain (default is NULL) ; use '@' to use the SmartJS_BrowserUtils_CookieDomain
 * @param 	{Boolean} 	secure 			*Optional* Force Cookie Secure Mode (default is FALSE)
 */
this.setCookie = function(name, value, days, path, domain, secure) {
	//--
	if((typeof value == 'undefined') || (value == undefined) || (value == null)) {
		return; // bug fix (avoid to set null cookie)
	} //end if
	//--
	var d = new Date();
	//--
	if(days) {
		d.setTime(d.getTime() + (days * 8.64e7)); // now + days in milliseconds
	} //end if
	//--
	if(domain === '@') {
		domain = String(SmartJS_BrowserUtils_CookieDomain);
	} //end if
	//--
	try {
		document.cookie = String(name) + '=' + SmartJS_CoreUtils.escape_url(value) + (days ? ('; expires=' + d.toGMTString()) : '') + '; path=' + (path || '/') + (domain ? ('; domain=' + domain) : '') + (secure ? '; secure' : '');
	} catch(err){
		console.error('NOTICE: BrowserUtils Failed to setCookie: ' + err);
	} //end try catch
	//--
} //END FUNCTION


/**
 * Delete a Cookie from Browser by Name
 *
 * @method deleteCookie
 * @static
 * @param 	{String} 	name 			The cookie Name
 * @param 	{String} 	path 			*Optional* The cookie path (default is /)
 * @param 	{String} 	domain 			*Optional* The cookie domain (default is NULL)
 * @param 	{Boolean} 	secure 			*Optional* Force Cookie Secure Mode (default is FALSE)
 */
this.deleteCookie = function(name, path, domain, secure) {
	//--
	_class.setCookie(name, '', -1, path, domain, secure); // sets expiry to now - 1 day
	//--
} //END FUNCTION


/*
 * Resize iFrames Dinamically on Height and Optional on Width
 *
 * @private : internal development only
 * @method resize_iFrame
 * @static
 * @param 	{String} 	f 				The reference iFrame
 * @param 	{Boolean} 	w 				*Optional* if TRUE will resize also on Width
 */
this.resize_iFrame = function(f, w) {
	//--
	f.style.height = '1px';
	f.style.height = f.contentWindow.document.body.scrollHeight + 'px';
	//--
	if(w === true) {
		f.style.width = '1px';
		f.style.width = f.contentWindow.document.body.scrollWidth + 'px';
	} //end if
	//--
} //END FUNCTION


/**
 * Force a text limit on a TextArea (will also attach a CounterField)
 *
 * @method textArea_addLimit
 * @static
 * @param 	{String} 	y_field 		The TextArea field name
 * @param 	{Integer} 	y_maxlimit 		The max limit of characters to accept in the TextArea
 */
this.textArea_addLimit = function(y_field, y_maxlimit) {
	//--
	y_maxlimit = parseInt(y_maxlimit);
	if((y_maxlimit < 1) || !SmartJS_CoreUtils.isFiniteNumber(y_maxlimit)) {
		console.error('TextArea Add Limit :: Invalid Text Limit, will reset to 1');
		y_maxlimit = 1;
	} //end if
	//--
	jQuery('#' + y_field).on('change click blur keydown keyup paste', function(){
		//--
		var field = jQuery(this);
		if(field.val().length > y_maxlimit) { // if too long then trim it!
			field.val(field.val().substring(0, y_maxlimit));
		} //end if
		//--
		field.attr('title', '# Max: ' + y_maxlimit + ' ; Chars: ' + (y_maxlimit - field.val().length) + ' #'); // update the counter
		//--
	}).attr('maxlength', y_maxlimit).attr('title', '# Max: ' + y_maxlimit + ' #');
	//--
} //END FUNCTION


/**
 * Catch TAB Key in a TextArea or other compatible field
 * Example: onKeyDown = SmartJS_BrowserUtils.catch_TABKey(event);
 *
 * @method catch_TABKey
 * @static
 * @param 	{Event} 	evt 			The EVENT Object Reference
 */
this.catch_TABKey = function(evt) {
	//-- Example: <textarea id="txt" onKeyDown="SmartJS_BrowserUtils.catch_TABKey(event);">
	var tab = "\t";
	var t = evt.target;
	var ss = t.selectionStart;
	var se = t.selectionEnd;
	var scrollTop = t.scrollTop;
	var scrollLeft = t.scrollLeft;
	//--
	if(evt.keyCode == 9) {
		//-- Tab key - insert tab expansion
		evt.preventDefault();
		//-- Special case of multi line selection
		if(ss != se && t.value.slice(ss,se).indexOf("\n") != -1) {
			//-- In case selection was not of entire lines (e.g. selection begins in the middle of a line) we have to tab at the beginning as well as at the start of every following line.
			var pre = t.value.slice(0,ss);
			var sel = t.value.slice(ss,se).replace(/\n/g,"\n"+tab);
			var post = t.value.slice(se,t.value.length);
			//--
			t.value = pre.concat(tab).concat(sel).concat(post);
			t.selectionStart = ss + tab.length;
			t.selectionEnd = se + tab.length;
		} else {
			//-- The Normal Case (no selection or selection on one line only)
			t.value = t.value.slice(0,ss).concat(tab).concat(t.value.slice(ss,t.value.length));
			if (ss == se) {
				t.selectionStart = t.selectionEnd = ss + tab.length;
			} else {
				t.selectionStart = ss + tab.length;
				t.selectionEnd = se + tab.length;
			} //end if
		} //end if else
		//--
		t.scrollTop = scrollTop;
		t.scrollLeft = scrollLeft;
		//--
	} //end if
	//--
} //END FUNCTION


/**
 * Check or Uncheck all checkboxes in a form element
 *
 * @method checkAll_CkBoxes
 * @static
 * @param 	{String} 	y_form_name 			The form name (if empty string will operate on all page otherwise just inside the form)
 * @param 	{String} 	y_element_id 			The checkboxes element ID
 * @param 	{Boolean} 	y_element_checked 		If TRUE will do check ; If FALSE will do uncheck ; otherwise will just inverse check
 */
this.checkAll_CkBoxes = function(y_form_name, y_element_id, y_element_checked) {
	//--
	var i;
	//--
	for(i=0; i<document.forms[y_form_name].elements.length; i++) {
		//--
		if(document.forms[y_form_name].elements[i].type == "checkbox") {
			//--
			if((typeof y_element_id == 'undefined') || (y_element_id === '')) { // default
				//--
				if((y_element_checked === true) || (y_element_checked === false)) {
					document.forms[y_form_name].elements[i].checked = y_element_checked;
				} else {
					document.forms[y_form_name].elements[i].checked = !document.forms[y_form_name].elements[i].checked;
				} //end if else
				//--
			} else {
				//--
				if(y_element_id == document.forms[y_form_name].elements[i].id) {
					if((y_element_checked === true) || (y_element_checked === false)) {
						document.forms[y_form_name].elements[i].checked = y_element_checked;
					} else {
						document.forms[y_form_name].elements[i].checked = !document.forms[y_form_name].elements[i].checked;
					} //end if else
				} //end if
				//--
			} //end if
			//--
		} //end if
		//--
	} //end for
	//--
} //END FUNCTION


/**
 * Clone a HTML Element
 *
 * @method CloneElement
 * @static
 * @param 	{String} 	elem 					The element ID to be cloned
 * @param 	{String} 	destination 			The destination container ID
 * @param 	{Enum} 		elType 					The type of the element to be cloned: text-input ; text-area ; file-input ; html-element
 * @param 	{Integer} 	maxLimit 				The max limit number of cloned elements
 */
this.CloneElement = function(elem, destination, elType, maxLimit) {
	//--
	maxLimit = parseInt(maxLimit);
	if(!SmartJS_CoreUtils.isFiniteNumber(maxLimit) || (maxLimit < 0) || (maxLimit > 255)) {
		maxLimit = 255; // hard code limit
	} //end if
	//-- init
	var control_num = parseInt(jQuery('body').find('[id^=' + 'clone_control__' + SmartJS_CoreUtils.escape_js(elem) + ']').length);
	if((control_num <= 0) || !SmartJS_CoreUtils.isFiniteNumber(control_num)) {
		jQuery('#' + elem).before('<img id="' + 'clone_control__' + SmartJS_CoreUtils.escape_html(elem) + '" alt="Add New" title="Add New" height="16" src="' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUtils_Cloner_Img_Add) + '" style="cursor:pointer; vertical-align:middle;" onClick="SmartJS_BrowserUtils.CloneElement(\'' + SmartJS_CoreUtils.escape_js(elem) + '\', \'' + SmartJS_CoreUtils.escape_js(destination) + '\', \'' + SmartJS_CoreUtils.escape_js(elType) + '\', ' + parseInt(maxLimit) + ');' + '">&nbsp;&nbsp;</span>');
		return;
	} //end if
	//-- do clone
	var cloned_num = parseInt(jQuery('body').find('[id^=' + 'clone_of__' + SmartJS_CoreUtils.escape_js(elem) + '_' + ']').length);
	if((cloned_num <= 0) || !SmartJS_CoreUtils.isFiniteNumber(cloned_num)) {
		cloned_num = 0;
	} //end if
	if(cloned_num >= (maxLimit - 1)) {
		return;
	} //end if
	//console.log(cloned_num);
	//--
	var date = new Date();
	var seconds = date.getTime();
	var milliseconds = date.getMilliseconds();
	var randNum = Math.random().toString(36);
	var uuID = SmartJS_CryptoHash.sha1('This is a UUID for #' + cloned_num + ' @ ' + randNum + ' :: ' + seconds + '.' + milliseconds);
	//--
	var clone_data = jQuery('#' + elem).clone().attr('id', 'clone_of__' + SmartJS_CoreUtils.escape_js(elem) + '_' + SmartJS_CoreUtils.escape_js(uuID));
	//--
	jQuery('#' + destination).append('<span id="' + 'clone_container__' + SmartJS_CoreUtils.escape_html(elem) + '_' + SmartJS_CoreUtils.escape_html(uuID) + '"><br><img alt="Remove" title="Remove" height="16" src="' + SmartJS_CoreUtils.escape_html(SmartJS_BrowserUtils_Cloner_Img_Remove) + '" style="cursor:pointer; vertical-align:middle;" onClick="jQuery(this).parent().remove();">&nbsp;&nbsp;</span>');
	//--
	switch(elType) {
		case 'text-input':
		case 'text-area':
		case 'file-input':
			clone_data.val('').appendTo('#' + 'clone_container__' + SmartJS_CoreUtils.escape_js(elem) + '_' + SmartJS_CoreUtils.escape_js(uuID));
			break;
		case 'html-element': // regular html element
		default: // other cases
			clone_data.appendTo('#' + 'clone_container__' + SmartJS_CoreUtils.escape_js(elem) + '_' + SmartJS_CoreUtils.escape_js(uuID));
	} //end switch
	//--
} //END FUNCTION


/*
 * Background Send (post) a Form (it does not catch the result, just send it to ensure updates in some cases ...).
 * This should be used for very particular situations by example posting a form to post another form before !!
 * It will NOT work with forms that must upload because will do just serialize() on that.
 *
 * @private : internal development only
 * @method Background_Send_a_Form
 * @static
 * @param 	{String} 	other_form_id 			The element ID of the form to be sent / posted
 * @param 	{String} 	evcode 					*Optional* the JS Code to execute on SUCCESS answer
 */
this.Background_Send_a_Form = function(other_form_id, evcode) {
	//--
	var ajax = _class.Ajax_XHR_GetByForm(other_form_id, '', 'text'); // since the answer is not evaluated because can vary, will use text
	if(ajax === null) {
		console.error('ERROR: Background Submit Form / Null XHR Object !');
		return;
	} //end if
	//--
	_class.Overlay_Show();
	//--
	ajax.done(function(msg) { // {{{JQUERY-AJAX}}}
		//--
		_class.Overlay_Clear();
		//--
		if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
			try {
				if(typeof evcode === 'function') {
					evcode(other_form_id); // call
				} else {
					eval('(function(){ ' + evcode + ' })();'); // sandbox
				} //end if else
			} catch(err) {
				console.error('ERROR: JS-Eval Error on Background Send Form' + '\nDetails: ' + err);
			} //end try catch
		} //end if
		//--
		_class.Overlay_Hide();
		//--
	}).fail(function(msg) {
		//--
		_class.alert_Dialog('ERROR (1): Invalid Background Form Update !' + '\n' + 'HTTP Status Code: ' + msg.status, '', 'ERROR', 750, 425); // + '\n' + msg.responseText
		//--
		_class.Overlay_Hide();
		//--
	});
	//--
} //END FUNCTION


/**
 * Submit a Form by Ajax via POST and Handle the Answer
 * It supports simple forms or complex forms with multipart/form-data and file attachments.
 * This function expects a json answer with the following structure: see more in framework PHP lib SmartComponents::js_ajax_replyto_html_form()
 * 		{ // Json Structure for Answer
 * 			'completed': 	'DONE',
 * 			'status': 		'OK|ERROR',
 * 			'action': 		'Notification Button Text: Ok/Cancel',
 * 			'title': 		'Notification Title',
 * 			'message': 		'Notification Message HTML Content',
 * 			'js_evcode': 	'If non-empty, the JS Code to execute on either SUCCESS or ERROR (before redirect or Div Replace)'
 * 			'redirect': 	'If non-empty, a redirect URL on either SUCCESS or ERROR ; on SUCCESS if message is Empty will redirect without confirmation: Growl / Dialog',
 * 			'replace_div': 	'If non-empty, an ID for a div to be replaced with content from [replace_html] on Success',
 * 			'replace_html': 'If non-empty, a HTML code to populate / replace the current Content for the [replace_div] on Success'
 * 		} // #END Json Structure
 *
 * @method Submit_Form_By_Ajax
 * @static
 * @param 	{String} 	the_form_id 			The form ID | false (to use without a real form by emulating a XHR request from URL)
 * @param 	{String} 	url 					The destination URL where form or XHR request will be sent to
 * @param 	{Yes/No} 	growl 					*Optional* If 'yes' will use the Growl notifications otherwise (if 'no') will use Dialog notifications ; default is set to 'auto'
 * @param 	{String} 	evcode 					*Optional* the JS Code to execute on SUCCESS answer (before anything else)
 * @param 	{String} 	everrcode 				*Optional* the JS Code to execute on ERROR answer (before anything else)
 */
this.Submit_Form_By_Ajax = function(the_form_id, url, growl, evcode, everrcode) {
	//--
	if((typeof growl == 'undefined') || (growl === null) || (growl === '')) {
		growl = 'auto';
	} //end if
	if(growl === 'auto') {
		if(SmartJS_BrowserUtils_Notifications === 'growl') {
			growl = 'yes';
		} else {
			growl = 'no';
		} //end if else
	} //end if
	if(growl !== 'no') {
		if(typeof jQuery.gritter != 'undefined') {
			growl = 'yes';
		} else {
			growl = 'no';
		} //end if
	} //end if
	//--
	if(the_form_id === false) {
		var ajax = _class.Ajax_XHR_Request_From_URL(url, 'get', 'json');
	} else {
		var ajax = _class.Ajax_XHR_GetByForm(the_form_id, url, 'json');
	} //end if else
	if(ajax === null) {
		console.error('ERROR: Submit Form by Ajax / Null XHR Object !');
		return;
	} //end if
	//--
	_class.Overlay_Show();
	//--
	ajax.done(function(msg) { // {{{JQUERY-AJAX}}}
		//--
		_class.Overlay_Clear();
		//--
		var doReplaceDiv = 'no';
		//--
		if(msg != null) {
			//--
			if((msg.hasOwnProperty('completed')) && (msg.completed == 'DONE') && (msg.hasOwnProperty('status')) && ((msg.status == 'OK') || (msg.status == 'ERROR')) && (msg.hasOwnProperty('action')) && (msg.action != null) && (msg.hasOwnProperty('title')) && (msg.title != null) && (msg.hasOwnProperty('message')) && (msg.message != null) && (msg.hasOwnProperty('js_evcode')) && (msg.hasOwnProperty('redirect')) && (msg.hasOwnProperty('replace_div')) && (msg.hasOwnProperty('replace_html'))) {
				//--
				if(msg.status == 'OK') { // OK
					//--
					if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
						try {
							if(typeof evcode === 'function') {
								evcode(the_form_id, url); // call
							} else {
								eval('(function(){ ' + evcode + ' })();'); // sandbox
							} //end if else
						} catch(err) {
							console.error('ERROR: JS-Eval Error on Submit Form By Ajax (1)' + '\nDetails: ' + err);
						} //end try catch
					} //end if
					//--
					if((msg.js_evcode != null) && (msg.js_evcode != '')) {
						try {
							eval('(function(){ ' + msg.js_evcode + ' })();'); // sandbox
						} catch(err) {
							console.error('ERROR: Msg-JS-Eval Error on Submit Form By Ajax (1)' + '\nDetails: ' + err);
						} //end try catch
					} //end if
					//--
					if((msg.replace_div != null) && (msg.replace_div != '') && (msg.replace_html != null) && (msg.replace_html != '')) {
						doReplaceDiv = 'yes';
					} //end if
					//--
					if((msg.redirect != null) && (msg.redirect != '') && (msg.message == '')) {
						_class.RedirectDelayedToURL(msg.redirect, 250);
					} else {
						if(doReplaceDiv == 'yes') {
							jQuery('#'+msg.replace_div).html(String(msg.replace_html));
						} //end if
						if((doReplaceDiv != 'yes') || (msg.message != '')) {
							if(growl === 'yes') {
								Message_AjaxForm_Notification(SmartJS_CoreUtils.escape_html(String(msg.title)), '<img src="' + SmartJS_BrowserUtils_ImgOK + '" align="right">' + msg.message, msg.redirect, 'yes', 'gritter-green', parseInt(SmartJS_BrowserUtils_Time_Notification_OK));
							} else {
								Message_AjaxForm_Notification(SmartJS_CoreUtils.escape_html(String(msg.action)) + ' / ' + SmartJS_CoreUtils.escape_html(msg.title), '<img src="' + SmartJS_BrowserUtils_ImgOK + '" align="right">' + msg.message, msg.redirect, 'no', '', parseInt(SmartJS_BrowserUtils_Time_Notification_OK));
							} //end if else
						} //end if else
						if(growl !== 'yes') {
							_class.Overlay_Hide();
						} //end if
					} //end if
					//--
				} else { // ERROR
					//--
					if((typeof everrcode != 'undefined') && (everrcode != 'undefined') && (everrcode != null) && (everrcode != '')) {
						try {
							eval('(function(){ ' + everrcode + ' })();'); // sandbox
						} catch(err) {
							console.error('ERROR: JS-Eval Error on Submit Form By Ajax (2)' + '\nDetails: ' + err);
						} //end try catch
					} //end if
					//--
					if((msg.js_evcode != null) && (msg.js_evcode != '')) {
						try {
							eval('(function(){ ' + msg.js_evcode + ' })();'); // sandbox
						} catch(err) {
							console.error('ERROR: Msg-JS-Eval Error on Submit Form By Ajax (2)' + '\nDetails: ' + err);
						} //end try catch
					} //end if
					//--
					if(growl === 'yes') {
						Message_AjaxForm_Notification('* ' + SmartJS_CoreUtils.escape_html(msg.title), '<img src="' + SmartJS_BrowserUtils_ImgWarn + '" align="right">' + msg.message, msg.redirect, 'yes', 'gritter-red', parseInt(SmartJS_BrowserUtils_Time_Notification_ERR));
					} else {
						Message_AjaxForm_Notification('* ' + SmartJS_CoreUtils.escape_html(msg.action) + ' / ' + SmartJS_CoreUtils.escape_html(msg.title), '<img src="' + SmartJS_BrowserUtils_ImgWarn + '" align="right">' + msg.message, msg.redirect, 'no', '', parseInt(SmartJS_BrowserUtils_Time_Notification_ERR));
					} //end if else
					if(growl !== 'yes') {
						_class.Overlay_Hide();
					} //end if
					//--
				} //end if else
				//--
			} else {
				//--
				//console.log(msg); // dump object
				console.error('SubmitFormByAjax ERROR (2): Invalid DataObject Format !'); // this must be alert because errors may prevent dialog
				_class.Overlay_Hide();
				//--
			} //end if else
			//--
		} else {
			//--
			console.error('SubmitFormByAjax ERROR (3): DataObject is NULL !'); // this must be alert because errors may prevent dialog
			_class.Overlay_Hide();
			//--
		} //end if else
		//--
	}).fail(function(msg) {
		//--
		_class.alert_Dialog('ERROR (1): Invalid Server Response !' + '\n' + 'HTTP Status Code: ' + msg.status, '', 'ERROR', 750, 425); // + '\n' + msg.responseText
		_class.Overlay_Hide();
		//--
	});
	//--
} //END FUNCTION


/**
 * Create an Ajax XHR Request (POST) by Form
 * It supports simple forms or complex forms with multipart/form-data and file attachments.
 *
 * @method Ajax_XHR_GetByForm
 * @static
 * @param 	{String} 	the_form_id 			The element ID of the form to be create the Ajax XHR Request for
 * @param 	{String} 	url 					The URL to send form to via POST
 * @param 	{Enum} 		data_type 				The type of Data served back by the Request: json | html | text
 * @return 	{Object} 							The Ajax XHR Request Object ; The following methods must be bind to this object and redefined:
 * 		.done: 		function(msg) {}
 * 		.fail: 		function(msg) {}
 * 		.always: 	function(msg) {}
 */
this.Ajax_XHR_GetByForm = function(the_form_id, url, data_type) {
	//--
	var ajax = null;
	var data = '';
	//--
	if((typeof url == 'undefined') || (url == null) || (url == '')) {
		url = jQuery('#' + the_form_id).attr('action'); // try to get form action if URL is empty
	} //end if
	//--
	if((typeof url == 'undefined') || (url == null) || (url == '')) {
		console.error('ERROR: Empty URL for Ajax_XHR_GetByForm ...');
		return null;
	} //end if
	//--
	if((the_form_id == null) || (the_form_id == '')) {
		//--
		ajax = _class.Ajax_XHR_Request_From_URL(url, 'GET', data_type, '');
		//console.log('Form.XHR.Ajax: using No Data ... (empty formID)');
		//--
	} else {
		//--
		var found_files = false;
		if((jQuery('#' + the_form_id).attr('method') == 'post') && (jQuery('#' + the_form_id).attr('enctype') == 'multipart/form-data')) {
			var have_files = jQuery('#' + the_form_id).find('input:file');
			if(typeof have_files != 'undefined') {
				if(typeof have_files[0] != 'undefined') {
					found_files = true;
				} //end if
			} //end if
			//console.log('The Form Have Files and is Multi-Part');
		} //end if
		//--
		if(found_files !== true) {
			//--
			data = jQuery('#' + the_form_id).serialize(); // no files detected use serialize
			ajax = _class.Ajax_XHR_Request_From_URL(url, 'POST', data_type, data);
			//console.log('Form.XHR.Ajax: using Serialized Form Data ... ' + the_form_id);
			//--
		} else {
			//--
			try {
				var theFormObj = document.getElementById(the_form_id);
			} catch(err) {
				console.error('ERROR: Ajax_XHR_GetByForm / Invalid FormID !');
				return null;
			} //end try catch
			//--
			try {
				data = new FormData(theFormObj);
				data.append('ie__fix', '...dummy-variable...'); // workarround for IE10/11 bugfix with array variables, after array of vars a non-array var must be to avoid corruption: http://blog.yorkxin.org/posts/2014/02/06/ajax-with-formdata-is-broken-on-ie10-ie11/
				ajax = _class.Ajax_XHR_PostMultiPart_To_URL(url, data_type, data);
				//console.log('Form.XHR.Ajax: using MultiPart Form Data ... ' + the_form_id);
			} catch(err) { // this must alert to anounce the user
				var warnMsg = 'ERROR: Ajax_XHR_GetByForm / FormData Object Failed. File Attachments NOT sent ! Try to upgrade / change your browser. Your browser does not support HTML5 File Uploads.';
				console.warn('Form.XHR.Ajax ID:' + the_form_id + ' # ' + warnMsg);
				if(jQuery.alertable) {
					jQuery.alertable.alert(warnMsg).always(function(){});
				} else {
					alert(warnMsg);
				} //end if else
				data = jQuery('#' + the_form_id).serialize(); // no files detected use serialize
				ajax = _class.Ajax_XHR_Request_From_URL(url, 'POST', data_type, data);
			} //end try catch
			//--
		} //end if else
		//--
	} //end if
	//--
	return ajax;
	//--
	/* the below functions must be assigned later to avoid execution here {{{SYNC-JQUERY-AJAX-EVENTS}}}
	var ajax = SmartJS_BrowserUtils.Ajax_XHR_GetByForm(...)
	ajax.done(function(data, textStatus, jqXHR) {}); // instead of .success() (which is deprecated or removed from newest jQuery)
	ajax.fail(function(jqXHR, textStatus, errorThrown) {}); // instead of .error() (which is deprecated or removed from newest jQuery)
	ajax.always(function(data|jqXHR, textStatus, jqXHR|errorThrown) {}); // *optional* instead of .complete() (which is deprecated or removed from newest jQuery)
	*/
	//--
} //END FUNCTION


/*
 * Create an Ajax XHR Request (POST) using multipart/form-data type to bse used with file attachments.
 * NOTICE: This does not send the 'contentType' to allow new FormData send multipart form if necessary ...
 * Instead using this directly is better to use:
 * 		SmartJS_BrowserUtils.Ajax_XHR_GetByForm(); 		// basic, will detect the form type if must use multipart/form-data + attachments (if any)
 * or even much better use this:
 * 		SmartJS_BrowserUtils.Submit_Form_By_Ajax(); 	// advanced, will handle the XHR form request and the answer
 *
 * @private : internal development only
 * @method Ajax_XHR_PostMultiPart_To_URL
 * @static
 * @param 	{String} 	y_url 					The URL to send form to via method POST
 * @param 	{Enum} 		y_data_type 			The type of Data served back by the Request: json | jsonp | script | html | xml | text
 * @param 	{Mixed} 	y_data_formData 		The *special* serialized form data as object using: new FormData(document.getElementById(the_form_id)) to support attachments or string via serialize() such as: '&var1=value1&var2=value2'
 * @param 	{Boolean} 	y_withCredentials 		*Optional* Send Credentials (CORS Only) ; default is FALSE ; set to TRUE to send XHR Credentials
 * @return 	{Object} 							The Ajax XHR Request Object ; The following methods must be bind to this object and redefined:
 * 		.done: 		function(msg) {}
 * 		.fail: 		function(msg) {}
 * 		.always: 	function(msg) {}
 */
this.Ajax_XHR_PostMultiPart_To_URL = function(y_url, y_data_type, y_data_formData, y_withCredentials) {
	//--
	if((typeof y_url == 'undefined') || (y_url == null) || (y_url == '')) {
		y_url = '#';
		console.error('WARNING: Empty URL for Ajax_XHR_PostMultiPart_To_URL ...');
	} else {
		y_url = String(y_url);
	} //end if
	//--
	if((typeof y_data_type == 'undefined') || (y_data_type == null)) {
		y_data_type = '';
	} else {
		y_data_type = String(y_data_type);
	} //end if
	switch(y_data_type) {
		case 'json':
			y_data_type = 'json'; // Evaluates the response as JSON and returns a JavaScript object. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown.
			break;
		case 'jsonp':
			y_data_type = 'jsonp'; // Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback
			break;
		case 'script':
			y_data_type = 'script'; // Evaluates the response as JavaScript and returns it as plain text
			break;
		case 'html':
			y_data_type = 'html'; // Returns HTML as plain text; included script tags are evaluated when inserted in the DOM.
			break;
		case 'xml':
			y_data_type = 'xml'; // Expects valid XML
			break;
		case 'text':
		default:
			y_data_type = 'text'; // A plain text string.
	} //end switch
	//--
	var ajxOpts = {
		async: 				true,
	//	cache: 				false, // by default is true ; let this be set globally via ajaxSetup
	//	timeout: 			0, // by default is zero ; let this be set globally via ajaxSetup
		type: 				'POST',
		url: 				String(y_url),
		//--
		contentType: 		false,
		processData: 		false,
		data: 				y_data_formData, // String or Object
		dataType: 			String(y_data_type), // json, jsonp, script, html, xml or text
		//--
	};
	//--
	if(y_withCredentials === true) {
		ajxOpts.xhrFields = {
			withCredentials: true // allow send credentials (CORS): FALSE / TRUE
		};
	} //end if
	//--
	return jQuery.ajax(ajxOpts);
	//--
	/* the below functions can be assigned later to avoid execution here {{{SYNC-JQUERY-AJAX-EVENTS}}}
	var ajax = SmartJS_BrowserUtils.Ajax_XHR_PostMultiPart_To_URL(...)
	ajax.done(function(data, textStatus, jqXHR) {}); // instead of .success() (which is deprecated or removed from newest jQuery)
	ajax.fail(function(jqXHR, textStatus, errorThrown) {}); // instead of .error() (which is deprecated or removed from newest jQuery)
	ajax.always(function(data|jqXHR, textStatus, jqXHR|errorThrown) {}); // *optional* instead of .complete() (which is deprecated or removed from newest jQuery)
	*/
	//--
} //END FUNCTION


/**
 * Create a general purpose Ajax XHR Request (GET/POST) with Optional support for Authentication and Extra Headers
 * It is NOT intended to be used with HTML forms that may contain multipart/form-data and file attachments or not.
 * For creating an Ajax XHR Request to be used with HTML Forms use:
 * 		SmartJS_BrowserUtils.Ajax_XHR_GetByForm(); 		// basic, will detect the form type if must use multipart/form-data + attachments (if any)
 * or even much better use this:
 * 		SmartJS_BrowserUtils.Submit_Form_By_Ajax(); 	// advanced, will handle the XHR form request and the answer
 *
 * @method Ajax_XHR_Request_From_URL
 * @static
 * @param 	{String} 	y_url 						The URL to send the Request to
 * @param 	{Enum} 		y_method 					The Request Method: GET / POST / PUT / DELETE / OPTIONS / HEAD
 * @param 	{Enum} 		y_data_type 				The type of Data served back by the Request: json | jsonp | script | html | xml | text
 * @param 	{Mixed} 	y_data_arr_or_serialized 	The Data to be sent: a serialized string via serialize() such as: '&var1=value1&var2=value2' or an associative array (Object) as: { var1: "value1", var2: "value2" }
 * @param 	{String} 	y_AuthUser 					*Optional* The Authentication UserName (if custom Authentication need to be used)
 * @param 	{String} 	y_AuthPass 					*Optional* The Authentication Password (if custom Authentication need to be used)
 * @param 	{Object} 	y_Headers 					*Optional* Extra Headers to be sent with this Request ; Default is NULL (ex: { 'X-Head1': 'Test1', ... })
 * @param 	{Boolean} 	y_withCredentials 			*Optional* Send Credentials (CORS Only) ; default is FALSE ; set to TRUE to send XHR Credentials
 * @return 	{Object} 								The Ajax XHR Request Object ; The following methods must be bind to this object and redefined:
 * 		.done: 		function(msg) {}
 * 		.fail: 		function(msg) {}
 * 		.always: 	function(msg) {}
 */
this.Ajax_XHR_Request_From_URL = function(y_url, y_method, y_data_type, y_data_arr_or_serialized, y_AuthUser, y_AuthPass, y_Headers, y_withCredentials) {
	//--
	if((typeof y_url == 'undefined') || (y_url == null) || (y_url == '')) {
		y_url = '#';
		console.error('WARNING: Empty URL for Ajax_XHR_Request_From_URL ...');
	} else {
		y_url = String(y_url);
	} //end if
	if((typeof y_method == 'undefined') || (y_method == null) || (y_method == '')) {
		y_method = 'GET';
	} //end if
	if((y_method != 'GET') && (y_method != 'POST') && (y_method != 'PUT') && (y_method != 'DELETE') && (y_method != 'OPTIONS') && (y_method != 'HEAD')) {
		y_method = 'GET';
	} //end if
	//--
	if((typeof y_data_type == 'undefined') || (y_data_type == null)) {
		y_data_type = '';
	} else {
		y_data_type = String(y_data_type);
	} //end if
	switch(y_data_type) {
		case 'json':
			y_data_type = 'json'; // Evaluates the response as JSON and returns a JavaScript object. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown.
			break;
		case 'jsonp':
			y_data_type = 'jsonp'; // Loads in a JSON block using JSONP. Adds an extra "?callback=?" to the end of your URL to specify the callback
			break;
		case 'script':
			y_data_type = 'script'; // Evaluates the response as JavaScript and returns it as plain text
			break;
		case 'html':
			y_data_type = 'html'; // Expects valid HTML ; included javascripts are evaluated when inserted in the DOM
			break;
		case 'xml':
			y_data_type = 'xml'; // Expects valid XML
			break;
		case 'text':
		default:
			y_data_type = 'text'; // Expects Text or HTML ; If HTML, includded javascripts are not evaluated when inserted in the DOM
	} //end switch
	//--
	if((typeof y_data_arr_or_serialized == 'undefined') || (y_data_arr_or_serialized == null)) {
		y_data_arr_or_serialized = '';
	} //end if
	//--
	var the_headers = {}; // default
	if((typeof y_Headers != 'undefined') && (y_Headers != null) && (y_Headers != '')) {
		the_headers = y_Headers;
	} //end if
	//--
	var the_user = '';
	var the_pass = '';
	if(((typeof y_AuthUser != 'undefined') && (y_AuthUser != null)) && ((typeof y_AuthPass != 'undefined') && (y_AuthPass != null))) {
		the_user = String(y_AuthUser);
		the_pass = String(y_AuthPass);
	} //end if
	//--
	var ajxOpts = {
		//--
		async: 				true,
	//	cache: 				false, // by default is true ; let this be set globally via ajaxSetup
	//	timeout: 			0, // by default is zero ; let this be set globally via ajaxSetup
		type: 				String(y_method),
		url: 				String(y_url),
		//--
		headers: 			the_headers, 		// extra headers object or NULL
		username: 			String(the_user), 	// auth user name or ''
		password: 			String(the_pass), 	// auth user pass or ''
		//--
		data: 				y_data_arr_or_serialized, // this can be a serialized STRING as: '&var1=value1&var2=value2' or OBJECT as: { var1: "value1", var2: "value2" }
		dataType: 			String(y_data_type) // json, jsonp, script, html, xml or text
		//--
	};
	//--
	if(y_withCredentials === true) {
		ajxOpts.xhrFields = {
			withCredentials: true // allow send credentials (CORS): FALSE / TRUE
		};
	} //end if
	//--
	return jQuery.ajax(ajxOpts);
	//--
	/* [Sample Implementation:] {{{SYNC-JQUERY-AJAX-EVENTS}}}
	var ajax = SmartJS_BrowserUtils.Ajax_XHR_Request_From_URL(...);
	// {{{JQUERY-AJAX}}} :: the below functions: done() / fail() / always() must be assigned on execution because they are actually executing the ajax request and the Ajax_XHR_Request_From_URL() just creates the request object !
	ajax.done(function(data, textStatus, jqXHR) { // instead of .success() (which is deprecated or removed from newest jQuery)
		// code for done
	}).fail(function(jqXHR, textStatus, errorThrown) { // instead of .error() (which is deprecated or removed from newest jQuery)
		// code for fail
	}).always(function(data|jqXHR, textStatus, jqXHR|errorThrown) { // *optional* instead of .complete() (which is deprecated or removed from newest jQuery)
		// code for always
	});
	*/
	//--
} //END FUNCTION


/**
 * Loads the contents for a Div (or other compatible) HTML Element(s) by Ajax using a GET / POST Ajax Request
 * This is intended to simplify populating a Div (or other compatible) HTML Element(s) with content(s) by Ajax Requests.
 *
 * @method Load_Div_Content_By_Ajax
 * @static
 * @param 	{String} 	y_div 						The ID of the Div (or other compatible) HTML Element(s) to bind to
 * @param 	{String} 	y_img_loader 				If non-empty, a pre-loader image that will be displayed while loading ...
 * @param 	{String} 	y_url 						The URL to send the Request to
 * @param 	{Enum} 		y_method 					The Request Method: GET / POST
 * @param 	{Enum} 		y_data_type 				The type of Data served back by the Request: html | text | json (div_content_html)
 * @param 	{Mixed} 	y_data_arr_or_serialized 	The Data to be sent: a serialized string via serialize() such as: '&var1=value1&var2=value2' or an associative array as: { var1: "value1", var2: "value2" }
 */
this.Load_Div_Content_By_Ajax = function(y_div, y_img_loader, y_url, y_method, y_data_type, y_data_arr_or_serialized) {
	//--
	if((typeof y_div == 'undefined') || (y_div == null) || (y_div == '')) {
		_class.alert_Dialog('ERROR (1): Invalid DivID in Ajax LoadDivContent From URL', '', 'ERROR', 750, 425);
		return -1;
	} //end if
	//--
	if((typeof y_img_loader != 'undefined') && (y_img_loader != null) && (y_img_loader != '')) {
		if(jQuery('#' + y_div + '__Load_Div_Content_By_Ajax').length == 0) {
			jQuery('#' + y_div).prepend('<span id="' + y_div + '__Load_Div_Content_By_Ajax' + '"><img src="' + y_img_loader + '" title="Loading ..." alt="Loading ..."></span><br>');
		} //end if
	} //end if
	//--
	var ajax = _class.Ajax_XHR_Request_From_URL(y_url, y_method, y_data_type, y_data_arr_or_serialized);
	//--
	ajax.done(function(msg) { // {{{JQUERY-AJAX}}}
		var divContent = '';
		if(y_data_type === 'json') {
			if(msg.hasOwnProperty('div_content_html')) {
				divContent = String(msg.div_content_html);
			} //end if
		} else { // text | html
			divContent = String(msg);
		} //end if else
		jQuery('#' + y_div).html(divContent); // this will also evaluate the js scripts
	}).fail(function(msg) {
		if(SmartJS_BrowserUtils_NotifyLoadError === false) {
			console.error('ERROR: Invalid Server Response for LoadDivContent !' + '\n' + 'HTTP Status Code: ' + msg.status); // + '\n' + msg.responseText
		} else {
			_class.alert_Dialog('ERROR: Invalid Server Response for LoadDivContent !' + '\n' + 'HTTP Status Code: ' + msg.status, '', 'ERROR', 750, 425); // + '\n' + msg.responseText
		} //end if else
		jQuery('#' + y_div).html(''); // clear
	});
	//--
} //END FUNCTION


/**
 * Add (Create) a Bookmark to Favorites in Browser
 * This may not be supported by all browsers thus it have a TRY/CATCH fallback to avoid errors.
 *
 * @method bookmark_url
 * @static
 * @param 	{String} 	title 						The Title of the Bookmark
 * @param 	{String} 	url 						The URL of the Bookmark
 */
this.bookmark_url = function(title, url) {
	//--
	var warnMsg = '';
	//--
	try {
		if(jQuery.browser.msie) { // ie or edge
			//--
			window.external.AddFavorite(url, title);
			//--
		} else if(jQuery.browser.mozilla || jQuery.browser.webkit) { // ffox or webkit
			//--
			warnMsg = 'Press CTRL+D to save / Bookmark this URL to your Favorites ...';
			if(jQuery.alertable) {
				jQuery.alertable.alert(warnMsg).always(function(){});
			} else {
				alert(warnMsg);
			} //end if else
			//--
		} else if(jQuery.browser.opera){ // opera
			//--
			var elem = document.createElement('a');
			elem.setAttribute('href',url);
			elem.setAttribute('title',title);
			elem.setAttribute('rel','sidebar');
			elem.click();
			//--
		} else {
			//--
			warnMsg = 'Your Browser appear not to support Add-To-Favorites / Bookmarks !';
			if(jQuery.alertable) {
				jQuery.alertable.alert(warnMsg).always(function(){});
			} else {
				alert(warnMsg);
			} //end if else
			//--
		} //end if else
	} catch(err) {
		//--
		warnMsg = 'Your Browser failed to Add-To-Favorites (Bookmark) this URL. Try to do it manually ...';
		if(jQuery.alertable) {
			jQuery.alertable.alert(warnMsg).always(function(){});
		} else {
			alert(warnMsg);
		} //end if else
		//--
	} //end try catch
	//--
	return false;
	//--
} //END FUNCTION


/**
 * Trigger a function when you scroll to an element
 *
 * @method WayPoint
 * @static
 * @param 	{String} 	targetElem 					The Element ; sample: #elem-id .elem-class (interpretable by jQuery)
 * @param 	{JS-Code} 	evcode 						the JS Code to execute on complete
 */
this.WayPoint = function(targetElem, evcode) {
	//--
	var scrollTrigger = true;
	var theElement = jQuery(String(targetElem));
	//--
	jQuery(window).scroll(function() {
		if(!scrollTrigger) {
			return;
		} //end if
		var hT = theElement.offset().top;
		var hH = theElement.outerHeight();
		var wH = jQuery(window).height();
		var wS = jQuery(this).scrollTop();
		//console.log((hT-wH) , wS);
		if(wS > (hT+hH-wH)){
			scrollTrigger = false;
			//console.log('you have scrolled to the h1!');
			if((typeof evcode != 'undefined') && (evcode != 'undefined') && (evcode != null) && (evcode != '')) {
				try {
					if(typeof evcode === 'function') {
						evcode(theElement, targetElem, scrollTrigger); // call
					} else {
						eval('(function(){ ' + evcode + ' })();'); // sandbox
					} //end if else
				} catch(err) {
					console.error('ERROR: JS-Eval Error on Browser WayPoint Function' + '\nDetails: ' + err);
				} //end try catch
			} //end if
		} //end if
	});
	//--
} //END FUNCTION


/**
 * Create a virtual file download from Javascript
 *
 * @method VirtualFileDownload
 * @static
 * @param 	{String} 	data 						The content of the file to be downloaded
 * @param 	{String} 	fileName 					The file name (ex: 'file.txt')
 * @param 	{String} 	mimeType 					The mime type (ex: 'text/plain')
 * @param 	{String} 	charset 					The character set of the file content (ex: 'UTF-8' for text OR '' for binary)
 */
this.VirtualFileDownload = function(data, fileName, mimeType, charset) {
	//--
	if(!data) {
		data = '';
	} //end if
	if(!fileName) {
		fileName = 'file.bin';
	} //end if
	if(!mimeType) {
		mimeType = 'application/octet-stream';
	} //end if
	var isBin = false;
	if(!charset) {
		charset = '';
		isBin = true;
	} else {
		charset = ';charset=' + String(charset);
	} //end if
	//--
/*	var blob = null;
	try {
		blob = new Blob([String(data)], {type: String(mimeType) + charset + ';'});
	} catch(err){
		console.error('WARNING: Browser does not support blob downloads');
		return;
	} //end try catch
	//--
	var wURL = null;
	try {
		wURL = window.URL || window.webkitURL;
	} catch(err){
		console.error('WARNING: Browser does not support dynamic URL objects');
		return;
	} //end try catch
	//--
	var xURL = null;
	try {
		xURL = wURL.createObjectURL(blob);
	} catch(err){
		console.error('WARNING: Browser does not support dynamic URL create objects');
		return;
	} //end try catch */
	//--
	var link = document.createElement('a');
//	link.href = String(xURL);
	link.href = String('data:' + String(mimeType) + charset + ';' + ';base64,' + SmartJS_Base64.encode(data, isBin));
	//console.log(isBin);
	link.target = '_blank';
	link.setAttribute('download', String(fileName));
	document.body.appendChild(link);
	link.style = 'display: none';
	link.click();
	//--
	setTimeout(function(){
		document.body.removeChild(link);
	/*	try {
			URL.revokeObjectURL(xURL);
		} catch(err){
			console.error('NOTICE: Browser does not support dynamic URL revoke objects');
		} //end try catch */
	}, 100);
	//--
} //END FUNCTION


/**
 * Create a virtual image upload handler
 * Requires in HTML:
 * 		(#1) an input type file (can be any of visible or hidden/triggered by a button click)
 * 		(#2) an image preview container (div)
 *
 * @method VirtualImageUploadHandler
 * @static
 * @param 	{String} 	inputUpldFileId 			The HTML-Id of the input type file (#1)
 * @param 	{String} 	previewPlaceholderId 		The HTML-Id of the preview container (#2)
 * @param 	{Decimal} 	imgQuality 					The image quality (0.1 ... 1)
 * @param 	{Decimal} 	imgMaxResizeMBSize 			The max resized image size in MB (0.01 ... 2) ; Default is 0.1
 * @param 	{Integer} 	imgMaxResizeW 				The max resize width of the image (if the image width is lower will be not resized)
 * @param 	{Integer} 	imgMaxResizeH 				The max resize height of the image (if the image height is lower will be not resized)
 * @param 	{CallBack} 	fxDone 						A callback function(imgDataURL, w, h, isSVG, type, size) { ... } for done
 * @param 	{Boolean} 	clearPreview 				If FALSE will not clear the preview container after done; Default is TRUE
 * @param 	{Integer} 	widthPreview 				The Preview Width to set if not clearing the preview ; if not defined, full resized image width will be used (imgMaxResizeW)
 * @param 	{Integer} 	heightPreview 				The Preview Height to set if not clearing the preview ; if not defined, full resized image height will be used (imgMaxResizeH)
 * @param 	{Boolean} 	preserveGifs 				If TRUE will not process GIFS (which will be converted to PNG if processed via canvas) ; this may be used to avoid break animated Gifs
 */
this.VirtualImageUploadHandler = function(inputUpldFileId, previewPlaceholderId, imgQuality, imgMaxResizeMBSize, imgMaxResizeW, imgMaxResizeH, fxDone, clearPreview, widthPreview, heightPreview, preserveGifs) {
	//--
	if(!inputUpldFileId) {
		console.error('Image Uploader ERROR: Invalid uploadInput ID');
		return;
	} //end if
	if(!previewPlaceholderId) {
		console.error('Image Uploader ERROR: Invalid uploadPreview ID');
		return;
	} //end if
	if(!imgQuality) {
		imgQuality = 0.85; // jpeg quality set at 0.85 by default, if not specified
	} //end if
	if(imgQuality < 0.1) {
		imgQuality = 0.1;
	} else if(imgQuality > 1) {
		imgQuality = 1;
	} //end if else
	if(!imgMaxResizeMBSize) {
		imgMaxResizeMBSize = 0.1;
	} //end if
	if(imgMaxResizeMBSize < 0.01) {
		imgMaxResizeMBSize = 0.01; // min 0.01 MB
	} else if(imgMaxResizeMBSize > 2) {
		imgMaxResizeMBSize = 2; // max 1MB
	} //end if else
	if(imgMaxResizeW <= 0) {
		imgMaxResizeW = 800;
	} //end if
	if(imgMaxResizeH <= 0) {
		imgMaxResizeH = 600;
	} //end if
	if(clearPreview !== false) {
		clearPreview = true;
	} //end if
	if(widthPreview <= 0) {
		widthPreview = imgMaxResizeW;
	} //end if
	if(heightPreview <= 0) {
		heightPreview = heightPreview;
	} //end if
	if(preserveGifs !== true) {
		preserveGifs = false;
	} //end if
	if(typeof fxDone != 'function') {
		fxDone = null;
	} //end if
	//--
	var $upldr = jQuery('#' + SmartJS_CoreUtils.escape_html(inputUpldFileId));
	var $imgpw = jQuery('#' + SmartJS_CoreUtils.escape_html(previewPlaceholderId));
	//--
	$upldr.on('change', function() {
		//--
		var the_file = $upldr[0].files[0]; // object
		if(!the_file) {
			$upldr.val('');
			console.error('Image Uploader ERROR: Invalid File Uploader');
			return;
		} //end if
		//--
		var the_type_of_file = String(the_file.type || '').toLowerCase();
		var the_size_of_file = the_file.size || 0;
		//--
		var the_filter = /^(image\/svg\+xml|image\/jpeg|image\/png|image\/gif)$/i;
		if(!the_filter.test(the_type_of_file)) { // check file type
			$upldr.val('');
			$imgpw.text('Image Uploader WARNING: Invalid File Type - Only SVG / PNG / JPEG or GIF Images are allowed): ' + the_type_of_file);
			return;
		} //end if
		//--
		if(the_size_of_file < 43) { // check file size: min JPEG size is 134 bytes ; min PNG size is unknown ; min GIF size is 43 bytes
			$upldr.val('');
			$imgpw.text('Image Uploader WARNING: Invalid File Size - Image size is empty or too small ...');
			return;
		} else if(the_size_of_file > (1024 * 1024 * 32)) { // check uploaded max file size (<16MB)
			$upldr.val('');
			$imgpw.text('Image Uploader WARNING: Invalid File Size - Image is larger than 16MB');
			return;
		} //end if
		//--
		var imgRemoveBtn = '<div title="Remove the Image" style="width:20px; height:20px; line-height:20px; font-size:15px; font-weight:bold; color:#111111; cursor:pointer;" onClick="jQuery(\'#' + SmartJS_CoreUtils.escape_html(inputUpldFileId) + '\').val(\'\'); jQuery(\'#' + SmartJS_CoreUtils.escape_html(previewPlaceholderId) + '\').html(\'\');">&times;</div>';
		//--
		$imgpw.html(imgRemoveBtn);
		//--
		try {
			//--
			var the_frd = new FileReader();
			//--
			the_frd.onloadend = function() {
				$imgpw.append('<img id="uxm-img-uploader-result-img" src="' + SmartJS_CoreUtils.escape_html(the_frd.result) + '" style="max-width:' + SmartJS_CoreUtils.escape_html(imgMaxResizeW) + 'px; max-height:' + SmartJS_CoreUtils.escape_html(imgMaxResizeH) + 'px; width:auto !important; height:auto !important;">');
				setTimeout(function(){
						var isOK = false;
						var img = jQuery('#uxm-img-uploader-result-img');
						var w = Math.round(img.width()) || 1;
						var h = Math.round(img.height()) || 1;
						var isSVG = (the_type_of_file === 'image/svg+xml') ? true : false;
						var isPreservedGif = false;
						if(preserveGifs === true) {
							if(the_type_of_file === 'image/gif') {
								isPreservedGif = true;
							} //end if
						} //end if
						//console.log(w,h, isSVG);
						if(isSVG || isPreservedGif) {
							if(String(the_frd.result).length <= (1024 * 1024 * imgMaxResizeMBSize)) {
								isOK = true;
								if(typeof fxDone == 'function') {
									try {
										fxDone(String(the_frd.result), w, h, isSVG, String(the_type_of_file), String(the_frd.result).length);
									} catch(e){
										console.error('Virtual Image Uploader ERROR on CallBack: ' + e);
									}
								} //end if
							} else {
								$upldr.val('');
								$imgpw.text('Image Uploader WARNING: Size is higher than allowed size: ' + String(the_frd.result).length + ' Bytes');
							} //end if else
							if(isOK) {
								$imgpw.empty().html('');
								if(!clearPreview) {
									$imgpw.html(String(imgRemoveBtn) + "\n" + '<img id="uxm-img-uploader-result-img" src="' + SmartJS_CoreUtils.escape_html(the_frd.result) + '" style="max-width:' + SmartJS_CoreUtils.escape_html(widthPreview) + 'px; max-height:' + SmartJS_CoreUtils.escape_html(heightPreview) + 'px; width:auto !important; height:auto !important;">');
								} //end if
							} //end if
						} else {
							jQuery('#uxm-img-uploader-result-img').remove();
							$imgpw.append('<canvas id="uxm-img-uploader-result-cnvs" width="' + SmartJS_CoreUtils.escape_html(w) + '" height="' + SmartJS_CoreUtils.escape_html(h) + '" style="border: 1px dotted #ECECEC;"></canvas>');
							var im = new Image();
							im.width = w;
							im.height = h;
							im.onload = function(){
								var cnv = jQuery('#uxm-img-uploader-result-cnvs')[0];
								if(!cnv) {
									console.error('Virtual Image Uploader ERROR: Failed to Get Resizable Container');
									return;
								} //end if
								var ctx = cnv.getContext('2d');
								if(!ctx) {
									console.error('Virtual Image Uploader ERROR: Failed to Get Resizable Container Context');
									return;
								} //end if
								//ctx.fillStyle = '#FFFFFF'; // make sense just for image/jpeg
								//ctx.fillRect(0, 0, w, h); // make sense just for image/jpeg
								ctx.drawImage(this, 0, 0, w, h);
								var imgResizedB64 = cnv.toDataURL(String(the_type_of_file), imgQuality); // preserve file type ; set image quality ... just for jpeg right now ...
								//console.log('Before' + the_frd.result.length, 'After: ' + imgResizedB64.length);
								if(String(imgResizedB64).length <= (1024 * 1024 * imgMaxResizeMBSize)) {
									isOK = true;
									if(typeof fxDone == 'function') {
										try {
											fxDone(String(imgResizedB64), w, h, false, String(the_type_of_file), String(imgResizedB64).length);
										} catch(e){
											console.error('Virtual Image Uploader ERROR on CallBack: ' + e);
										}
									} //end if
									if(isOK) {
										$imgpw.empty().html('');
										if(!clearPreview) {
											$imgpw.html(String(imgRemoveBtn) + "\n" + '<img id="uxm-img-uploader-result-img" src="' + SmartJS_CoreUtils.escape_html(imgResizedB64) + '" style="max-width:' + SmartJS_CoreUtils.escape_html(widthPreview) + 'px; max-height:' + SmartJS_CoreUtils.escape_html(heightPreview) + 'px; width:auto !important; height:auto !important;">');
										} //end if
									} //end if
								} else {
									$upldr.val('');
									$imgpw.text('Image Uploader WARNING: Image Size after resize is higher than allowed size: ' + String(imgResizedB64).length + ' Bytes');
								} //end if else
							};
							im.src = String(the_frd.result);
						} //end if else
					},
					500
				);
			} //end function
			//--
			the_frd.readAsDataURL(the_file);
			//--
		} catch(err){
			//--
			$upldr.val('');
			console.error('Virtual Image Uploader ERROR: ' + err);
			//--
		} //end try catch
		//--
	});
	//--
} //END FUNCTION


// ###################################### PRIVATES


/*
 * Set Refresh on PopUp Parent
 *
 * @private : non public
 * @method Refresh_SET_Popup_Parent
 * @static
 * @param 	{String} 	yURL 						The URL to be used for Refresh
 */
var Refresh_SET_Popup_Parent = function(yURL) {
	//--
	if((typeof yURL == 'undefined') || (yURL == 'undefined') || (yURL == null)) {
		yURL = '';
	} //end if
	//--
	if(_class.WindowIsPopup() === true) { // when called from PopUp
		//--
		//console.log('Executing: Refresh_SET_Popup_Parent ...');
		//--
		try {
			//-- {{{SYNC-TRANSFER-MODAL-POPUP-REFRESH}}}
			if(window.opener.SmartJS_ModalBox) {
				if(window.opener.SmartJS_ModalBox.getStatus() === 'visible') {
					window.opener.SmartJS_ModalBox.setRefreshParent(1, String(yURL));
					return;
				} //end if
			} //end if
			//--
			window.opener.SmartJS_BrowserUtils_RefreshState = 1;
			window.opener.SmartJS_BrowserUtils_RefreshURL = String(yURL);
			//--
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Set Refresh on PopUp Parent: ' + err);
		} //end try catch
		//--
	} //end if
	//--
} //END FUNCTION


/*
 * Exec Refresh PopUp Parent
 *
 * @private : non public
 * @method Refresh_EXEC_Popup_Parent
 * @static
 */
var Refresh_EXEC_Popup_Parent = function() {
	//--
	if(_class.WindowIsPopup() === true) { // when called from PopUp
		//--
		try {
			//--
			if((window.opener.SmartJS_BrowserUtils_PopUpWindow) && (window.opener.SmartJS_BrowserUtils_PopUpWindow === self)) {
				//console.log('This will be handled by initPopUp timer, no needed to use directly');
				return;
			} //end if
			//--
			if(window.opener.SmartJS_BrowserUtils_RefreshState) {
				//--
				//console.log('Executing: Refresh_EXEC_Popup_Parent ...');
				//--
				if((typeof window.opener.SmartJS_BrowserUtils_RefreshURL == 'undefined') || (window.opener.SmartJS_BrowserUtils_RefreshURL == null) || (window.opener.SmartJS_BrowserUtils_RefreshURL == '')) {
					//window . opener . location . reload(false); // false is to reload from cache
					window.opener.location = window.opener.location; // FIX: avoid reload to resend POST vars !!
				} else {
					window.opener.location = String(window.opener.SmartJS_BrowserUtils_RefreshURL);
				} //end if else
				//--
				window.opener.SmartJS_BrowserUtils_RefreshState = 0;
				window.opener.SmartJS_BrowserUtils_RefreshURL = '';
				//--
			} //end if
			//--
		} catch(err){
			console.error('NOTICE: BrowserUtils Failed to Exec Refresh on PopUp Parent: ' + err);
		} //end try catch
		//--
	} //end if
	//--
} //END FUNCTION


/*
 * Exec Refresh on Self
 *
 * @private : non public
 * @method RefreshEXEC_Self
 * @static
 */
var RefreshEXEC_Self = function() {
	//--
	try {
		if(self.SmartJS_BrowserUtils_RefreshState) {
			//--
			//console.log('Executing: RefreshEXEC_Self ...');
			//--
			if((typeof SmartJS_BrowserUtils_RefreshURL == 'undefined') || (SmartJS_BrowserUtils_RefreshURL == null) || (SmartJS_BrowserUtils_RefreshURL == '')) {
				//self . location . reload(false); // false is to reload from cache
				self.location = self.location; // FIX: avoid reload to resend POST vars !!
			} else {
				self.location = String(SmartJS_BrowserUtils_RefreshURL);
			} //end if else
			//--
			SmartJS_BrowserUtils_RefreshState = 0;
			SmartJS_BrowserUtils_RefreshURL = '';
			//--
		} //end if
	} catch(err){
		console.error('NOTICE: BrowserUtils Failed to Set Refresh on Self: ' + err);
	} //end try catch
	//--
} //END FUNCTION


/*
 * Create a Message (Dialog or Growl) Notification
 *
 * @private : non public
 * @method Message_AjaxForm_Notification
 * @static
 * @param 	{String} 	ytitle 						The Title
 * @param 	{String} 	ymessage 					The Message (HTML code)
 * @param 	{String} 	yredirect 					*Optional* The URL to redirect
 * @param 	{Yes/No} 	growl 						*Optional* If 'yes' will use the Growl notifications otherwise (default: if 'no') will use Dialog notification
 * @param 	{Enum} 		class_growl 				*Optional* If Growl is used, a CSS class for Growl is required: gritter-neutral ; gritter-dark ; gritter-light ... see jquery.gritter.css (or create a custom css class for Growl)
 * @param 	{Integer} 	timeout 					*Optional* If Growl is used, the Growl timeout in milliseconds
 */
var Message_AjaxForm_Notification = function(ytitle, ymessage, yredirect, growl, class_growl, timeout) {
	//--
	if(growl === 'yes') {
		//--
		var redirectAfterClose = null;
		if((typeof yredirect != 'undefined') && (yredirect != null) && (yredirect != '')) {
			_class.RedirectDelayedToURL(yredirect, (timeout + parseInt(SmartJS_BrowserUtils_Time_Delay_Redirect))); // comment this to disable override of mouse over growl
			redirectAfterClose = function(){
				SmartJS_BrowserUtils.RedirectDelayedToURL(String(yredirect), 500);
			};
		} else {
			setTimeout(function(){ SmartJS_BrowserUtils.Overlay_Hide(); }, (timeout + parseInt(SmartJS_BrowserUtils_Time_Delay_Redirect))); // comment this to disable override of mouse over growl
		} //end if
		//--
		var growlOptions = {
			before_close: redirectAfterClose,
			after_close: function(){
				SmartJS_BrowserUtils.Overlay_Hide();
			}
		};
		//--
		GrowlNotificationDoAdd(ytitle, ymessage, '', timeout, false, class_growl, growlOptions);
		//--
	} else {
		//--
		var active_code = '';
		if((typeof yredirect != 'undefined') && (yredirect != null) && (yredirect != '')) {
			active_code = 'SmartJS_BrowserUtils.RedirectDelayedToURL(\'' + SmartJS_CoreUtils.escape_js(yredirect) + '\', 100);';
		} //end if
		//--
		_class.alert_Dialog(ymessage, active_code, ytitle, 550, 275);
		//--
	} //end if else
	//--
} //END FUNCTION


/*
 * Create a Message Growl Notification
 *
 * @private : non public
 * @method GrowlNotificationDoAdd
 * @static
 * @param 	{String} 		title 						The Title
 * @param 	{String} 		text 						The Message (HTML code)
 * @param 	{String} 		image 						If non-empty, an image will be displayed inside Growl
 * @param 	{Integer} 		time 						The Growl timeout in milliseconds
 * @param 	{Boolean} 		sticky 						If TRUE the Growl will be sticky (ignore time, will be closed just on user explicit close), otherwise if FALSE (default) is to be non-sticky and close on time-out
 * @param 	{Enum} 			class_name 					*Optional* If Growl is used, a CSS class for Growl is required: gritter-neutral ; gritter-dark ; gritter-light ... see jquery.gritter.css (or create a custom css class for Growl)
 * @param 	{Array-Obj} 	options 					*Optional* Extra Growl Properties:
 * 		{ // example of extra Options
 * 			before_open: 	function(){},
 * 			after_open: 	function(){},
 * 			before_close: 	function(){},
 * 			after_close: 	function(){}
 * 		}
 * @return 	{Object} 									The Growl object
 */
var GrowlNotificationDoAdd = function(title, text, image, time, sticky, class_name, options) {
	//--
	var growl_before_open = null;
	var growl_after_open = null;
	var growl_before_close = null;
	var growl_after_close = null;
	//--
	if(typeof options != 'undefined') {
		if(options.hasOwnProperty('before_open')) {
			growl_before_open = options.before_open;
		} //end if
		if(options.hasOwnProperty('after_open')) {
			growl_after_open = options.after_open;
		} //end if
		if(options.hasOwnProperty('before_close')) {
			growl_before_close = options.before_close;
		} //end if
		if(options.hasOwnProperty('after_close')) {
			growl_after_close = options.after_close;
		} //end if
	} //end if
	//--
	if(typeof jQuery.gritter == 'undefined') {
		if(jQuery.isFunction(growl_before_open)) {
			growl_before_open();
		} //end if
		if(jQuery.isFunction(growl_after_open)) {
			growl_after_open();
		} //end if
		title = jQuery('<div>' + title + '</div>').text(); // strip tags
		text = jQuery('<div>' + text + '</div>').text(); // strip tags
		// if growl notif fails, use the alert !
		if(jQuery.alertable) {
			jQuery.alertable.alert(title + '\n' + text).always(function(){ // use always not done to simulate real alert
				if(jQuery.isFunction(growl_before_close)) {
					growl_before_close();
				} //end if
				if(jQuery.isFunction(growl_after_close)) {
					growl_after_close();
				} //end if
			});
		} else {
			alert(title + '\n' + text);
			if(jQuery.isFunction(growl_before_close)) {
				growl_before_close();
			} //end if
			if(jQuery.isFunction(growl_after_close)) {
				growl_after_close();
			} //end if
		} //end if else
		return null;
	} //end if
	//--
	if((typeof image != 'undefined') && (image !== '') && (image !== null)) {
		image = '<img src="' + image + '" align="right">';
	} else {
		image = '';
	} //end if
	//--
	if((typeof class_name == 'undefined') || (class_name == 'undefined') || (class_name == undefined)) {
		class_name = '';
	} else {
		class_name = String(class_name);
	} //end if
	//--
	var growl = jQuery.gritter.add({
		class_name: String(class_name),
		title: String(String(title) + String(image)),
		text: String(text),
		sticky: Boolean(sticky),
		before_open:  growl_before_open,
		after_open:   growl_after_open,
		before_close: growl_before_close,
		after_close:  growl_after_close,
		time: parseInt(String(time))
	});
	//--
	return growl;
	//--
} //END FUNCTION


/*
 * Remove a Growl Notification by ID from the current browser window (page)
 *
 * @private : non public
 * @method GrowlNotificationDoRemove
 * @static
 * @param 	{String} 	id 		The HTML id of the Growl Notification to remove
 */
var GrowlNotificationDoRemove = function(id) {
	//--
	if(typeof jQuery.gritter == 'undefined') {
		return;
	} //end if
	//--
	if((typeof id != 'undefined') && (id !== undefined) && (id != '')) {
		try {
			jQuery.gritter.remove(id);
		} catch(e){}
	} else {
		jQuery.gritter.removeAll();
	} //end if else
	//--
} //END FUNCTION

//======================================= Open Req. PopUp


/*
 * Inits and Ppen a PopUp or Modal Window by Form or Link
 *
 * @private : non public
 * @method init_PopUp
 * @static
 * @param 	{String} 	strUrl 			The URL to open
 * @param 	{String} 	strTarget 		The URL target (window name)
 * @param 	{String} 	windowWidth 	*Optional* The Window Width
 * @param 	{String} 	windowHeight 	*Optional* The Window Height
 * @param 	{Enum} 		forcePopUp 		*Optional* Open Mode:
 * 		 0 (default) don't force, if modal Open Modal otherwise open PopUp
 * 		 1 force PopUp
 * 		-1 force Modal
 * @param 	{Enum} 		forceDims 		*Optional* If Modal must be set to 1 to force use the specified Width and Height
 */
var init_PopUp = function(strUrl, strTarget, windowWidth, windowHeight, forcePopUp, forceDims) {
	//--
	if(((typeof SmartJS_ModalBox != 'undefined') && (SmartJS_BrowserUtils_Use_iFModalBox_Active) && (forcePopUp != 1)) || (forcePopUp == -1)) { // use smart modal box
		//-- trasfer current parent refresh settings to this modal {{{SYNC-TRANSFER-MODAL-POPUP-REFRESH}}}
		SmartJS_ModalBox.setRefreshParent(SmartJS_BrowserUtils_RefreshState, SmartJS_BrowserUtils_RefreshURL);
		//-- reset refresh on each modal open else a popup opened previous may refresh the parent on close
		SmartJS_BrowserUtils_RefreshState = 0;
		SmartJS_BrowserUtils_RefreshURL = '';
		//-- open
		if(forceDims != 1) {
			SmartJS_ModalBox.go_Load(strUrl, SmartJS_BrowserUtils_Use_iFModalBox_Protection); // we do not use here custom size
		} else {
			SmartJS_ModalBox.go_Load(strUrl, SmartJS_BrowserUtils_Use_iFModalBox_Protection, windowWidth, windowHeight); // we use here custom size
		} //end if else
		//--
	} else { // use pop up
		//--
		var the_screen_width = 0;
		try { // try to center
			the_screen_width = parseInt(screen.width);
		} catch(e){} //end try catch
		if((the_screen_width <= 0) || (!SmartJS_CoreUtils.isFiniteNumber(the_screen_width))) {
			the_screen_width = 920;
		} //end if
		//--
		var the_screen_height = 0;
		try { // try to center
			the_screen_height = parseInt(screen.height);
		} catch(e){} //end try catch
		if((the_screen_height <= 0) || (!SmartJS_CoreUtils.isFiniteNumber(the_screen_height))) {
			the_screen_height = 700;
		} //end if
		//--
		var maxW = parseInt(the_screen_width * 0.90);
		windowWidth = parseInt(windowWidth);
		if(!SmartJS_CoreUtils.isFiniteNumber(windowWidth) || (windowWidth > maxW)) {
			windowWidth = maxW;
		} //end if
		//--
		var maxH = parseInt(the_screen_height * 0.80); // on height there are menus or others
		windowHeight = parseInt(windowHeight);
		if(!SmartJS_CoreUtils.isFiniteNumber(windowHeight) || (windowHeight > maxH)) {
			windowHeight = maxH;
		} //end if
		//--
		if((windowWidth < 200) || (windowHeight < 100)) {
			windowWidth = maxW;
			windowHeight = maxH;
		} //end if
		//--
		var windowTop = 50;
		windowLeft = parseInt((the_screen_width / 2) - (windowWidth / 2));
		if((windowLeft < 10) || !SmartJS_CoreUtils.isFiniteNumber(windowLeft)) {
			windowLeft = 10;
		} //end if
		//-- normal use :: events (normal use): SmartJS_BrowserUtils_PopUpWindow == null ; SmartJS_BrowserUtils_PopUpWindow.closed
		try { // pre-focus if opened
			if(SmartJS_BrowserUtils_PopUpWindow) {
				_class.windowFocus(SmartJS_BrowserUtils_PopUpWindow);
			} //end if
		} catch(err){}
		try {
			SmartJS_BrowserUtils_PopUpWindow = window.open(strUrl, strTarget, "top=" + windowTop + ",left=" + windowLeft + ",width=" + windowWidth + ",height=" + windowHeight + ",toolbar="+SmartJS_BrowserUtils_PopUp_ShowToolBar+",scrollbars=1,resizable=1");
		} catch(err){
			console.error('ERROR when trying to raise a new PopUp Window: ' + err);
		} //end try catch
		if(SmartJS_BrowserUtils_PopUpWindow) {
			try { // post-focus
				_class.windowFocus(SmartJS_BrowserUtils_PopUpWindow); // focus
			} catch(err){}
			try { // monitor when popup is closed, every 250ms
				var wnd_popup_timer = setInterval(function() {
					if(SmartJS_BrowserUtils_PageAway !== true) {
						if(SmartJS_BrowserUtils_PopUpWindow.closed) {
							clearInterval(wnd_popup_timer); // first stop
							RefreshEXEC_Self(); // {{{SYNC-POPUP-Refresh-Parent-By-EXEC}}}
							return false;
						} //end if
					} //end if
				}, 250);
			} catch(err){}
		} //end if
		//--
	} //end if else
	//--
} //END FUNCTION


} //END CLASS

//==================================================================
//==================================================================

// #END

// ############### ifmodalbox_scanner.js

// [LIB - Smart.Framework / JS / Smart Modal Scanner]
// (c) 2006-2019 unix-world.org - all rights reserved
// v.3.7.8 r.2019.01.03 / smart.framework.v.3.7

// DEPENDS: jQuery, SmartJS_ModalBox, SmartJS_BrowserUtils

//==================================================================
//==================================================================

//================== [NO:evcode]

//=======================================
// CLASS :: Smart Modal iFrame Scanner
//=======================================

jQuery(function() { // ON DOCUMENT READY :: v.20190115
	//--
	//jQuery('body').delegate('a[data-smart]', 'click', function(el) { // delegate() does the job also with new dom inserted links
	jQuery('body').on('click', 'a[data-smart]', function(el) { // jQuery 3+ : this is equivalent with delegate() which was deprecated
		//--
		var version = 'r.20190115';
		//--
		var dataSmart = jQuery(this).attr('data-smart');
		if(!dataSmart) {
			return true; // let click function as default
		} //end if
		//alert(dataSmart);
		//--
		var isModal = RegExp(/^open.modal/i).test(dataSmart);
		var isPopup = RegExp(/^open.popup/i).test(dataSmart);
		if((isModal !== true) && (isPopup !== true)) { // does not have proper syntax
			return true; // let click function as default
		} //end if
		//--
		var attrHref = jQuery(this).attr('href');
		if(!attrHref) {
			console.error('iFrmBox Scanner (' + version + '): The Clicked Data-Smart [' + dataSmart + '] Link has no Href Attribute: ' + jQuery(this).text());
			return false;
		} //end if
		//--
		var attrTarget = jQuery(this).attr('target');
		if(!attrTarget) {
			attrTarget = '_blank';
		} //end if
		//--
		var winWidth = parseInt(jQuery(window).width());
		if(!SmartJS_CoreUtils.isFiniteNumber(winWidth)) {
			winWidth = 920;
		} //end if
		var winHeight = parseInt(jQuery(window).height());
		if(!SmartJS_CoreUtils.isFiniteNumber(winHeight)) {
			winHeight = 700;
		} //end if
		//--
		var aDim = dataSmart.match(/[0-9]+(\.[0-9][0-9]?)?/g); // dataSmart.match(/[0-9]+/g);
		var w = winWidth; // (aDim && (aDim[0] > 0)) ? aDim[0] : winWidth;
		var h = winHeight; // (aDim && (aDim[1] > 0)) ? aDim[1] : winHeight;
		var u = (aDim && (aDim[2] > 0)) ? aDim[2] : 0;
		//--
		if(aDim) {
			if(aDim[0] > 0) {
				if(aDim[0] < 1) {
					w = aDim[0] * winWidth;
				} else {
					w = aDim[0];
				} //end if else
			} //end if
			if(aDim[1] > 0) {
				if(aDim[1] < 1) {
					h = aDim[1] * winHeight;
				} else {
					h = aDim[1];
				} //end if else
			} //end if
		} //end if
		//--
		w = parseInt(w);
		h = parseInt(h);
		u = parseInt(u);
		//--
		if(w > winWidth) {
			w = parseInt(winWidth * 0.9);
		} //end if
		if(w < 200) {
			w = 200;
		} //end if
		if(h > winHeight) {
			h = parseInt(winHeight * 0.9);
		} //end if
		if(h < 100) {
			h = 100;
		} //end if
		//--
		var mode = 0; // 1 = popup, 0 = modal if not in modal, -1 = modal
		switch(u) {
			case 1:
				mode = -1; // force modal
				break;
			default:
				mode = 0; // default
		} //end switch
		//--
		if(isModal === true) {
			SmartJS_BrowserUtils.PopUpLink(attrHref, attrTarget, w, h, mode, 1);
		} else if(isPopup === true) {
			SmartJS_BrowserUtils.PopUpLink(attrHref, attrTarget, w, h, 1, 1);
		} //end if else
		//--
		return false;
		//--
	});
	//--
}); //END ON DOCUMENT READY FUNCTION

//jQuery('body').on('DOMSubtreeModified', function() { // this is deprecated
//jQuery(document).ajaxComplete(function(event, xhr, settings) { // DETECT CONTENT CHANGES BY AJAX CALLS
//	//-- if((typeof settings.dataType == 'undefined') || (settings.dataType == 'html') || (settings.dataType == 'text')) {
//		setTimeout(function(){ ... re-scan page links ... }, 500); // this have to be async
//	//-- } //end if
//}); //END FUNCTION

//==================================================================
//==================================================================

// #END

// ############### [#]

// # JS Package: smart-framework.js :: #END#

